[[chap14]]
== Arquivos

Este capítulo introduz a ideia de programas “persistentes” que mantêm dados permanentemente armazenados, e mostra como usar tipos diferentes de armazenamentos permanentes, como arquivos e databases.

=== Persistência

A maioria dos programas que nós vimos até agora são transitórios no sentido de que eles executam por um período pequeno e produzem alguma saída, mas ao finalizarem, seus dados desaparecem. Se você executar o programa novamente, ele inicia com um estado limpo.
(((transitório)))

Outros programas são _persistentes_: eles executam por um longo tempo (ou toda hora); eles mantém pelo menos um pouco dos dados em um armazenamento permanente (um disco rígido, por exemplo); e se eles forem encerrados e reiniciados, eles retornam aonde pararam.
(((persistente)))

Exemplos de programas persistentes são sistemas operacionais, que são executados toda vez que um computador é ligado, e servidores web, que são executados toda hora, aguardando solicitações vindos da rede.

Uma das maneiras mais simples que programas usam para manter seus dados é lendo e escrevendo _arquivos de texto_. Nós já vimos programas que lêm arquivos de texto; neste capítulo nós veremos programas que as escrevem.

Uma alternativa é armazenar o estado do programa em uma database. Neste capítulo eu também irei apresentar como usar uma database simples.

[[reading_and_writing]]
=== Lendo e Escrevendo

Um arquivo de texto é uma sequência de caracteres armazenado em um meio permanente como um disco rígido, ou memória flash. Nós vimos como abrir e ler um arquivo em <<reading_word_lists>>.

Para escrever um arquivo, você tem que abri-lo com modo +"w"+ como segundo parâmetro:
(((open)))

[source,@julia-repl-test chap14]
----
julia> fout = open("saida.txt", "w")
IOStream(<file saida.txt>)
----

Se o arquivo já existe, abri-lo em modo escrita limpa os dados antigos e começa de novo, então tome cuidado! Se o arquivo não existe, um novo é criado. +open+ retorna um objeto arquivo e a função +write+ coloca dados dentro do arquivo.
(((write)))((("função", "Base", "write", see="write")))

[source,@julia-repl-test chap14]
----
julia> linha1 = "No meio do caminho tinha uma pedra\n";

julia> write(fout, linha1)
24
----

O valor de retorno é o número de caracteres que foram escritos. O arquivo objeto acompanha aonde ele está, então se você chamar +write+ novamente, ela adiciona novos dados ao final do arquivo.

[source,@julia-repl-test chap14]
----
julia> linha2 = "tinha uma pedra no meio do caminho.\n";

julia> write(fout, linha2)
24
----

Após você terminar de escrever, você deve fechar o arquivo.
(((close)))

[source,@julia-repl-test chap14]
----
julia> close(fout)

----

Se você não fechar o arquivo, ele é fechado quando o programa encerra.


=== Formatação

O argumeto da função write precisa ser uma string, então se nós quissesemos colocar outros valores no arquivo, nós temos que convertê-los para string. A maneira mais fácil de fazer isso é com +string+ ou interpolação de strings:
(((string)))(((interpolação de strings)))

[source,@julia-repl-test chap14]
----
julia> fout = open("saida.txt", "w")
IOStream(<file saida.txt>)
julia> write(fout, string(150))
3
----

Uma alternativa é usar a familia de funções +print(ln)+.
(((print)))(((println)))

[source,@julia-repl-test chap14]
----
julia> camelos = 42
42
julia> println(fout, "Eu vi $camels camelos.")

----

[TIP]
====
Uma alternativa mais poderosa é o macro +@printf@+ que imprime usando uma string de especificação de formato de estilo C, você pode ler mais a respeito em https://docs.julialang.org/en/v1/stdlib/Printf/
(((@printf)))((("macro", "Printf", "@printf", see="@printf")))(((formatação)))
====


=== Filenames e Paths

Arquivos são organizados em _diretórios_ (também chamados de “pastas”). Todo programa em execução possui um “diretório atual”, que é o diretório padrão para a maioria das operações. Por exemplo, quando você abre um arquivo para leitura, o Julia a procura no diretório atual.
(((diretório)))((("pasta", see="diretório")))

A função +pwd+ retorna o nome do diretório atual:
(((pwd)))((("função", "Base", "pwd", see="pwd")))

[source,jlcon]
----
julia> cwd = pwd()
"/home/ben"
----

+cwd+ significa “current working directory” (diretório atual funcional). O resultado neste exemplo é +home/ben+, que é o diretório home do usuário chamado +ben+.

Uma string como +"/home/ben"+ que identifica um arquivo ou diretório é chamado de _path_ (caminho).
(((path)))

Um nome de arquivo simples, como +memo.txt+ também é considerado um path, mas é um _path relativo_ porque se refere ao diretório atual. Se o diretório atual é +/home/ben+, o nome do arquivo +memo.txt+ se referiria à +/home/ben/memo.txt+.
(((path relativo)))((("path", "relativo", see="path relativo")))

Um path que começa com +/+ não depende do diretóri atual; ele é chamado de _path absoluto_. Para achar um path absoluto para um arquivo, você pode usar +abspath+:
(((path absoluto)))((("path", "absoluto", see="path absoluto")))(((abspath)))((("função", "Base", "abspath", see="abspath")))

[source,jlcon]
----
julia> abspath("memo.txt")
"/home/ben/memo.txt"
----

O Julia fornece outras funções para trabalhar com nomes de arquivos e paths. Por exemplo, +ispath+ verifica se um arquivo ou diretório existe:
(((ispath)))((("função", "Base", "ispath", see="ispath")))

[source,jlcon]
----
julia> ispath("memo.txt")
true
----

Se ele existe, +isdir+ verifica se é um diretório:
(((isdir)))((("função", "Base", "isdir", see="isdir")))

[source,jlcon]
----
julia> isdir("memo.txt")
false
julia> isdir("/home/ben")
true
----

De forma similar, +isfile+ verifica se é um arquivo.
(((isfile)))((("função", "Base", "isfile", see="isfile")))

+readdir+ retorna um array de arquivos (e outros diretórios) no diretório dado:
(((readdir)))((("função, "Base", "readdir", see="readdir")))

[source,jlcon]
----
julia> readdir(cwd)
3-element Array{String,1}:
 "memo.txt"
 "musica"
 "fotos"
----

Para demonstrar estas funções, o exemplo a seguir “anda” por um diretório, exibe os nomes de todos os arquivos, e chama a si mesmo recursivamente em todos os diretórios.
(((anda)))((("função", "definido pelo programador", "anda", see="anda")))

[source,@julia-setup chap14]
----
function anda(nomedir)
    for nome in readdir(nomedir)
        path = joinpath(nomedir, nome)
        if isfile(path)
            println(path)
        else
            anda(path)
        end
    end
end
----

+joinpath+ recebe um diretório e um nome de arquivo e junta-os em um path completo.
(((joinpath)))((("função", "Base", "joinpath", see="joinpath")))

[TIP]
====
O Julia fornece uma função chamada +walkdir+ (veja https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.walkdir) que é similar a esta mas é mais versátil. Como um exercício, leia a documentação e a use para imprimir os nomes dos arquivos em um dado diretório e seus subdiretórios.
(((walkdir)))((("função", "Base", "walkdir", see="walkdir")))
====


[[catching_exceptions]]
=== Capturando Exceções

Muitas coisas podem dar errado quando você tenta ler e escrever arquivos. Se você tentar abrir um arquivo que não existe, você recebe um +SystemError+:
(((SystemError)))((("error", "Base", "SystemError", see="SystemError")))

[source,@julia-repl-test]
----
julia> fin = open("arquivo_ruim")
ERROR: SystemError: opening file "arquivo_ruim": No such file or directory
----

Se você não tem permissão para acessar o arquivo:

[source,@julia-repl-test]
----
julia> fout = open("/etc/passwd", "w")
ERROR: SystemError: opening file "/etc/passwd": Operation not permitted
----

Para evitar estes erros, você pdoe usar funções como +ispath+ e +isfile+, mas levaria muito tempo e código para verificar todas as possibilidades.

É mais fácil tentar de uma vez-e lidar com os problemas se eles ocorrerem-que é exatamente o que a declaração +try+ faz. A sintaxe é similar a uma declaração +if+:
(((declaração try)))((("declaração", "try", see="declaração try")))(((try)))((("palavra-chave", "try", see="try")))(((catch)))((("palavra-chave", "catch", see="catch")))(((end)))

[source,julia]
----
try
    fin = open("arquivo_ruim.txt")
catch exc
    println("Algo deu errado: $exc")
end
----

O Julia inicia executando a cláusula +try+. Se tudo vai bem, ele pula a cláusula +catch+ e segue a diante. Se uma exceção ocorre, ele pula fora da cláusula +try+ e executa a cláusula +catch+.

Lidar com uma exceção com uma declaração +try+ é chamado de _capturar_ uma exceção. Neste exemplo, a cláusula exceto imprime uma mensagem de erro que não é muito útil. Em geral, capturar uma exceção nos da uma chance de consertar o problema, ou tentar novamente, ou pelo menos encerrar o programa graciosamente.
(((capturar uma exceção)))

Em código que efetura mudanças de estado ou usa recursos como arquivos, há geralmente trabalho de limpeza (como fechar arquivos) que precisa ser feito quando o código é encerrado. Exceções potencialmente complicam esta tarefa, já que elas podem causar a saída de um bloco de código antes dele atingir seu fim normal. A palavra-chave +finally+ fornece uma maneira de executar código quando um dado bloco de código sai, independente de como ele saiu:
(((finally)))((("palavra-chave", "finally", see="finally")))

[source,julia]
----
f = open("output.txt")
try
    line = readline(f)
    println(line)
finally
    close(f)
end
----

A função +close+ sempre será executada.

[[databases]]
=== Databases

Uma _database_ é um arquivo que é organizado para guardar dados. Muitas databases são organizadas como um dicionário no sentido de que elas mapeiam chave para valores. A maior diferença entre uma database e um dicionário é de que a database está em disco (ou em armazenamento permanente), então ela persiste após o programa encerrar.
(((database)))

O JuliaIntroBR fornece uma interface para +GDBM+ (GNU dbm) para criar e atualizar arquivos de database. Como um exemplo, irei criar uma database que contém legendas para arquivos de imagens.
(((GDBM)))

Abrir uma database é similar a abrir outros arquivos:
(((DBM)))((("tipo", "JuliaIntroBR", "DBM", see="DBM")))

[source,@julia-repl-test chap14]
----
julia> using JuliaIntroBR

julia> db = DBM("legendas", "c")
DBM(<legendas>)
----

O modo "c" significa que a database deve ser criada se ela ainda não existe. O resultado é um objeto database que pode ser usado (para a maioria das operações) como um dicionário.

Quando você cria um novo item, +GDBM+ atualiza o arquivo database:
(((operador colchetes)))

[source,@julia-repl-test chap14]
----
julia> db["cleese.png"] = "Foto de John Cleese."
"Foto de John Cleese."
----

Quando você acessar um de seus itens, +GDBM+ lê o arquivo:

[source,@julia-repl-test chap14]
----
julia> db["cleese.png"]
"Foto de John Cleese."
----

Se você faz outra atribuição para uma chava já existe, +GDBM+ substitui o valor antigo:
(((atribuição)))

[source,@julia-repl-test chap14]
----
julia> db["cleese.png"] = "Foto de John Cleese fazendo uma andada engraçada."
"Foto de John Cleese fazendo uma andada engraçada."
julia> db["cleese.png"]
"Foto de John Cleese fazendo uma andada engraçada."
----

Algumas funções que tem um dicionário como argumento, como +keys+ e +values+, não funcionam com objetos database. Mas iteração com o laço +for+ funciona:
(((declaração for)))(((iteração)))

[source,julia]
----
for (chave, valor) in db
    println(chave, ": ", valor)
end
----

Como outros arquivos, você deve fechar a database quando acabar:
(((close)))

[source,@julia-repl-test chap14]
----
julia> close(db)

----


=== Serialização

A limitação do +GDBM+ é de que as chaves e os valores tem que ser strings ou arrays de bytes. Se você tentar usar qualquer outro tipo, você recebe um erro.

As funções +serialize+ e +deserialize+ podem ajudar. Elas traduzem quase todo tipo de objeto em um array de bytes (um iobuffer) adequado para armazenamento em um database, e em seguida traduz o array de bytes em objetos:
(((Serialização)))((("módulo", "Serialização", see="Serialization")))(((serialize)))((("função", "Serialização", "serialize", see="serialize)))(((IOBuffer)))((("tipo", "Base", "IOBuffer", see="IOBuffer")))(((take!)))((("função", "Base", "take!", see="take!")))

[source,@julia-repl-test chap14]
----
julia> using Serialization

julia> io = IOBuffer();

julia> t = [1, 2, 3];

julia> serialize(io, t)
24
julia> print(take!(io))
UInt8[0x37, 0x4a, 0x4c, 0x09, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x08, 0xe2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
----

O formato não é óbvio para humanos; ele tem o propósito de ser fácil para o Julia interpretá-lo. +deserialize+ reconstitui o objeto:
(((deserialize)))((("function", "Serialization", "deserialize", see="deserialize)))

[source,@julia-repl-test chap14]
----
julia> io = IOBuffer();

julia> t1 = [1, 2, 3];

julia> serialize(io, t1)
24
julia> s = take!(io);

julia> t2 = deserialize(IOBuffer(s));

julia> print(t2)
[1, 2, 3]
----

+serialize+ e +deserialize+ escrevem para e lêm de um objeto iobuffer que representa um fluxo I/O em memória. A função +take!+ busca os conteúdos do iobuffer como um array de bytes e reinicia o iobuffer para seu estado inicial.

Apesar do objeto novo ter o mesmo valor do antigo, ele não é (em geral) o mesmo objeto:

[source,@julia-repl-test chap14]
----
julia> t1 == t2
true
julia> t1 ≡ t2
false
----

Em outras palavras, serialization e em seguida deserialization tem o mesmo efeito de copiar o objeto.
(((copiar)))

Você pode usar isso para guardar coisas diferentes de strings em um database.

[TIP]
====
Na verdade, o armazenamento de coisas diferentes de string em um database é tão comum que ele foi encapsulado em um pacote chamado +JLD2+ (ver https://github.com/JuliaIO/JLD2.jl).
====


=== Objetos de Comando

A maioria dos sistemas operacionais fornecem uma interface de linha de comando, também conhecida como uma _shell_. Shells geralmente fornecem comandos para navegar o sistema de arquivos e iniciar aplicações. Por exemplo, no Unix você pode mudar de diretório com o comando +cd+, exibir o conteúdo do diretório com +ls+, e iniciar o web browser digitando (por exemplo) +firefox+.
(((shell)))(((cd)))

Qualquer programa que você inicia do shell também pdoe ser iniciado do Julia usando um _objeto de comando_:
(((objeto de comando)))(((backticks)))((("``", see="backticks")))

[source,@julia-repl-test chap14]
----
julia> cmd = `echo olá`
`echo olá`
----

Acentos graves são usados para delimitar o comando.

A função +run+ executa o comando:
(((run)))((("função", "Base", "run", see="run"))))

[source,@julia-repl-test chap14]
----
julia> run(cmd);
olá
----

O +olá+ é o resultado do comando echo, mandado para +STDOUT+. A função +run+ retorna um objeto de processo, e gera um +ErrorException+ se o comando externo falha ao executar com sucesso.

Se você quer ler a saída do comando externo, +read+ pode ser usado como alternativa:
(((read)))

[source,@julia-repl-test chap14]
----
julia> a = read(cmd, String)
"olá\n"
----

Por exemplo, a maioria dos sistemas Unix fornecem um comando chamado +md5sum+ ou +md5+ que lê o conteúdo de um arquivo e calcula a “checksum”. Você pode ler mais sobre MD5 em https://en.wikipedia.org/wiki/Md5. Este comando fornece uma maneira eficiente de verificar se dois arquivos possuem o mesmo conteúdo. A probabilidade de que conteúdos diferentes produzem a mesma checksum é muito pequena (isto é, improvável de acontecer antes que o universo entre em colapso).
(((checksum)))(((md5)))(((md5sum)))

Você pode usar um objeto comando para executar +md5+ do Julia e gerar o resultado:

[source,@julia-repl]
----
nomedoarquivo = "saida.txt"
cmd = `md5 $nomedoarquivo`
res = read(cmd, String)
----


=== Módulos

Suponha que você tenha um arquivo chamado +"wc.jl"+ com o seguinte código:
(((contalinha)))((("função", "definido pelo programador", "contalinha", see="contalinha")))(((eachline)))

[source,julia]
----
function contalinha(nomedoarquivo)
    contador = 0
    for linha in eachline(nomedoarquivo)
        contador += 1
    end
    contador
end

print(contalinha("wc.jl"))
----

[source,@julia-eval]
----
arquivo = open("wc.jl", "w")
print(arquivo, """function contalinha(nomedoarquivo)
    contador = 0
    for linha in eachline(nomedoarquivo)
        contador += 1
    end
    contador
end

print(contalinha("wc.jl"))""")
close(arquivo)
----

Se você executar esse programa, ele lê a si mesmo e imprime o número de linhas de um arquivo, que é 9. Você também pode incluir ele no REPL assim:
(((include)))((("função", "Base", "include", see="include")))

[source,jl-con]
----
julia> include("wc.jl")
9
----

O Julia introduz módulos para criar uma área de trabalho de variáveis separada, isto é, novos escopos globais.

Um módulo inicia com a palavra-chave +module+ e termina com +end+. Conflitos de nomes são evitados entre suas próprias definições de alto nível e aquelas encontradas em código de outra pessoa. +import+ permite o controle de quais nomes de outros módulos são visíveis e +export+ específica quais nomes são públicos, isto é, podem ser usados fora do módulo sem a necessidade de serem prefixados com o nome do módulo.
(((escopo)))(((módulo)))((("palavra-chave", "módulo", see="módulo")))(((end)))(((import)))((("palavra-chave", "import", see="import")))(((export)))((("palavra-chave", "export", see="export")))(((contalinha)))((("module", "contalinha", see="contalinha")))((("function", "contalinha", "contalinha", see="contalinha")))

[source,julia]
----
module contalinha
    export contalinha

    function contalinha(nomedoarquivo)
        contador = 0
        for linha in eachline(nomedoarquivo)
            contador += 1
        end
        contador
    end
end
----

O módulo objeto +contalinha+ fornece +contalinha+:

[source,julia]
----
julia> using contalinha

julia> contalinha("wc.jl")
11
----

===== Exercício 14-1

Digite este exemplo em um arquivo chamado _wc.jl_, inclua-o no REPL e insira +using contalinha+.


[WARNING]
====
Se você importar um módulo que já foi importado, o Julia não faz nada. Ele não relê o arquivo, mesmo que ele tenha sido alterado.

Se você quer recarregar o módulo, você tem que reiniciar o REPL. O pacote +Revise+ existe para que você possa manter suas sessões rodando por mais tempo (ver https://github.com/timholy/Revise.jl).
====


=== Debugando

Quando você está lendo ou escrevendo arquivos, você pode se deparar com problemas com o espaço em branco. Estes erros podem ser dificéis de debugar por causa de espaços, tabs e novas linhas que são normalmente invisivéis.
(((\n)))(((\t)))

[source,jlcon]
----
julia> s = "1 2\t 3\n 4";

julia> println(s)
1 2     3
 4
----

A função embutida +repr+ ou +dump+ podem ajudar. Elas recebem qualquer objeto como argumento e retornam uma string representando o objeto.

(((repr)))((("função", "Base", "repr", see="repr")))(((dump)))((("function", "Base", "dump", see="dump")))

[source,@julia-eval chap14]
----
s = "1 2\t 3\n 4";
----

[source,@julia-repl-test chap14]
----
julia> repr(s)
"\"1 2\\t 3\\n 4\""
julia> dump(s)
String "1 2\t 3\n 4"
----

Isso pode ser útil para debugar.
(((debugando)))

Um outro problema que você pode encontrar é que sistemas diferentes usam caracteres diferentes para indicar o final da linha. Alguns sistemas usam uma nova linha, representada por +\n+. Outros usam um caractere de retorno, representado por +\r. Alguns usam ambos. Se você move arquivos entre sistemas diferentes, essas inconsistências podem causar problemas.
(((\r)))

Para a maioria dos sistemas, existem aplicações que convertem de um formato para o outro. Você pode achá-los (e ler mais a respeito deste problema) em https://en.wikipedia.org/wiki/Newline. Ou, é claro, você pode escrever um por conta própria.


=== Glossário

persistente::
Pertencente a um programa que é executado indefinidamente e mantém pelo menos alguns de seus dados em armazenamento permanente.
(((persistent)))

arquivo de texto::
Uma sequência de caracteres guardados em armazenamento permanente como um disco rígido.
(((arquivo de texto)))

diretório::
Uma coleção de arquivos com nome, também chamada de pasta.
(((diretório)))

path::
Uma string que identifica um arquivo.
(((path)))

path relativo::
Um path que inicia no diretório atual.
(((path relativo)))

path absoluto::
Um path que inicia do diretório mais a cima no sistema de arquivos.
(((path absoluto)))

catch::
Prevenir uma exceção de terminar um programa usando as declarações +try pass:[...] catch pass:[...] finally+.
(((catching)))

database::
Um arquivo cujo conteúdo está organizado como um dicionário com chaves que correspondem a valores.
(((database)))

shell::
Um programa que permite usuários a digitar comandos e em seguida executá-los iniciando outros programas.
(((shell)))

objeto comando::
Um objeto que representa um comando shell, permitindo um programa em Julia a executar comandos e ler os resultados.
(((objeto comando)))


=== Exercícios

[[ex14-1]]
===== Exercício 14-2

Escreva uma função chamada +sed+ que recebe como argumento uma string de padrão, uma string de substituição, e dois nomes de arquivos; ela deva ler o primeiro arquivo e escrever o conteúdo no segundo arquivo (criando ele ser for necessário). Se o padrão aparece em qualquer lugar no arquivo, ele deve ser substituido pela string de substituição.
(((sed)))((("função", "definido pelo programador", "sed", see="sed")))

Se um erro ocorre durante a abertura, leitura, escrita ou fechamento dos arquivos, seu programa deve capturar a exceção, exibir a mensagem de erro, e sair.

[[ex14-2]]
===== Exercício 14-3

Se você fez <<ex12-2>>, você verá que um dicionário é criado que mapeia de uma string ordenada de letras para um lista de palavras que podem ser escritas com estas letras.Por exemplo, +"opst"+ mapeia para a lista +["opts", "post", "pots", "spot", "stop", "tops"]+.

Escreva um módulo que importe +anagramsets+ e forneça duas novas funções: +guardaanagramas+ deve guardar o dicionário de anagramas usando +JLD2+; +leranagrams+ deve buscar uma palavra e retornar uma lista de seus anagramas.
(((guardaanagramas)))((("função", "programmer-defined", "guardaanagramas", see="guardaanagramas")))(((leranagramas)))((("função", "definido pelo programador", "leranagramas", see="leranagramas")))

[[ex14-3]]
===== Exercício 14-4

Em uma grande coleção de arquivos MP3, podem haver mais de uma cópia da mesma música, guardada em diretórios diferentes ou com nomes de arquivo diferentes. O objetivo deste exercicío é procurar por duplicatas.

. Escreva um programa que busca um diretório e todos seus subdiretórios, recursivamente, e retorna uma lista de paths completos para todos os arquivos com um dado sufixo (como _.mp3_).

. Para reconhecer duplicatas, você pode usar +md5sum+ ou +md5+ para computar a “checksum” para cada arquivo. Se dois arquivos tem a mesma checksum, eles provavelmente tem o mesmo conteúdo.

. Para verificar novamente, você pode usar o comando Unix +diff+.
