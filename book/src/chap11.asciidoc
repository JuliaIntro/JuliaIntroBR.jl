[[chap11]]
== Dicionários

Este capítulo apresenta outra estrutura de dados embutida chamada dicionário.


=== Um Dicionário é um Mapeamento

Um _dicionário_ é como uma lista, mas mais geral. Em uma lista, os índices devem ser inteiros e em um dicionário, eles podem ser de (quase) qualquer tipo.
(((dicionário)))

Um dicionário contém uma coleção de índices, que são chamados de _chaves_, e uma coleção de valores. Cada chave é associada a um único valor. A associação de uma chave e um valor é chamada de _par chave-valor_ ou, às vezes, de item.
(((chave)))(((valor)))(((par chave-valor)))(((item)))

Na linguagem matemática, um dicionário representa um _mapeamento_ das chaves para os valores, então você também pode dizer que cada chave “é mapeada” para um valor. Como um exemplo, iremos construir um dicionário que mapeia palavras em Português para palavras em Espanhol, com as chaves e os valores todos strings.
(((mapeamento)))

A função +Dict+ cria um novo dicionário sem items. Como +Dict+ é um nome de uma função embutida, devemos evitar usar ele como um nome de variável.
(((Dict)))((("tipo", "Base", "Dict", see="Dict")))

[source,@julia-repl-test chap11]
----
julia> por_para_esp = Dict()
Dict{Any,Any} with 0 entries
----

O tipo do dicionário é cercado por chaves: as chaves são do tipo +Any+ e os valores também são do tipo +Any+.
(((chaves)))((("{}", see="chaves")))(((Any)))((("tipo", "Base", "Any", see="Any")))

O dicionário está vazio. Para adicionar items no dicionário, podemos usar os colchetes:
(((colchetes)))

[source,@julia-repl-test chap11]
----
julia> pt_para_esp["um"] = "uno";

----

Essa linha cria um item que mapeia a chave "um" para o valor "uno". Se imprimirmos o dicionário novamente, nós vemos o par chave-valor com a flecha +pass:[=&gt;]+ entre a chave e o valor:
(((pass:[=&gt;])))

[source,@julia-repl-test chap11]
----
julia> pt_para_esp
Dict{Any,Any} with 1 entry:
  "um" => "uno"
----

Essa formatação de saída também é uma formatação de entrada. Por exemplo, você pode criar um novo dicionário com três itens:

[source,@julia-repl-test chap11]
----
julia> pt_para_esp = Dict("um" => "uno", "dois" => "dos", "três" => "tres")
Dict{String,String} with 3 entries:
  "dois" => "dos"
  "um"   => "uno"
  "três" => "tres"
----

Todas as chaves e os valores iniciais são strings, então um +Dict{String,String}+ é criado.

[WARNING]
====
A ordem do par chave-valor pode não ser a mesma. Se você digitar o mesmo exemplo no seu computador, pode obter um resultado diferente. Em geral, a ordem dos itens em um dicionário é imprevisível.
====

Mas isso não é um problema pois os elementos de um dicionário nunca são indexados com índices inteiros. Ao invés disso, nós usamos as chaves para consultar os valores correspondentes:

[source,@julia-repl-test chap11]
----
julia> pt_para_esp["dois"]
"dos"
----

A chave "dois" sempre é mapeada para o valor "dos", então a ordem dos itens não importa.

Se a chave não está no dicionário, nós recebemos uma exceção:
(((KeyError)))((("error", "Base", "KeyError", see="KeyError")))

[source,@julia-repl-test chap11]
----
julia> pt_para_esp["quatro"]
ERROR: KeyError: key "quatro" not found
----

A função +length+ funciona nos dicionários e retorna o número de pares chave-valor:
(((length)))

[source,@julia-repl-test chap11]
----
julia> length(pt_para_esp)
3
----

A função +keys+ retorna uma lista com as chaves do dicionário:
(((keys)))((("função", "Base", "keys", see="keys")))

[source,@julia-repl-test chap11]
----
julia> ks = keys(pt_para_esp);

julia> print(ks)
["dois", "um", "três"]
----

Agora você pode usar o operador +∈+ para verificar se algo aparece como uma _chave_ no dicionário:
(((in)))

[source,@julia-repl-test chap11]
----
julia> "um" ∈ ks
true
julia> "uno" ∈ ks
false
----

Para verificar se algo aparece como um valor em um dicionário, você pode usar a função +values+ que retorna uma coleção de valores, e em seguida usar o operador +∈+:
(((values)))((("função", "Base", "values", see="values")))

[source,@julia-repl-test chap11]
----
julia> vs = values(pt_para_esp);

julia> "uno" ∈ vs
true
----

O operador +∈+ utiliza algoritmos diferentes para as listas e dicionários. Para as listas, ele busca os elementos da lista em ordem, como em <<searching>>. À medida que a lista fica maior, o tempo de busca cresce diretamente proporcional.

Para os dicionários, o Julia usa um algoritmo chamado _tabela hash_ (ou tabela de dispersão ou tabela de espalhamento) que possui uma propriedade excepcional: o operador +∈+ leva aproximadamente o mesmo tempo independente da quantidade de itens do dicionário.
(((tabela hash)))

[[dictionary_collection_counters]]
=== Dicionários como uma Coleção de Contadores

Suponha que é dado a você uma string e você gostaria de contar quantas vezes cada letra aparece. Existem muitas maneiras de fazer isso:

* Você poderia criar 26 variáveis, um para cada letra do alfabeto. Em seguida você poderia percorrer a string, e para cada caractere, incrementar o contador correspondente, provavelmente usando um condicional encadeado.

* Você poderia criar uma lista com 26 elementos. Em seguida pode-se converter cada caractere para um número (usando a função embutida +Int+), usar o número como um índice para a lista, e incrementar o contador adequado.

* Você poderia criar um dicionário com os caracteres como as chaves e os contadores como seus valores correspondentes. A primeira vez que você vê um caractere, adicionaria um item no dicionário. Após isso, você só incrementaria o valor de um item existente.

Cada uma dessas opções efetua o mesmo cálculo, mas cada uma delas implementa este cálculo de formas diferentes.

Uma _implementação_ é uma maneira de efetuar um cálculo e algumas implementações são melhores que outras. Por exemplo, uma vantagem da implementação do dicionário é que nós não temos que saber antecipadamente quais letras aparecem na string, e sim criar espaço só para as letras que aparecem.
(((implementação)))

O código pode parecer com algo como:

[source,@julia-setup chap11]
----
function histograma(s)
    d = Dict()
    for c in s
        if c ∉ keys(d)
            d[c] = 1
        else
            d[c] += 1
        end
    end
    d
end
----

O nome da função é +histograma+, que é um termo estátistico para uma coleção de contadores (ou frequências).
(((histograma)))((("função", "definido pelo programador", "histograma", see="histograma")))

A primeira linha da função cria um dicionário vazio. O laço +for+ percorre a string. Toda vez que o laço é percorrido, se o caractere +c+ não está no dicionário, nós criamos um novo item com a chave +c+ e o valor inicial +1+ (já que nós vimos esta letra uma vez). Se +c+ já está no dicionário, nós incrementamos +d[c]+.

Funciona da seguinte forma:

[source,@julia-repl-test chap11]
----
julia> h = histograma("brontossauro")
Dict{Any,Any} with 8 entries:
  'n' => 1
  's' => 2
  'a' => 1
  'r' => 2
  't' => 1
  'o' => 3
  'u' => 1
  'b' => 1
----

O histograma indica que as letras +'a'+ e +'b'+ aparecem uma vez; +'o'+ aparece três, e assim em diante.

Dicionários possuem uma função chamada +get+ que recebe uma chave e um valor padrão. Se a chave aparece no dicionário, +get+ retorna o valor correspondente; caso contrário ela retorna o valor padrão. Por exemplo:
(((get)))((("função", "Base", "get", see="get")))

[source,@julia-repl-test chap11]
----
julia> h = histograma("a")
Dict{Any,Any} with 1 entry:
  'a' => 1
julia> get(h, 'a', 0)
1
julia> get(h, 'b', 0)
0
----

===== Exercício 11-1

Use +get+ para escrever +histograma+ de uma maneira mais concisa. Você deve ser capaz de eliminar a declaração +if+.


=== Laços e Dicionários

Você pode percorrer as chaves de um dicionário em uma declaração +for+. Por exemplo, +imprime_hist+ exibe cada chave e o seu valor correspondente:
(((imprime_hist)))((("função", "definido pelo programador", "imprime_hist", see="imprime_hist")))

[source,@julia-setup chap11]
----
function imprime_hist(h)
    for c in keys(h)
        println(c, " ", h[c])
    end
end
----

Aqui está o resultado:

[source,@julia-repl-test chap11]
----
julia> h = histograma("papagaio");

julia> imprime_hist(h)
a 3
g 1
p 2
i 1
o 1
----

Novamente as chaves não estão em nenhuma ordem específica. Para percorrer as chaves em ordem, você pode combinar +sort+ e +collect+:
(((sort)))(((collect)))

[source,@julia-repl-test chap11]
----
julia> for c in sort(collect(keys(h)))
           println(c, " ", h[c])
       end
a 3
g 1
i 1
o 1
p 2
----


=== Consulta Inversa

Dado um dicionário +d+ e uma chave +k+, é fácil achar o valor correspondente +v = d[k]+. Esta operação é chamada de _consulta_.
(((consulta)))

Mas e se você tem +v+ e quer achar +k+? Você tem dois problemas: primeiro, pode haver mais de uma chave que mapeia para o valor +v+. Dependendo do que é pedido, você poderia escolher um, ou teria que criar uma lista que contém todos eles. Segundo, não há uma sintaxe simples que faz uma _consulta inversa_; você tem que procurar.
(((consulta inversa)))

Aqui está uma função que recebe um valor e retorna a primeira chave que mapeia a este valor:

[source,@julia-setup chap11]
----
function consulta_inversa(d, v)
    for k in keys(d)
        if d[k] == v
            return k
        end
    end
    error("Erro de Consulta")
end
----

Esta função é mais um exemplo do padrão de busca, mas usa uma função que ainda não vimos, +error+. A função +error+ é usada para gerar um +ErrorException+ que interrompe o fluxo normal de controle. Neste caso ela tem a mensagem +"Erro de Consulta"+, indicando que a chave não existe.
(((error)))((("função", "Base", "error", see="error")))

Se nós chegarmos no final do laço, isso significa que +v+ não aparece no dicionário como um valor, então geramos uma exceção.

Aqui está um exemplo de uma consulta inversa bem-sucedida:

[source,@julia-repl-test chap11]
----
julia> h = histograma("papagaio");

julia> chave = consulta_inversa(h, 2)
'p': ASCII/Unicode U+0072 (category Ll: Letter, lowercase)
----

E uma malsucedida:

[source,@julia-repl-test chap11]
----
julia> chave = consulta_inversa(h, 4)
ERROR: Erro de Consulta
----

O resultado de uma exceção gerada é o mesmo quando o Julia gera um: ele exibe o stacktrace e uma mensagem de erro.

Julia fornece uma maneira otimizada de fazer uma consulta inversa: +findall(isequal(3), h)+.
(((findall)))((("função", "Base", "findall", see="findall")))(((isequal)))((("função", "Base", "isequal", see="isequal")))

[WARNING]
====
Uma consulta inversa é muito mais demorada que uma consulta normal; se você tiver que executá-la várias vezes, ou se o dicionário ficar muito grande, o desempenho do seu programa diminuirá.
====


=== Dicionários e Listas

Listas podem aparecer como valores em um dicionário. Por exemplo, se você receber um dicionário que mapeia letras às frequências, você pode querer invertê-lo; isto é, criar um dicionário que mapeia frequências até as letras. Já que várias letras podem ter a mesma frequência, cada valor em um dicionário invertido deve ser uma lista de letras.

Aqui está uma função que inverte um dicionário:
(((inverte_dict)))((("função", "definido pelo programador", "inverte_dict", see="inverte_dict")))

[source,@julia-setup chap11]
----
function inverte_dict(d)
    inverso = Dict()
    for chave in keys(d)
        valor = d[chave]
        if valor ∉ keys(inverso)
            inverso[valor] = [chave]
        else
            push!(inverso[valor], chave)
        end
    end
    inverso
end
----

Cada vez que o laço é percorrido, +chave+ recebe uma chave de +d+ e +valor+ recebe o valor correspondente. Se +valor+ não está em +inverso+, isto significa que não a vimos ainda, então criamos um novo item e inicializamos com um _singleton_ (uma lista que contém um único elemento). Caso contrário esse valor já foi visto, e então acrescentamos a chave correspondente à lista.
(((singleton)))

Aqui está um exemplo:

[source,@julia-repl-test chap11]
----
julia> hist = histograma("papagaio");

julia> inverso = inverte_dict(hist)
Dict{Any,Any} with 2 entries:
  3 => ['a']
  2 => ['p']
  1 => ['g', 'i', 'o']
----

[[fig11-1]]
.Diagrama de Estado
image::images/fig111.svg[]


<<fig11-1>> é um diagrama de estado mostrando +hist+ e +inverso+. Um dicionário é representado como uma caixa com os pares chave-valor dentro. Para os valores que são inteiros, pontos flutuantes ou strings, eu os desenho dentro da caixa, já para as listas normalmente desenho fora da caixa, só para simplificar o diagrama.
(((diagrama de estado)))

[NOTE]
====
Mencionamos anteriormente que um dicionário é implementado usando uma tabela hash e isso significa que as chaves devem ser _hashable_, isto é, de um tipo que permite que uma função hash atuem sobre elas.
(((hashable)))

Uma _hash_ é uma função que recebe um valor (de qualquer tipo) e retorna um inteiro. Dicionários usam estes inteiros, chamados de valores hash, para guardar e consultar pares chave-valor.
(((hash)))
====

[[memos]]
=== Memos

Se você já brincou com a função +fibonacci+ de <<one_more_exemple>>, pode ter percebido que quanto maior o argumento que você fornece, mais tempo a função leva para executar. Além disso, o tempo de execução cresce rapidamente.
(((fibonacci)))

Para entender o porquê, considere <<fig11-2>>, que mostra um _grafo de chamada_ para +fibonacci+ com +n = 4+:
(((grafo de chamada)))((("diagram", "grafo de chamada", see="grafo de chamada")))

[[fig11-2]]
.Grafo de chamada
image::images/fig112.svg[]


Um grafo de chamada mostra um conjunto de quadros da função, com linhas conectando cada quadro aos quadros que a função chama. No topo do grafo, +fibonacci+ com +n = 4+ chama +fibonacci+ com +n = 3+ e +n = 2+. Por sua vez, +fibonacci+ com +n = 3+ chama +fibonacci+ com +n = 2+ e +n = 1+. E assim em diante.

Conte quantas vezes +fibonacci(0)+ e +fibonacci(1)+ são chamadas. Está é uma solução ineficiente do problema, e fica pior à medida que o argumento aumenta.

Uma solução é acompanhar os valores já calculados armazenando-os em um dicionário. Um valor previamente calculado que é armazenado para uso posterior é chamado de _memo_. Aqui está uma versão “memoizada” de fibonacci:
(((memo)))

[source,@julia-setup]
----
conhecidos = Dict(0=>0, 1=>1)

function fibonacci(n)
    if n ∈ keys(conhecidos)
        return conhecidos[n]
    end
    res = fibonacci(n-1) + fibonacci(n-2)
    conhecidos[n] = res
    res
end
----

+conhecidos+ é um dicionáro que guarda os números de Fibonacci que já sabemos. Ele começa com dois itens: +0+ mapeia para +0+ e +1+ mapeia para +1+.

Toda vez que +fibonacci+ é chamada, ela checa +conhecidos+. Se o resultado já está lá, ela retorna imediatamente. Por outro lado ela tem que computar um novo valor, adicionar ele ao dicionário, e retorná-lo.

Se você executar esta versão de +fibonacci+ e comparar com a original, você verá que a atual é muito mais rápida.

[[global_variables]]
=== Variáveis Globais

No exemplo anterior, conhecidos é criado fora da função, então ela pertence ao quadro especial chamado +Main+. Variáveis em +Main+ são às vezes chamadas de _globais_ pois podem ser acessadas de qualquer função. Diferente de variáveis locais, que desaparecem quando a função acaba, variáveis globais persistem de uma chamada de função para a próxima.
(((global)))((("palavra-chave", "global", see="global")))(((variável global)))

É comum usar variáveis globais para _flags_; isto é, variáveis booleanas que indicam (“sinalizam”) se uma condição é verdadeira. Por exemplo, alguns programas usam uma flag chamada +verbose+ para controlar o nível de detalhamento na saída:
(((flag)))

[source,@julia-setup]
----
verbose = true

function exemplo1()
    if verbose
        println("Executando exemplo1")
    end
end
----

Se você tentar reatribuir uma variável global, poderá se surpreender. O exemplo a seguir deve acompanhar se a função foi chamada:

[source,@julia-setup]
----
foi_chamada = false

function exemplo2()
    foi_chamada = true         # ERRADO
end
----

Mas se você executar a função, você verá que o valor de +foi_chamada+ não muda. O problema é que +exemplo2+ cria uma nova variável local denominada +foi_chamada+. A variável local é removida quando a função termina, e não tem nenhum efeito sobre a variável global.

Para reatribuir uma variável global dentro de uma função, você deve _declarar_ a variável global antes de usá-la:
(((declaração)))(((reatribuição)))

[source,@julia-setup]
----
foi_chamada = false

function exemplo2()
    global foi_chamada
    foi_chamada = true
end
----

A _declaração global_ indica ao interpretador algo como “Nesta função, quando eu digo +foi_chamada+, eu quero dizer a variável global; não crie uma local.”
(((declaração global)))((("declaração", "global", see="declaração global")))

Aqui está um exemplo que tenta atualizar uma variável global:

[source,@julia-setup chap11]
----
conta = 0

function exemplo3()
    conta = conta + 1          # ERRADO
end
----

Ao executar a função, você recebe:
(((UndefVarError)))

[source,@julia-repl-test chap11]
----
julia> exemplo3()
ERROR: UndefVarError: conta not defined
----

O Julia assume que +conta+ é local, partindo da suposição de que você está lendo a função antes de escrevê-la. A solução, novamente, é declarar +conta+ como global.

[source,@julia-setup]
----
conta = 0

function exemplo3()
    global conta
    conta += 1
end
----

Se uma variável global se refere a um valor mutável, você pode modificar o valor sem declarar a variável global:

[source,@julia-setup]
----
conhecido = Dict(0=>0, 1=>1)

function exemplo4()
    conhecido[2] = 1
end
----

Então você pode adicionar, remover e substituir os elementos de uma lista global ou dicionário, mas se você quiser reatribuir a variável, você deve declará-la como global:

[source,@julia-setup]
----
conhecido = Dict(0=>0, 1=>1)

function exemplo5()
    global conhecido
    conhecido = Dict()
end
----

Por razões de performance, deve-se declarar uma variável global como constante. Você já não pode reatribuir a variável mas caso ela faça referência a um valor mutável, pode-se modificar o valor.
(((const)))((("palavra-chave", "const", see="const")))(((variável global constante)))

[source,@julia-setup]
----
const conhecido = Dict(0=>0, 1=>1)

function exemplo4()
    conhecido[2] = 1
end
----

[WARNING]
====
Variáveis globais podem ser utéis, mas se tem muitas delas, e você modifica-as frequentemente, elas podem ser a causa dos programas serem dificéis de depurar e terem mau desempenho.
====

=== Depuração

Na medida em que você trabalha com conjuntos de dados maiores, pode ser que seja difícil depurar imprimindo e checando a saída na mão. Aqui estão algumas sugestões para depurar conjuntos de dados maiores:
(((depuração)))

* Diminua a entrada:
+
Se possível, reduza o tamanho do conjunto de dados. Por exemplo, se o programa lê um arquivo de texto, comece com apenas as 10 primeiras linhas, ou com o menor exemplo que dá erro. Você não deve editar os arquivos em si, mas modificar o programa para que ele leia somente as primeiras latexmath:[\(n\)] linhas.
(((redução de tamanho)))
+
Se existe um erro, você pode reduzir de latexmath:[\(n\)] para o menor valor que dá erro, e em seguida incrementá-lo gradualmente à medida que você encontra e corrige os erros.

* Verifique os resumos e os tipos:
+
Ao invés de imprimir e checar o conjunto de dados inteiro, considere imprimir os resumos dos dados: por exemplo, o número de itens em um dicionário ou o total de uma lista de números.
(((verificação)))
+
Uma causa comum de erros de execução é um valor que não é do tipo correto. Para a depuração desse tipo de erro, geralmente é suficiente imprimir o tipo de um valor.

* Escreva auto-verificações:
+
Algumas vezes você pode escrever código para checar os erros automaticamente. Por exemplo, se você está calculando a média de uma lista de números, você poderia checar que o resultado não está acima do maior elemento da lista ou abaixo do menor elemento. Isso é chamado de “verificação de sanidade”.
(((auto-verificação)))(((verificação de sanidade)))
+
Outro tipo de verificação compara o resultado de dois cálculos diferentes para verificar se eles são consistentes. Isso é chamado de “verificação de consistência”.
(((verificação de consistência)))

* Formate a saída:
+
Resultados de depuração formatados podem facilitar a detecção de erros, como visto em um exemplo em <<deb06>>.
(((formatação)))
+
E mais uma vez, o tempo que você usa construindo andaimes pode reduzir o tempo gasto na depuração.
(((andaime)))(((depuração)))


=== Glossário

mapeamento::
Uma relação na qual cada elemento de um conjunto corresponde a um elemento de outro conjunto.
(((mapeamento)))

dicionário::
Um mapeamento de chaves para os seus valores correspondentes.
(((dicionário)))

par chave-valor::
A representação de um mapeamento de uma chave para um valor.
(((par chave-valor)))

item::
Em um dicionário, é outro nome para o par chave-valor.
(((item)))

chave::
Um objeto que aparece em um dicionário como a primeira parte de um par chave-valor.
(((chave)))

valor::
Um objeto que aparece em um dicionário como a segunda parte de um par chave-valor. Isso é mais específico que o nosso uso prévio da palavra “valor”.
(((valor)))

implementação::
Uma maneira de efetuar os cálculos.
(((implementação)))

tabela hash::
O algoritmo usado para implementar os dicionários em Julia.
(((tabela hash)))

função hash::
Uma função usado por uma tabela hash para computar a localização de uma chave.
(((função hash)))

hashable::
Um tipo que tem uma função hash.
(((hashable)))

consulta::
Uma operação em um dicionário que recebe uma chave e encontra o valor correspondente.
(((consulta)))

consulta inversa::
Uma operação em um dicionário que recebe um valor e encontra uma ou mais chaves mapeadas para ele.
(((consulta inversa)))

singleton::
Uma lista (ou outra sequência) com um único elemento.
(((singleton)))

grafo de chamada::
Um diagrama que mostra todo quadro criado durante a execução de um programa, com uma flecha que vai de quem chama para quem é chamado.
(((grafo de chamada)))

memo::
Um valor já computado e guardado para evitar cálculos futuros desnecessários.
(((memo)))

variável global::
Uma variável definida fora da função. Variáveis globais podem ser acessadas de qualquer função.
(((variável global)))

declaração global::
Uma declaração para tornar um nome de variável como global.
(((declaração global)))

flag::
Uma variável booleana usada para indicar se uma condição é verdadeira.
(((flag)))

declaração::
Uma declaração como +global+ que informa ao interpretador algo sobre a variável.
(((declaração)))

variável global constante::
Uma variável global que não pode ser reatribuída.
(((variável global constante)))


=== Exercícios

[[ex11-1]]
===== Exercício 11-2

Escreva uma função que leia as palavras em _palavras.txt_ e guarde-as como chaves em um dicionário. Não importa quais sejam os valores. Em seguida, você pode usar o operador +∈+ como uma maneira rápida de verificar se uma string está ou não no dicionário.
(((in)))

Se o exercício <<ex10-10>> foi feito, você pode comparar a velocidade desta implementação com o operador +∈+ em listas e na busca em bissecção.

[[ex11-2]]
===== Exercício 11-3

Leia a documentação da função de dicionário +get!+ e use-a para escrever uma versão mais concisa de +inverte_dict+.
(((get!)))((("função", "Base", "get!", see="get!")))

[[ex11-3]]
===== Exercício 11-4

Memoize a função de Ackermann de <<ex06-2>> e verifique se a memoização possibilita a avaliação da função com argumentos maiores.
(((memo)))(((função de Ackermann)))

[[ex11-4]]
===== Exercício 11-5

Se <<ex10-7>> foi feito, então já possui uma função chamada +tem_duplas+ que recebe uma lista como parâmetro e retorna +true+ se há qualquer objeto que aparece mais de uma vez na lista.
(((tem_duplas)))

Use um dicionário para escrever uma versão mais rápida e simplificada de +tem_duplas+.

[[ex11-5]]
===== Exercício 11-6

Duas palavras são “pares rotacionados” se você pode rotacionar um deles e obter o outro (ver +rotaciona_palavra+ em <<ex08-5>>).
(((rotaciona_palavra)))

Escreva um programa que lê uma lista e encontra todos os pares rotacionados.

[[ex11-6]]
===== Exercício 11-7

Aqui está outro quebra cabeça de Car Talk (https://www.cartalk.com/puzzler/browse):
(((Car Talk)))

[quote]
____
Essa foi enviada por um sujeito chamado Dan O’Leary. Ele encontrou recentemente uma palavra em inglês comum de uma sílaba e cinco letras, que possui a seguinte propriedade peculiar. Quando você remove a primeira letra, as letras restantes formam um homófono da palavra original, isto é, uma palavra que soa exatamente igual. Troque a primeira letra, isto é, coloque-a novamente e remova a segunda letra, e o resultado é outro homófono da palavra original. E a pergunta é, qual é a palavra?

Agora irei dar um exemplo que não funciona. Vamos olhar para uma palavra de cinco letras, ‘wrack.’ W-R-A-C-K, como na expressão ‘wrack with pain.’ Se eu remover a primeira letra, tenho uma palavra de quatro letras, ’R-A-C-K.’ Como em, ‘Holy cow, did you see the rack on that buck! It must have been a nine-pointer!’ É um homófono perfeito. Se você colocar o ‘w’ novamente, e remover o ‘r’, você fica com a palavra ‘wack,’ que é uma palavra real, só não é um homófona das outras duas palavras.

Mas há pelo menos uma palavra, que Dan e nós conhecemos, que irá produzir dois homófonos se você remover tanto as duas primeiras letras para criar duas novas palavras de quatro letras. A pergunta é, qual é a palavra?
____

Você pode usar o dicionário de <<ex11-1>> para verificar se uma string está na lista de palavras.

[TIP]
====
Para verificar se duas palavras em inglês são homófonas, você pode usar o Dicionário CMU de Pronunciação. E também pode baixá-lo em  http://www.speech.cs.cmu.edu/cgi-bin/cmudict.
====

Escreva um programa que lista todas as palavras que resolvem o quebra cabeça.
