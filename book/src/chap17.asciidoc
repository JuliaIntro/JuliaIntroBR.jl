[[chap17]]
== Despacho Múltiplo

No Julia você tem a habilidade de escrever código que opera em tipos diferentes. Esta habilidade é chamada de programação genérica.

Neste capítulo, discutiremos o uso de declarações de tipo em Julia, e também introduziremos métodos que implementam os comportamentos diferentes para uma função, dependendo dos tipos de seus argumentos. Isto é chamado de despacho múltiplo.


=== Declarações de Tipo

O operador +::+ anexa _anotações de tipo_ às expressões e variáveis:
(((TypeError)))((("error", "Core", "TypeError", see="TypeError")))

[source,@julia-repl-test]
----
julia> (1 + 2) :: Float64
ERROR: TypeError: in typeassert, expected Float64, got Int64
julia> (1 + 2) :: Int64
3
----

Isso ajuda a confirmar que o seu programa funciona do jeito esperado.

O operador +::+ também pode ser acrescentado ao fim do lado esquerdo de uma atribuição, ou como uma parte de uma declaração.
(((retorna_float)))((("função", "definido pelo programador", "retorna_float", see="retorna_float")))

[source,@julia-repl-test]
----
julia> function retorna_float()
           x::Float64 = 100
           x
       end
retorna_float (generic function with 1 method)
julia> x = retorna_float()
100.0
julia> typeof(x)
Float64
----

A variável +x+ é sempre do tipo +Float64+ e o valor é convertido para um ponto flutuante, quando necessário.

Uma anotação de tipo também pode ser anexada ao cabeçalho de uma definição de função:
(((sinc)))((("função", "definido pelo programador", "sinc", see="sinc")))

[source,@julia-setup]
----
function sinc(x)::Float64
    if x == 0
        return 1
    end
    sin(x)/(x)
end
----

O valor de retorno de +sinc+ é sempre convertido para o tipo +Float64+.

Quando os tipos são omitidos, o comportamento padrão em Julia é permitir que os valores sejam de qualquer tipo (+Any+).
(((Any)))


=== Métodos

Em <<chap16>>, nós definimos uma struct chamada +MeuHorário+ e em <<time>>, você escreveu uma função chamada +imprima_horário+:
(((MeuHorário)))(((imprima_horário)))

[source,@julia-setup chap17a]
----
using Printf

struct MeuHorário
    hora :: Int64
    minuto :: Int64
    segundo :: Int64
end

function imprima_horário(tempo)
    @printf("%02d:%02d:%02d", tempo.hora, tempo.minuto, tempo.segundo)
end
----

Como você pode ver, as declarações de tipo podem e devem ser adicionadas nos campos da definição da struct por questões de performance.

Para chamar esta função, você deve passar um objeto +MeuHorário+ como um argumento:

[source,@julia-repl-test chap17a]
----
julia> início = MeuHorário(9, 45, 0)
MeuHorário(9, 45, 0)
julia> imprima_horário(início)
09:45:00
----

Para adicionar um _método_ à função +imprima_horário+ que apenas aceita um objeto +MeuHorário+ como argumento, tudo que precisamos fazer é acrescentar +::+ seguido de +MeuHorário+ no final do argumento +tempo+ na definição de função:
(((método)))

[source,@julia-setup chap17a]
----
function imprima_horário(tempo::MeuHorário)
    @printf("%02d:%02d:%02d", tempo.hora, tempo.minuto, tempo.segundo)
end
----

Um método é uma definição de função com uma _assinatura_ específica: +imprima_horário+ possui um argumento do tipo +MeuHorário+.
(((assinatura)))

Chamar a função +imprima_horário+ com um objeto +MeuHorário+ produz o mesmo resultado:

[source,@julia-repl-test chap17a]
----
julia> imprima_horário(início)
09:45:00
----

Nós podemos agora redefinir o primeiro método sem a anotação de tipo +::+, permitindo um argumento de qualquer tipo:

[source,@julia-setup chap17a]
----
function imprima_horário(tempo)
    println("Eu não sei como imprimir o argumento tempo.")
end
----

Se você chamar a função +imprima_horário+ com um objeto diferente de +MeuHorário+, agora recebe-se:

[source,@julia-repl-test chap17a]
----
julia> imprima_horário(150)
Eu não sei como imprimir o argumento tempo.
----

===== Exercício 17-1

Reescreva +horário_para_int+ e +int_para_horário+ (de <<prototyping_versus_planning>>) para especificar os seus argumentos.
(((horário_para_int)))(((int_para_horário)))


[source,@julia-eval chap17a]
----
function horário_para_int(tempo)
    minutos = tempo.hora * 60 + tempo.minuto
    segundos = minutos * 60 + tempo.segundo
end;

function int_para_horário(segundos)
    (minutos, segundo) = divrem(segundos, 60)
    hora, minuto = divrem(minutos, 60)
    MeuHorário(hora, minuto, segundo)
end;
----

=== Exemplos Adicionais

Aqui está uma versão de +incrementa+ (de <<modifiers>>) reescrita para especificar seus argumentos:
(((incrementa)))

[source,@julia-setup chap17a]
----
function incrementa(tempo::MeuHorário, segundos::Int64)
    segundos += horário_para_int(tempo)
    int_para_horário(segundos)
end
----

Note que agora ela é uma função pura, e não um modificador.

Você pode invocar incrementa da seguinte maneira:

[source,@julia-repl-test chap17a]
----
julia> início = MeuHorário(9, 45, 0)
MeuHorário(9, 45, 0)
julia> incrementa(início, 1337)
MeuHorário(10, 7, 17)
----

Se você colocar os argumentos na ordem errada, um erro é gerado:
(((MethodError)))

[source,@julia-repl-test chap17a]
----
julia> incrementa(1337, início)
ERROR: MethodError: no method matching incrementa(::Int64, ::MeuHorário)
----

A assinatura do método é +incrementa(tempo::MeuHorário, segundos::Int64)+ e não +incrementa(segundos::Int64, tempo::MeuHorário)+.

Reescrever +é_depois+ para operar somente com objetos +MeuHorário+ é fácil:
(((é_depois)))

[source,@julia-setup chap17a]
----
function é_depois(t1::MeuHorário, t2::MeuHorário)
    (t1.hora, t1.minuto, t1.segundo) > (t2.hora, t2.minuto, t2.segundo)
end
----

Aliás, os argumentos opcionais são implementados como sintaxe para as múltiplas definições do método. Por exemplo, essa definição:

[source,@julia-setup]
----
function f(a=1, b=2)
    a + 2b
end
----

é equivalente aos seguintes três métodos:

[source,@julia-setup]
----
f(a, b) = a + 2b
f(a) = f(a, 2)
f() = f(1, 2)
----

Estas expressões são definições de método válidas em Julia. E é uma notação mais enxuta para definir funções/métodos.

[[constructor]]
=== Construtores

Um _construtor_ é uma função especial chamada para criar um objeto. Os métodos construtores padrões de +MeuHorário+ têm a seguinte assinatura:
(((construtor)))

[source,julia]
----
MeuHorário(hora, minuto, segundo)
MeuHorário(hora::Int64, minuto::Int64, segundo::Int64)
----

Nós podemos também adicionar os nossos próprios métodos _construtores externos_:
(((construtor externo)))((("construtor", "externo", see="construtor externo")))

[source,@julia-setup chap17a]
----
function MeuHorário(tempo::MeuHorário)
    MeuHorário(tempo.hora, tempo.minuto, tempo.segundo)
end
----

Esse método é chamado de _construtor cópia_ pois o novo objeto +MeuHorário+ é uma cópia do seu argumento.
(((construtor cópia)))((("construtor", "cópia", see="construtor cópia")))

Para impor as invariantes, nós precisamos de métodos _construtores internos_:
(((construtor interno)))((("construtor", "interno", see="construtor interno")))

[source,@julia-setup chap17b]
----
struct MeuHorário
    hora :: Int64
    minuto :: Int64
    segundo :: Int64
    function MeuHorário(hora::Int64=0, minuto::Int64=0, segundo::Int64=0)
        @assert(0 ≤ minuto < 60, "Minuto não está entre 0 e 60.")
        @assert(0 ≤ segundo < 60, "Segundo não está entre 0 e 60.")
        new(hora, minuto, segundo)
    end
end
----

A struct +MeuHorário+ agora tem 4 métodos construtores internos:

[source,julia]
----
MeuHorário()
MeuHorário(hora::Int64)
MeuHorário(hora::Int64, minuto::Int64)
MeuHorário(hora::Int64, minuto::Int64, segundo::Int64)
----

Um método construtor interno é sempre definido dentro do bloco de uma declaração de tipo e tem acesso a uma função especial chamada +new+ que cria os objetos de um novo tipo declarado.

[WARNING]
====
O construtor padrão não é disponibilizado se qualquer construtor interno for definido. Você deve escrever explicitamente todos os construtores internos de que você precisa.
====

Um segundo método sem argumentos da função local +new+ existe:
(((new)))((("função", "Base", "new", see="new")))

[source,@julia-setup chap17c]
----
mutable struct MeuHorário
    hora :: Int
    minuto :: Int
    segundo :: Int
    function MeuHorário(hora::Int64=0, minuto::Int64=0, segundo::Int64=0)
        @assert(0 ≤ minuto < 60, "Minuto está entre 0 e 60.")
        @assert(0 ≤ segundo < 60, "Segundo está entre 0 e 60.")
        tempo = new()
        tempo.hora = hora
        tempo.minuto = minuto
        tempo.segundo = segundo
        tempo
    end
end
----

Isso permite a criação das estruturas de dados recorrentes, isto é, uma struct no qual um dos campos é a própria struct. Neste caso, a struct precisa ser mutável pois os seus campos são modificados após serem instanciados.
(((estruturas de dados recorrentes)))


=== +show+

+show+ é uma função especial que retorna uma representação de string de um objeto. Por exemplo, aqui está um método +show+ para os objetos +MeuHorário+:
(((show)))

[source,@julia-setup chap17b]
----
using Printf

function Base.show(io::IO, tempo::MeuHorário)
    @printf(io, "%02d:%02d:%02d", tempo.hora, tempo.minuto, tempo.segundo)
end
----

O prefixo +Base+ é necessário pois nós queremos adicionar um novo método à função +Base.show+.

Quando você imprime um objeto, o Julia invoca a função +show+:

[source,@julia-repl-test chap17b]
----
julia> tempo = MeuHorário(9, 45)
09:45:00
----

Quando eu crio um novo tipo composto, eu quase sempre começo criando um construtor externo, que facilita a instanciação dos objetos, e +show+, que é útil para a depuração.

===== Exercício 17-2

Escreva um método construtor externo para a classe +Ponto+ que recebe +x+ e +y+ como parâmetros adicionais e que são atribuídos aos campos correspondentes.
(((Ponto)))


[source,@julia-eval chap17b]
----
function horário_para_int(tempo::MeuHorário)
    minutos = tempo.hora * 60 + tempo.minuto
    segundos = minutos * 60 + tempo.segundo
end;

function int_para_horário(segundos::Int64)
    (minutos, segundo) = divrem(segundos, 60)
    hora, minuto = divrem(minutos, 60)
    MeuHorário(hora, minuto, segundo)
end;

function incrementa(tempo::MeuHorário, segundos::Int64)
    segundos += horário_para_int(tempo)
    int_para_horário(segundos)
end;
----

=== Sobrecarga de Operador

Ao definir métodos para os operadores, você pode especificar o comportamento dos operadores em tipos definidos pelo programador. Por exemplo, ao definir um método chamado +pass:[+]+ com dois argumentos +MeuHorário+, você pode usar o operador +pass:[+]+ em objetos +MeuHorário+.

A definição deve se parecer com algo como:

[source,@julia-setup chap17b]
----
import Base.+

function +(t1::MeuHorário, t2::MeuHorário)
    segundos = horário_para_int(t1) + horário_para_int(t2)
    int_para_horário(segundos)
end
----

A declaração import adiciona o operador +pass:[+]+ ao escopo local para que os métodos possam ser adicionados.

E você poderia usá-lo como:


[source,@julia-repl-test chap17b]
----
julia> início = MeuHorário(9, 45)
09:45:00
julia> duração = MeuHorário(1, 35, 0)
01:35:00
julia> início + duração
11:20:00
----

Quando você aplica o operador +pass:[+]+ aos objetos +MeuHorário+, o Julia invoca o novo método adicionado. Quando o REPL mostra o resultado, o Julia invoca +show+. Então muita coisa acontece por trás das cortinas!

Adicionar ao comportamento de um operador para que funcione com tipos definidos pelo programador é chamado de _sobrecarga de operador_.
(((sobrecarga de operador)))


=== Despacho Múltiplo

Na seção anterior, nós adicionamos dois objetos +MeuHorário+, mas você também pode adicionar um inteiro ao objeto +MeuHorário+:

[source,@julia-setup chap17b]
----
function +(tempo::MeuHorário, segundos::Int64)
    incrementa(tempo, segundos)
end
----

Aqui está um exemplo que usa o operador +pass:[+]+ com um objeto +MeuHorário+ e um inteiro:

[source,@julia-repl-test chap17b]
----
julia> início = MeuHorário(9, 45)
09:45:00
julia> início + 1337
10:07:17
----

Adição é um operador comutativo, por isso temos que adicionar outro método.

[source,@julia-setup chap17b]
----
function +(segundos::Int64, tempo::MeuHorário)
  tempo + segundos
end
----

E nós obtemos o mesmo resultado:

[source,@julia-repl-test chap17b]
----
julia> 1337 + início
10:07:17
----

A escolha de qual método executar quando a função é aplicada é chamada de _despacho_. O Julia permite que o processo de despacho escolha qual método de uma função chamar baseado no número de argumentos dados, e nos tipos de todos os argumentos da função. Usar todos os argumentos de uma função para escolher qual método deve ser invocado é conhecido como _despacho múltiplo_.
(((despacho)))(((despacho múltiplo)))

===== Exercício 17-3

Escreva métodos +pass:[+]+ para os objetos ponto:

* Se ambos operandos são objetos ponto, o método deve retornar um novo objeto ponto cuja coordenada +x+ é a soma das coordenadas +x+ dos operandos, e deve proceder da mesma forma para as coordenadas +y+.

* Se o primeiro ou o segundo operando é uma tupla, o método deve somar o primeiro elemento da tupla à coordenada +x+ e o segundo elemento à coordenada +y+, e retornar um novo objeto ponto com o resultado.


=== Programação Genérica

O despacho múltiplo é útil quando é necessário, apesar de (felizmente) ele não ser sempre necessário. Muitas vezes você pode evitá-lo escrevendo funções que funcionam corretamente para os argumentos com os tipos diferentes.

Muitas das funções que nós escrevemos para as strings também funcionam para os outros tipos de sequência. Por exemplo, em <<dictionary_collection_counters>> nós usamos +histograma+ para contar o número de vezes de cada letra que aparece em uma palavra.
(((histograma)))

[source,@julia-setup chap17]
----
function histograma(s)
    d = Dict()
    for c in s
        if c ∉ keys(d)
            d[c] = 1
        else
            d[c] += 1
        end
    end
    d
end
----

Esta função também funciona para as listas, as tuplas, e até mesmo os dicionários, contanto que para os elementos de +s+ exista uma função hash, para que eles possam ser usados como chaves em +d+.

[source,@julia-repl-test chap17]
----
julia> t = ("presunto", "ovo", "presunto", "presunto", "bacon", "presunto")
("presunto", "ovo", "presunto", "presunto", "bacon", "presunto")
julia> histograma(t)
Dict{Any,Any} with 3 entries:
  "bacon"    => 1
  "presunto" => 4
  "ovo"      => 1
----

Funções que funcionam com vários tipos são chamadas de _polimórficas_. Polimorfismo pode facilitar o reuso de código.
(((polimórfica)))

Por exemplo, a função embutida +sum+, que soma os elementos de uma sequência, funciona contanto que os elementos da sequência possam realizar a adição.
(((sum)))

Já que um método +pass:[+]+ é fornecido para os objetos +MeuHorário+, eles funcionam com +sum+:

[source,@julia-repl-test chap17b]
----
julia> t1 = MeuHorário(1, 7, 2)
01:07:02
julia> t2 = MeuHorário(1, 5, 8)
01:05:08
julia> t3 = MeuHorário(1, 5, 0)
01:05:00
julia> sum((t1, t2, t3))
03:17:10
----

Em geral, se todos as operações dentro da função funcionam com um dado tipo, a função funciona com qualquer tipo.

O melhor tipo de polimorfismo é o tipo não intencional, no qual se descobre que uma função que você escreveu pode ser aplicada a um tipo que você nunca planejou.
(((polimorfismo)))


=== Interface e Implementação

Um dos objetivos do despacho múltiplo é facilitar a manutenção do software, o que significa que você pode manter o programa funcionando quando as outras partes do sistema mudam, e modificar o programa para cumprir novos requisitos.

Um princípio de design que ajuda alcançar esse objetivo é manter as interfaces separadas das implementações. Isto significa que os métodos que possuem os argumentos denotados com um tipo não devem depender de como os campos daquele tipo são representados.
(((interface)))(((implementação)))

Por exemplo, neste capítulo nós desenvolvemos uma struct que representa um horário do dia. E os métodos que possuem argumentos indicados com este tipo incluem +horário_para_int+, +é_depois+ e +pass:[+]+.

Nós poderíamos implementar estes métodos de muitas maneiras. Os detalhes da implementação dependem de como representamos +MeuHorário+. Neste capítulo, os campos de um objeto +MeuHorário+ são +hora+, +minuto+ e +segundo+.

Como uma alternativa, nós poderiamos substituir estes campos com um único inteiro representando o número de segundos a partir da meia-noite. Esta implementação faria com que algumas funções, como +é_depois, sejam mais facéis de escrever, mas também faz com que outras funções sejam mais dificéis.

Depois de configurar um novo tipo, você pode descobrir uma implementação melhor. Se outras partes do programas estão usando o seu tipo, pode ser que mudar a interface consuma muito tempo e esteja sujeita a erros.

Mas se você tivesse projetado a interface com cuidado, pode-se mudar a implementação sem mudar a interface, o que significa que outras partes do programa não precisam ser alteradas.


=== Depuração

Chamar uma função com os argumentos corretos pode ser difícil quando mais de um método para a função é específicada. O Julia permite examinar as assinaturas dos métodos de uma função.

Para saber quais os métodos disponíveis para uma dada função, você pode usar a função +methods+:
(((methods)))(((depuração)))

[source,jlcon]
----
julia> methods(imprima_horário)
# 2 methods for generic function "imprima_horário":
[1] imprima_horário(tempo::MeuHorário) in Main at REPL[3]:2
[2] imprima_horário(tempo) in Main at REPL[4]:2
----

Neste exemplo, a função +imprima_horário+ tem 2 métodos: um com o argumento +MeuHorário+ e um com o argumento +Any+.


=== Glossário

anotação de tipo::
O operador +::+ seguido por um tipo indicando que a expressão ou variável é daquele tipo.
(((anotação de tipo)))

método::
Uma definição de um possível comportamento para uma função.
(((método)))

despacho::
A escolha de qual método executar quando uma função é executada.
(((despacho)))

assinatura::
O número e tipo dos argumentos de um método permitindo o despacho escolher o método mais específico de uma função durante uma chamada da função.
(((assinatura)))

construtor externo::
Um construtor definido fora da definição de tipo para indicar os métodos convenientes para a criação de um objeto.
(((construtor externo)))

construtor interno::
Um construtor definido dentro da definição de tipo para impor as invariantes ou para construir os objetos que referem a si mesmos.
(((construtor interno)))

construtor padrão::
Um construtor interno que está disponível quando nenhum construtor interno definido pelo programador é fornecido.
(((construtor padrão)))

construtor cópia::
Um método construtor externo de um tipo que tem como único argumento um objeto daquele tipo. Ele cria um novo objeto que é uma cópia do seu argumento.
(((construtor cópia)))

sobrecarga de operador::
Adicionar a um comportamento de um operador como +pass:[+]+ para que funcione com um tipo definido pelo programador.
(((sobrecarga de operador)))

despacho múltiplo::
Despacho baseado em todos os argumentos de uma função.
(((despacho múltiplo)))

programação genérica::
Escrever código que pode funcionar com mais de um tipo.
(((programação genérica)))


=== Exercícios

[[ex17-1]]
===== Exercício 17-4

Mude os campos de +MeuHorário+ para ter apenas um único campo representando os segundos passados após a meia-noite. Em seguida modifique os métodos definidos neste capítulo para funcionar com a nova implementação.

[[ex17-2]]
===== Exercício 17-5

Escreva uma definição para um tipo chamado +Canguru+ com um campo chamado +conteúdo_bolso+ do tipo +Array+ e os seguintes métodos:
(((Canguru)))((("tipo", "definido pelo programador", "Canguru", see="Canguru")))

* Um construtor que inicializa +conteúdo_bolso+ com uma lista vazia.

* Um método chamado +coloca_no_bolso+ que recebe um objeto +Canguru+ e um objeto de qualquer tipo e adiciona-o a +conteúdo_bolso+.
(((coloca_no_bolso)))((("função", "definido pelo programador", "coloca_no_bolso", see="coloca_no_bolso")))

* Um método +show+ que retorna uma representação string de um objeto +Canguru+ e o conteúdo do bolso.
(((show)))

Teste seu código criando dois objetos +Canguru+, atribuindo-os a variáveis chamadas +cangu+ e +ru+, e em seguida adicionando +ru+ ao conteúdo do bolso de +cangu+.
