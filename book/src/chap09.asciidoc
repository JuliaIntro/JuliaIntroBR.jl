[[chap09]]
== Estudo de caso: jogo de palavras

Este capítulo apresenta o segundo estudo de caso, que envolve solucionar um quebra-cabeças onde devemos encontrar palavras com certas propriedades. Por exemplo, encontraremos os palíndromos mais longos em inglês e as palavras cujas letras aparecem em ordem alfabética. Além disso, apresentarei outro plano de desenvolvimento de programa: redução até um problema resolvido anteriormente.

[[reading_word_lists]]
=== Lendo listas de palavras

Para os exercícios deste capítulo, será necessária uma lista de palavras em inglês. Há muitas listas de palavras disponíveis na Web, e a mais ideal para o nosso propósito é uma das listas de palavras coletadas por Grady Ward e que contribuiu para o domínio público como parte do projeto de léxico da Moby (consulte https://wikipedia.org/wiki/Moby_Project). É uma lista com 113.809 palavras cruzadas oficiais; isto é, termos considerados válidos em palavras cruzadas e outros jogos de palavras. Na coleção de Moby, o nome do arquivo é _113809of.fic_ e você pode fazer o download de uma cópia, com o nome mais simples _palavras.txt_, em https://github.com/JuliaIntro/JuliaIntroBR.jl/blob/master/data/words.txt.
(((Mobi léxico)))

Este arquivo está em texto sem formatação, portanto, pode ser aberto com um editor de texto, mas também pode ser lido em Julia. A função interna +open+ precisa receber o nome do arquivo como parâmetro e retorna um _objeto de arquivo_ usado para a leitudo do arquivo.
(((open)))((("função", "Base", "open", see="open")))

[source,@julia-eval chap09]
----
using JuliaIntroBR
arquivo_entrada = open(JuliaIntroBR.datapath("palavras.txt"));
----

[source,jlcon]
----
julia> arquivo_entrada = open("palavras.txt")
IOStream(<file palavras.txt>)
----

+arquivo_entrada+ é um objeto de arquivo usado para entrada de dados e, quando não for mais necessário, deve ser fechado com +close(fin)+.

Julia possui várias funções para leitura, como a +readline+, que lê caracteres do arquivo até chegar a um comando de +nova linha+ e retorna o resultado como uma string:
(((objeto de arquivo)))(((entrada de dados)))(((readline)))((("função", "Base", "readline", see="readline")))(((fechar objeto de arquivo)))

[source,@julia-repl chap09]
----
readline(arquivo_entrada)
----

A primeira palavra em inglês nesta lista especial é "aa", que é uma espécie de lava.

O objeto de arquivo é monitora sua localização no arquivo; portanto, se chamar novamente o comando readline, recebe a próxima palavra:

[source,@julia-repl chap09]
----
readline(arquivo_entrada)
----

O termo subsequente em inglês é "aah", que é perfeitamente legítima, então pare de me olhar desse jeito.

Você também pode usar um objeto de arquivo em um laço de repetição +for+. Este programa lê +palavras.txt+ e imprime cada palavra, uma por linha:
(((laço for)))(((eachline)))((("função", "Base", "eachline", see="eachline")))

[source,julia]
----
for linha in eachline("words.txt")
    println(linha)
end
----


=== Exercícios

[[ex09-1]]
===== Exercício 9-1

Escreva um programa que leia +palavras.txt + e imprima somente as palavras com mais de 20 caracteres (sem contar os espaços em branco).

[[ex09-2]]
===== Exercício 9-2

Em 1939, Ernest Vincent Wright publicou um romance de 50.000 palavras chamado Gadsby que não contém a letra +'e'+. Como +'e'+ é a letra mais comum em inglês, escrever um romance assim não é fácil.
(((Wright, Ernest Vincent)))

De fato, é difícil elaborar um único pensamento sem usar essa letra mais comum. É lento no início, mas com cautela e horas de treinamento, você pode gradualmente aprimorar essa habilidade até ficar mais fácil.

Tudo bem, vou parar agora.

Escreva uma função chamada +sem_e+ que informa +true+ se a palavra especificada não contém a letra +'e'+.
(((sem_e))) ((("função", "definido pelo programador", "sem_e", see="sem_e"))))

Modifique o seu programa da seção anterior (+sem_e+) de modo que ele imprima apenas as palavras que não possuem +'e'+ e informe a porcentagem de palavras na lista que não possuem +'e'+.

[[ex09-3]]
===== Exercício 9-3

Escreva uma função chamada +evita+ que recebe uma palavra e uma string de letras proibidas e devolve +true+ se a palavra não contém nenhuma das letras proibidas.
(((evita))))((("função", "definido pelo programador", "evita", see="evita")))

Modifique seu programa para receber uma string de letras proibidas digitada pelo usuário e imprimir o número de palavras que não contêm nenhuma dessas letras. Você consegue encontrar uma combinação de 5 letras proibidas que exclua a menor quantidade de palavras?

[[ex09-4]]
===== Exercício 9-4

Escreva uma função denominada +usa_somente+ que recebe uma palavra e uma string de letras e devolve +true+ se a palavra contém apenas as letras da string. Você pode fazer uma frase usando apenas as letras +acefhlo+? Uma diferente de "Hoe alfafa?"
(((usa_somente)))((("função", "definido pelo programador", "usa_somente", see="usa_somente")))

[[ex09-5]]
===== Exercício 9-5

Escreva uma função chamada +usa_todas+ que recebe uma palavra e uma string de letras exigidas, e que informa +true+ se a palavra usar todas as letras exigidas ao menos uma vez. Quantas palavras existem que usam todas as vogais +aeiou+? E que tal +aeiouy+?
(((usa_todas)))((("função", "definido pelo programador", "usa_todas", veja="usa_todas")))

[[ex09-6]]
===== Exercício 9-6

Write a function called +isabecedarian+ that returns +true+ if the letters in a word appear in alphabetical order (double letters are ok). How many abecedarian words are there?
(((isabecedarian)))((("função", "definido pelo programador", "isabecedarian", see="isabecedarian")))

[[search]]
=== Search

All of the exercises in the previous section have something in common; they can be solved with the search pattern. The simplest example is:
(((search)))(((hasno_e)))

[source,@julia-setup chap09]
----
function hasno_e(word)
    for letter in word
        if letter == 'e'
            return false
        end
    end
    true
end
----

The +for+ loop traverses the characters in word. If we find the letter +'e'+, we can immediately return +false+; otherwise we have to go to the next letter. If we exit the loop normally, that means we didn’t find an +'e'+, so we return +true+.

You could write this function more concisely using the +∉+ (*+\notin TAB+*) operator, but I started with this version because it demonstrates the logic of the search pattern.
(((∉)))((("operator", "Base", "∉", see="∉")))

+avoids+ is a more general version of +hasno_e+ but it has the same structure:
(((avoids)))

[source,@julia-setup chap09]
----
function avoids(word, forbidden)
    for letter in word
        if letter ∈ forbidden
            return false
        end
    end
    true
end
----

We can return +false+ as soon as we find a forbidden letter; if we get to the end of the loop, we return +true+.

+usesonly+ is similar except that the sense of the condition is reversed:
(((usesonly)))

[source,@julia-setup chap09]
----
function usesonly(word, available)
    for letter in word
        if letter ∉ available
            return false
        end
    end
    true
end
----

Instead of an array of forbidden letters, we have an array of available letters. If we find a letter in +word+ that is not in +available+, we can return +false+.

+usesall+ is similar except that we reverse the role of the word and the string of letters:
(((usesall)))

[source,@julia-setup chap09]
----
function usesall(word, required)
    for letter in required
        if letter ∉ word
            return false
        end
    end
    true
end
----

Instead of traversing the letters in word, the loop traverses the required letters. If any of the required letters do not appear in the word, we can return +false+.

If you were really thinking like a computer scientist, you would have recognized that +usesall+ was an instance of a previously solved problem, and you would have written:

[source,@julia-setup chap09]
----
function usesall(word, required)
    usesonly(required, word)
end
----

This is an example of a program development plan called _reduction to a previously solved problem_, which means that you recognize the problem you are working on as an instance of a solved problem and apply an existing solution.
(((program development plan)))(((reduction to a previously solved problem)))


=== Looping with Indices

I wrote the functions in the previous section with +for+ loops because I only needed the characters in the strings; I didn’t have to do anything with the indices.

For +isabecedarian+ we have to compare adjacent letters, which is a little tricky with a +for+ loop:
(((isabecedarian)))(((for statement)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    i = firstindex(word)
    previous = word[i]
    j = nextind(word, i)
    for c in word[j:end]
        if c < previous
            return false
        end
        previous = c
    end
    true
end
----

An alternative is to use recursion:
(((recursion)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    if length(word) <= 1
        return true
    end
    i = firstindex(word)
    j = nextind(word, i)
    if word[i] > word[j]
        return false
    end
    isabecedarian(word[j:end])
end
----

Another option is to use a +while+ loop:
(((while statement)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    i = firstindex(word)
    j = nextind(word, 1)
    while j <= sizeof(word)
        if word[j] < word[i]
            return false
        end
        i = j
        j = nextind(word, i)
    end
    true
end
----

The loop starts at +i=1+ and +j=nextind(word, 1)+ and ends when +j>sizeof(word)+. Each time through the loop, it compares the ++i++th character (which you can think of as the current character) to the ++j++th character (which you can think of as the next).

If the next character is less than (alphabetically before) the current one, then we have discovered a break in the abecedarian trend, and we return +false+.

If we get to the end of the loop without finding a fault, then the word passes the test. To convince yourself that the loop ends correctly, consider an example like +"flossy"+.

Here is a version of +ispalindrome+ that uses two indices; one starts at the beginning and goes up; the other starts at the end and goes down.
(((ispalindrome)))

[source,@julia-setup chap09]
----
function ispalindrome(word)
    i = firstindex(word)
    j = lastindex(word)
    while i<j
        if word[i] != word[j]
            return false
        end
        i = nextind(word, i)
        j = prevind(word, j)
    end
    true
end
----

Or we could reduce to a previously solved problem and write:

[source,@julia-setup chap08]
----
function ispalindrome(word)
    isreverse(word, word)
end
----

Using +isreverse+ from <<deb08>>.
(((isreverse)))


=== Debugging

Testing programs is hard. The functions in this chapter are relatively easy to test because you can check the results by hand. Even so, it is somewhere between difficult and impossible to choose a set of words that test for all possible errors.
(((debugging)))

Taking +hasno_e+ as an example, there are two obvious cases to check: words that have an +'e'+ should return +false+, and words that don’t should return +true+. You should have no trouble coming up with one of each.

Within each case, there are some less obvious subcases. Among the words that have an “e”, you should test words with an “e” at the beginning, the end, and somewhere in the middle. You should test long words, short words, and very short words, like the empty string. The empty string is an example of a _special case_, which is one of the non-obvious cases where errors often lurk.
(((special case)))

In addition to the test cases you generate, you can also test your program with a word list like +words.txt+. By scanning the output, you might be able to catch errors, but be careful: you might catch one kind of error (words that should not be included, but are) and not another (words that should be included, but aren’t).

In general, testing can help you find bugs, but it is not easy to generate a good set of test cases, and even if you do, you can’t be sure your program is correct. According to a legendary computer scientist:
(((Dijkstra, Edsger W.)))

[quote,  Edsger W. Dijkstra]
____
Program testing can be used to show the presence of bugs, but never to show their absence!
____

=== Glossary

file stream::
A value that represents an open file.
(((file stream)))

reduction to a previously solved problem::
A way of solving a problem by expressing it as an instance of a previously solved problem.
(((reduction to a previously solved problem)))

special case::
A test case that is atypical or non-obvious (and less likely to be handled correctly).
(((special case)))


=== Exercícios

[[ex09-7]]
===== Exercício 9-7

This question is based on a Puzzler that was broadcast on the radio program _Car Talk_ (https://www.cartalk.com/puzzler/browse):
(((Car Talk)))

[quote]
____
Give me a word with three consecutive double letters. I’ll give you a couple of words that almost qualify, but don’t. For example, the word committee, c-o-m-m-i-t-t-e-e. It would be great except for the 'i' that sneaks in there. Or Mississippi: M-i-s-s-i-s-s-i-p-p-i. If you could take out those i’s it would work. But there is a word that has three consecutive pairs of letters and to the best of my knowledge this may be the only word. Of course there are probably 500 more but I can only think of one. What is the word?
____

Write a program to find it.

[[ex09-8]]
===== Exercício 9-8

Here’s another _Car Talk_ Puzzler (https://www.cartalk.com/puzzler/browse):

[quote]
____
I was driving on the highway the other day and I happened to notice my odometer. Like most odometers, it shows six digits, in whole miles only. So, if my car had 300000 miles, for example, I’d see 3-0-0-0-0-0.

Now, what I saw that day was very interesting. I noticed that the last 4 digits were palindromic; that is, they read the same forward as backward. For example, 5-4-4-5 is a palindrome, so my odometer could have read 3-1-5-4-4-5.

One mile later, the last 5 numbers were palindromic. For example, it could have read 3-6-5-4-5-6. One mile after that, the middle 4 out of 6 numbers were palindromic. And you ready for this? One mile later, all 6 were palindromic!

The question is, what was on the odometer when I first looked?
____

Write a Julia program that tests all the six-digit numbers and prints any numbers that satisfy these requirements.

[[ex09-9]]
===== Exercício 9-9

Here’s another _Car Talk_ Puzzler you can solve with a search (https://www.cartalk.com/puzzler/browse):

[quote]
____
Recently I had a visit with my mom and we realized that the two digits that make up my age when reversed resulted in her age. For example, if she’s 73, I’m 37. We wondered how often this has happened over the years but we got sidetracked with other topics and we never came up with an answer.

When I got home I figured out that the digits of our ages have been reversible six times so far. I also figured out that if we’re lucky it would happen again in a few years, and if we’re really lucky it would happen one more time after that. In other words, it would have happened 8 times over all. So the question is, how old am I now?
____

Write a Julia program that searches for solutions to this Puzzler.

[TIP]
====
You might find the function +lpad+ useful.
(((lpad)))((("função", "Base", "lpad", see="lpad")))
====
