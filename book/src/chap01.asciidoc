[role="pagenumrestart"]
[[chap01]]
== O Caminho da Programação

O ((("cientistas da computação, habilidades de", seealso="programação")))objetivo deste livro é ensinar você a pensar como um cientista da computação. Essa maneira de pensar combina algumas das melhores ferramentas da matemática, engenharia e ciências naturais. Como matemáticos, cientistas da computação usam linguagens formais para denotar ideias (especificamente cálculos). Como engenheiros, projetam coisas, montando componentes em sistemas e avaliando ganhos e perdas entre as alternativas. Como cientistas, observam o comportamento de sistemas complexos, formulam hipóteses e testam predições.

A ((("resolução de problemas")))habilidade mais importante para um cientista da computação é a resolução de problemas. Resolver problemas significa ter habilidade para formular problemas, pensar em soluções com criatividade, e expressar a solução clara e precisamente. Como se vê, o processo de aprendizagem para programar é uma excelente oportunidade de praticar a habilidade de resolução de problemas. Por essa razão esse capítulo tem como título "O caminho da programação".

Por um lado, você estará aprendendo a programar, uma habilidade muito útil por si só. Por outro, você usará a programação como um significado para alcançar um objetivo. Na medida que formos evoluindo, esse fim ficará mais claro.


=== O que é um Programa?

Um _programa_ ((("programa")))é uma sequência de instruções que especifica como deve ser a computação. A computação poderá ser algo matemático, como resolver um sistema de equações ou encontrar as raízes de um polinômio, mas pode ser também uma computação simbólica, como uma busca ou substituição de texto num documento, ou algo gráfico, como o processamento de uma imagem ou reprodução de um vídeo.

Os ((("instruções", seealso="comandos"))) detalhes são diferentes em diferentes linguagens de programação, mas algumas instruções básicas aparecem em praticamente em todos os idiomas:

Entrada (_Input_)::
Coleta os dados do teclado, de um arquivo, de uma rede ou de algum dispositivo.

Saída (_Output_)::
Exibe os dados na tela, salva em um documento, envia através da rede, etc.

Matemáticos::
Realiza operações matemática básicas como adição e multiplicação.

Execução Condicional::
Verifica certas condições e executa o código apropriado.

Repetição::
Realiza ((("repetição", see="iteração")))alguma ação repetidamente, geralmente com alguma variação.

Acredite ou não, isso é tudo que existe. Todo programa que você já usou, por mais complicado que seja, é composto de instruções que são muito similares a essas. Portanto, você pode pensar em programação como o processo de dividir uma tarefa grande e complexa em subtarefas cada vez menores até que as subtarefas sejam simples o suficiente para serem executadas com uma dessas instruções básicas.


=== Executando o Julia

Um ((("Julia", "executando")))dos desafios de começar com o Julia é que talvez você precise instalá-lo e softwares relacionados no seu computador. Se você está familiarizado com o seu sistema operacional, e especificamente se você está confortável com a interface das linhas de comando, você não terá problemas em instalar o Julia. Mas, para iniciantes, pode ser assustador aprender sobre administração de sistemas operacionais e programação ao mesmo tempo.

Para evitar esse problema, eu recomendo que você comece a executar o Julia em um navegador. Depois, quando se sentir mais confortável com o Julia, eu irei sugerir instalar o Julia em seu computador.

No ((("Repl.It")))((("recursos online", "Repl.it")))navegador, você pode executar o https://repl.it[Repl.it]. Nenhuma instalação é necessária - Apenas escolha um navegador, faça o _log in_ e comece a programar (veja <<editores-online>>).

O _REPL_ do Julia (Read-Eval-Print Loop, que traduzido ao pé da letra, significa Ler, Avaliar e Repetição de impressão) é um programa que lê e executa os códigos do Julia. Você pode começar o REPL abrindo um terminal e escrevendo *+julia+* na linha de comando (depois de instalar o Julia). Alternativamente, o Repl.it já abre um terminal junto com o editor. Quando executar, você deverá ver uma saída como essa:

[source,@julia-eval]
----
io = IOBuffer()
Base.banner(io)
banner = String(take!(io))
println("$(banner)julia>")
----

As primeiras linhas contém informações sobre o REPL, que deve ser diferente para você. Porém, você deve checar que o número da versão seja pelo menos 1.0.0.

A ((("prompt", "em REPL", secondary-sortas="REPL"))) última linha é um _prompt_ que indica que o REPL está pronto para você inserir o código. Se você digitar uma linha de código e pressionar Enter, o REPL exibirá o seguinte resultado:

[source,@julia-repl-test]
----
julia> 1 + 1
2
----

Os trechos de códigos podem ser copiados e colados literalmente, incluindo o prompt julia> e qualquer saída.

Agora você está pronto para começar. Daqui em diante, irei assumir que você sabe como iniciar o Julia REPL e executar o código.


=== O Primeiro Programa

Tradicionalmente, o primeiro programa que você escreve em uma nova linguagem de programação é chamado de "Olá, Mundo!" porque tudo que faz é exibir as palavras "Olá, Mundo!". Em Julia, se parece com isso:

[source,@julia-repl-test]
----
julia> println("Olá, Mundo!")
Olá, Mundo!
----

Este ((("comando de impressão", "função println")))((("saída", "comando de impressão")))é um exemplo de um comando de impressão, embora não imprima nada no papel. Ele exibe o resultado na tela.


As aspas no programa marcam o início e o final do texto a ser exibido; eles não aparecem no resultado.

Os parênteses indicam que +println+ é uma função. Nós chegaremos em funções no <<Capítulo 3>>. ((("<<chap03>>"")))


=== Operações Aritméticas

Depois ((("operadores", "aritmética")))((("operadores aritméticos")))((("matemática", "operadores matemáticos")))de "Olá, Mundo!" o próximo passo é a aritmética. Julia ((("operadores")))fornece  _operadores_, que são símbolos que representam cálculos como adição e multiplicação.

Os operadores ((("$$+$$ (operador de adição)", primary-sortas="* addition")))((("operador de adição ($$+$$)")))((("$$-$$ (operador de subtração)", primary-sortas="* subtração")))((("operador de subtração ($$-$$)")))((("$$*$$ (asterisk)", "operador de multiplicação", primary-sortas="* asterisk")))((("operador de multiplicação ($$*$$)")))((("asterisco ($$*$$)", "operador de multiplicação")))operators +pass:[+]+, +-+, and +*+ executam adição, subtração e multiplicação, como nos seguintes exemplos:

[source,@julia-repl-test]
----
julia> 40 + 2
42
julia> 43 - 1
42
julia> 6 * 7
42
----

O ((("$$/$$ (operador de divisão)", primary-sortas="* divisão")))((("divisão", "operador de divisão ($$/$$)"))) operador +/+ executa divisão:

[source,@julia-repl-test]
----
julia> 84 / 2
42.0
----

Talvez você deva estar se perguntando porquê o resultado é 42.0 invés de 42. Eu irei explicar na próxima seção.

Finalmente, o ((("$$^$$ (caret)", "operador de exponenciação", primary-sortas="* circunflexo")))((("operador de exponenciação ($$^$$)")))((("circunflexo ($$^$$)", "operador de exponenciação")))operador +^+ executa exponenciação; isto é, eleva um número a uma potência:

[source,@julia-repl-test]
----
julia> 6^2 + 6
42
----

=== Valores e Tipos

Um _valor_ ((("valores"))) é uma das coisas mais básicas que um programa trabalha, como uma letra ou um número. Alguns valores que vimos até agora são +2+, +42.0+, e +"Olá, Mundo!"+.

Esse ((("tipos")))((("tipos de dados", see="tipos")))((("tipo inteiro (Int64)")))((("tipo ponto flutuante (Float64)")))((("strings")))((("tipos", "Int64", see="tipo inteiro")))((("types", "Float64", see="tipo ponto flutuante")))((("types", "String", see="strings")))valores pertencem a diferentes _tipos_: 2 é um _inteiro_, 42.0 é um _número de ponto flutuante_, e +"Olá, Mundo!"+ é uma _string_, é chamada assim porque os caracteres que contém são amarrados.

Se ((("tipo de função"))) você não tem certeza de que tipo é um determinado valor, o REPL pode dizer a você:

[source,@julia-repl-test]
----
julia> typeof(2)
Int64
julia> typeof(42.0)
Float64
julia> typeof("Hello, World!")
String
----

Inteiros pertencem ao tipo +Int64+, strings pertencem a +String+, e pontos flutuantes pertencem a +Float64+.

E ((("aspas (&quot;&#x2026;&quot;)", "delimitação de strings")))((("&quot;&#x2026;&quot; (aspas)", "delimitação de strings", primary-sortas="* aspas")))quanto a valores como +"2"+ e +"42.0"+? Eles parecem números, mas estão entre parênteses como strings. Eles também são strings:

[source,@julia-repl-test]
----
julia> typeof("2")
String
julia> typeof("42.0")
String
----

Quando ((("vírgula ($$,$$)", "não usado em inteiros")))((("$$,$$ (vírgula)", "não usado em inteiros", primary-sortas="* vírgula")))você digita um número inteiro grande, você pode ficar tentado a usar vírgulas entre os grupos de dígitos, como em 1,000,000. Isto não é um _inteiro_ permitido em Julia, mas é permitido:

[source,@julia-repl-test]
----
julia> 1,000,000
(1, 0, 0)
----

Não era o que esperávamos! Julia analisa +1,000,000+ como uma sequência separada por vírgula de inteiros. Iremos aprender mais sobre este tipo de sequência depois.

Contudo, ((("sublinhado ($$_$$)", "em inteiros")))((("$$_$$ (sublinhado)", "em inteiros", primary-sortas="* sublinhado"))) você pode obter o resultado esperado usando +1_000_000+.


=== Linguagens Formais e Naturais

_Linguagens Naturais_ ((("linguagem natural", id="ch1nat", range="startofrange"))) são aquelas linguagens que as pessoas falam, como Inglês, Espanhol, Português e o Francês. Elas não são projetadas por pessoas (embora pessoas tentem lhes impor alguma ordem); elas evoluíram naturalmente.

_Linguagens Formais_ ((("linguagem formal", id="ch1nat2", range="startofrange"))) são linguagens projetadas por pessoas para aplicações específicas. Por exemplo, a notação que os matemáticos utilizam é uma linguagem formal que em particular é boa para denotar a relação entre números e símbolos. Químicos usam uma linguagem formal para representar a estrutura química das moléculas. E ((("linguagem de programação", id="ch1nat3", range="startofrange")))mais importante, linguagens de programação são linguagens formais projetadas para expressar cálculos.

Linguagens ((("sintaxe", id="ch1nat4", range="startofrange")))formais tendem a ter regras rígidas de _sintaxe_ que governam a estrutura das declarações. Por exemplo, em matemática a declaração latexmath:[\(3 + 3 = 6\)] tem sintaxe correta, mas latexmath:[\(3 += 3 \$ 6\)] não. Em química, latexmath:[\(\mathrm{H_2O}\)] é uma fórmula sintaticamente correta, mas latexmath:[\(\mathrm{_2Zz}\)] não.

Regras ((("símbolo", id="ch1nat5", range="startofrange")))((("estrutura", id="ch1nat6", range="startofrange")))de sintaxe são fornecidas em dois tipos, pertencentes a _símbolos_ e _estruturas_. Símbolos são elementos básicos da linguagem, como palavras, números e elementos químicos. Um dos problemas com latexmath:[\(3 += 3 \$ 6\)] é que latexmath:[\(\$\)] não é um símbolo permitido em matemática (pelo menos até onde eu sei). Da mesma forma, latexmath:[\(\mathrm{_2Zz}\)] não é permitido pois não há elemento com abreviação latexmath:[\(\mathrm{Zz}\)].

O segundo tipo de regra de sintaxe pertence à maneira que símbolos são combinados. A equação latexmath:[\(3 +=3\)] não é permitida porque mesmo que latexmath:[\(+\)] e latexmath:[\(=\)] sejam símbolos permitidos, você não pode ter um logo após o outro. Da mesma forma, em uma fórmula química, o subscrito vem depois do nome do elemento, e não antes.

Essa é um@ sentença bem estruturada em portuguê$ com 5ímb0l05 inválidos. Essa frase possui todos os símbolos válidos, mas com estrutura invalida.

Quando ((("análise"))) você lê uma sentença em Português ou uma declaração numa linguagem formal, você tem que descrever a estrutura (apesar de que em uma linguagem natural você faz isso subconscientemente). Esse processo é chamado de _análise_.

Embora as linguagens formais e naturais tenham muito recursos em comuns — símbolos, estruturas, e sintaxes —  existem algumas diferenças:

Ambiguidade::
As linguagens naturais são cheias de ambiguidades, com as quais as pessoas lidam usando pistas contextuais e outras informações. As linguagens formais são projetadas para serem quase ou completamente inequívocas, o que significa que qualquer afirmação tem exatamente um significado, independentemente do contexto.

Redundância::
Para compensar a ambiguidade e reduzir os mal-entendidos, as linguagens naturais empregam muita redundância. Como resultado, elas geralmente são detalhadas. Linguagens formais são menos redundantes e mais concisas.

Literalidade::
As línguas naturais estão cheias de expressões idiomáticas e metáforas. Se eu disser: "Caiu a ficha!", provavelmente não há ficha e nada está caindo (nesse idioma significa que alguém entendeu alguma coisa após um período de confusão). Linguagens formais significam exatamente o que dizem.

Como todos nós crescemos falando linguagens naturais, às vezes é difícil nos adaptarmos às línguas formais. A diferença entre linguagem formal e natural é como a diferença entre poesia e prosa, mas mais ainda:

Poesia::
As palavras são usadas tanto pelos sons quanto pelo significado, e o poema inteiro cria um efeito ou resposta emocional. A ambiguidade não é apenas comum, mas muitas vezes deliberada.

Prosa::
O significado literal das palavras é mais importante e a estrutura contribui com mais significado. A prosa é mais passível de análise do que a poesia, mas ainda é ambígua.

Programas::
O significado de um programa de computador é inequívoco e literal e pode ser entendido inteiramente pela análise dos símbolos e da estrutura.

As linguagens formais são mais densas que as linguagens naturais, por isso leva mais tempo para lê-las. Além disso, a estrutura é importante, portanto nem sempre é melhor ler de cima para baixo, da esquerda para a direita. Em vez disso, você aprenderá a analisar o programa em sua cabeça, identificando os símbolos e interpretando a estrutura. Finalmente, os detalhes são importantes. Pequenos erros de ortografia e pontuação, com os quais você pode se dar bem em idiomas naturais, podem fazer uma grande diferença na linguagem formal. (((range="endofrange", startref="ch1nat")))(((range="endofrange", startref="ch1nat2")))(((range="endofrange", startref="ch1nat3")))(((range="endofrange", startref="ch1nat4")))(((range="endofrange", startref="ch1nat5")))(((range="endofrange", startref="ch1nat6")))


=== Depuração

Programadores ((("erros (bugs)")))((("depurar", "emoções de, lidando com")))cometem erros. Por motivos lúdicos, erros de programação são chamados de _bugs_ e o processo de rastreá-lo é chamado de _deburação_.

_N.T.: Depurar em inglês é Debug, e comumente vemos a utilização de Debug e suas conjunções abrasileiradas. Note que Debugar (verbo) está incluso no dicionário brasileiro, mas Debug, o substantivo correspondente, não está._

A programação e, especialmente, a depuração, às vezes traz emoções fortes. Se você está lutando com um bug difícil, pode sentir raiva, desânimo ou vergonha.

Há evidências de que as pessoas respondem naturalmente aos computadores como se fossem pessoas. Quando eles funcionam bem, pensamos neles como companheiros de equipe e, quando são obstinados ou rudes, respondemos a eles da mesma maneira que respondemos a pessoas rudes e obstinadas.footnote:[Reeves, Byron, e Clifford Ivar Nass. 1996. “The Media Equation: How People Treat Computers, Television, and New Media Like Real People and Places.” Chicago, IL: Center for the Study of Language and Information; New York: Cambridge University Press.]

A preparação para essas reações pode ajudá-lo a lidar com elas. Uma abordagem é pensar no computador como um funcionário com certos pontos fortes, como velocidade e precisão, e pontos fracos particulares, como falta de empatia e incapacidade de entender o cenário geral.

Seu trabalho é ser um bom gerente: encontre maneiras de aproveitar os pontos fortes e atenuar os pontos fracos. E encontre maneiras de usar suas emoções para se envolver com o problema, sem deixar que suas reações interfiram na sua capacidade de trabalhar de maneira eficaz.

Aprender a depurar pode ser frustrante, mas é uma habilidade valiosa que é útil para muitas atividades além da programação. No final de cada capítulo, há uma seção, como esta, com minhas sugestões para depurar. Espero que eles ajudem!


=== Glossário

resolução de problemas::
É o ((("resolução de problemas"))) processo de formular o problema, encontrar uma solução e expressar-lo.

programa::
Um ((("programa"))) é uma sequência de instruções que especifica um cálculo.

REPL::
Um ((("REPL (Read-Eval-Print-Loop"))) programa que repetidamente lê entradas, executa e exibe os resultados.

prompt::
Caratecteres ((("prompt")))exibido pelo REPL para indicar que está pronto para receber informações do usuário.

declaração de impressão::
Uma ((("declaração de impressão")))((("output", "print statement"))) instrução que faz com o que o Julia REPL exiba o valor na tela.

operador::
Um ((("operador"))) símbolo que representa um simples cálculo como adição, multiplicação, ou uma concatenação de strings.

valor::
Uma ((("valores")) das unidades de dados mais básicas, como um número ou string, é o que um programa manipula.

tipo::
Uma ((("tipos"))) categoria de valores. Os tipos que vimos até agora são números inteiros (+Int64+), números de ponto flutuante (+Float64+) e seqüências de caracteres (+String+).

inteiros::
Um ((("tipo inteiro (Int64)")))tipo de que representa todos os números.

ponto-flutuante::
Um ((("tipo ponto flutuante (Float64)"))) tipo que representa números com pontos decimais.

string::
Um ((("string"))) tipo que representa uma sequência de caracteres.

linguagem natural::
Qualquer ((("linguagem natural"))) uma das linguagens que as pessoas falam que se envolvem naturalmente.

linguagem formal::
Qualquer ((("linguagem formal"))) uma das linguagens que as pessoas foram desenvolvidas para propósitos específicos, como representar ideias matemáticas ou programas de computador. Todas ((("linguagem de programação"))) as linguagens de programação são formais.

sintaxe::
As ((("sintaxe"))) regras que governam a estrutura de um programa.

símbolo::
Um ((("símbolos")))dos elementos mais básicos de uma estrutura de sintaxes de um programa, análogo a uma palavra numa linguagem natural.

estrutura::
A ((("estrutura")))maneira que os símbolos são combinados.

analisar::
Para ((("analisar"))) examinar um programa e analisar uma estrutra de sintaxe.

bug::
Um ((("erros (bugs)", seealso="depurar")))((("bugs", see="errors"))) erro de um programa.

depurar::
O ((("depurar", seealso="erros (bugs); testes"))) processo de encontrar e corrigir bugs.


=== Exercícios

[TIP]
====
É uma boa ideia ler este livro na frente de um computador para que você possa experimentar os exemplos à medida que avança.
====

[[ex01-1]]
===== Exercício 1-1

Sempre que você estiver experimentando um novo recurso, tente cometer erros. Por exemplo, no programa "Olá, mundo!", o que acontece se você deixar de fora uma das aspas? E se você deixar de fora ambas? E se você soletrar +println+ errado?

Esse tipo de experimento ajuda a lembrar o que você lê; também ajuda quando você está programando, porque você sabe o que significam as mensagens de erro. É melhor cometer erros agora e de propósito, e não mais tarde e acidentalmente.

. Em um comando de impressão, o que acontece se você deixar de fora um dos parênteses ou ambos?

. Se você estiver tentando imprimir uma sequência, o que acontece se você deixar de fora uma das aspas ou ambas?

. Você pode usar um sinal de menos para fazer um número negativo como +-2+. O que acontece se você colocar um sinal de mais antes de um número? E a respeito de +pass:[2++2]+?

. Em notação matemática, zeros à esquerda estão corretos, como em +02+. O que acontece se você tentar isso em Julia?

. O que acontece se você tem dois valores com nenhum operador entre eles?


[[ex01-2]]
===== Exercício 1-2

Inicie o Julia REPL e use-o como uma calculadora.

. Quantos segundos existem em 42 minutos e 42 segundos?

. Quantas milhas existem em 10 quilômetros?
+
[TIP]
====
Uma milha equivale a 1,61.
====

. Se você corre uma corrida de 10 quilômetros em 37 minutos e 48 segundos, qual é o seu ritmo médio (tempo por milha em minutos e segundos)? Qual é a sua velocidade média em milhas por hora?
