[[chap20]]
== The Goodies: Base e a Biblioteca Padrão

O Julia vem com baterias inclusas. O módulo +Base+ contém as funções, tipos e macros mais utéis. Eles estão diretamente disponíveis no Julia.
(((Base)))

O Julia também forence um grande número de módulos especializados em sua Biblioteca Padrão (Datas, Computação Distribuida, Algebra Linear, Profiling, Números Aleatórios, ...). Funções, tipos e macros definidos na Biblioteca Padrão precisam ser importados antes de poderem ser usados:

* +import _Módulo_+ importa o módulo, e +_Módulo.fn(x)_+ chama a função +_fn_+
(((import)))((("palavra-chave", "import", see="import")))
* +using _Módulo_+ importa todas as funções, tipos e macros exportados de +_Módulo_+.
(((using)))

Funcionalidades extras podem ser adicionadas de uma crescente coleção de pacotes (https://juliaobserver.com).

Este capítulo não é uma substituição da documentação oficial do Julia. Eu apenas dou alguns exemplos para ilustrar o que é possível sem tornar o processo exaustivo. Funções já introduzidas em algum outro lugar não estão inclusas. Uma visão geral pode ser encontrada em https://docs.julialang.org.

=== Medindo Performance

Nós vimos que alguns algoritmos executam melhor que outros. +fibonnaci+ em <<memos>> é muito mais rápido que +fib+ em <<one_more_example>>. O macro +@time+ permite quantificar a diferença:
(((@time)))((("macro", "Base", "@time", see="@time")))

[source,jlcon]
----
julia> fib(1)
1
julia> fibonacci(1)
1
julia> @time fib(40)
  0.567546 seconds (5 allocations: 176 bytes)
102334155
julia> @time fibonacci(40)
  0.000012 seconds (8 allocations: 1.547 KiB)
102334155
----

+@time+ exibe o tempo que a função levou para executar, o número de alocações (allocations) e a memória alocada antes de retornar o resultado. A versão memoizada é efetivamente muito mais rápida, mas requer mais memória.

[quote]
____
Não existem almoços grátis!
____

[TIP]
====
Uma função no Julia é compilada na primeira vez que é executada. Então para comparar dois algoritmos, eles devem ser implementados como funções para serem compilados e a primeira vez que são chamados precisa ser excluída da medida de performance, caso contrário o tempo de compilação também é medido.

O pacote +BenchmarkTools+ (https://github.com/JuliaCI/BenchmarkTools.jl) fornece o macro +@btime+ que faz benchmarking da maneira certa. Então use-o!
====


[[collections_and_data_structures]]
=== Coleções e Estruturas de Dados

Em <<dictionary_subtraction>> nós usamos dicionários para achar palavras que aparecem em um documento mas não em uma lista de palavra. A função que escrevemos recebe +d1+, que contém as palavras do documento como chaves, e +d2+, que contém a lista de palavras. Ela retorna um dicionário que contém chaves de +d1+ que não estão em +d2+.
(((subtrai)))

[source,@julia-setup]
----
function subtrai(d1, d2)
    res = Dict()
    for chave in keys(d1)
        if chave ∉ keys(d2)
            res[chave] = nothing
        end
    end
    res
end
----

Em todos estes dicionários, os valores são +nothing+ porque nós nunca usamos eles. Como resultado, nós desperdiçamos um pouco de espaço de armazenamento.

O Julia fornece outro tipo embutido, chamado de conjunto, que se comporta como uma coleção de chaves de dicionário mas sem valores. Adicionar elementos à um conjunto é rápido; assim como verificar que um elemento pertence à ele. Além disso, conjuntos fornecem funções e operadores para computar operações comuns de conjunto.
(((Conjunto)))((("tipo", "Base", "Conjunto", see="Conjunto")))

Por exemplo, a subtração de conjuntos está disponível em uma função chamada +setdiff+. Então para reescrever +subtrai+ assim:
(((setdiff)))((("função", "Base", "setdiff", see="setdiff")))

[source,@julia-setup]
----
function subtrai(d1, d2)
    setdiff(d1, d2)
end
----

O resultado é um conjunto ao invés de um dicionário.

Alguns dos exercicíos deste livro podem ser feitos de forma concisa e eficientemente utilizando conjuntos. Por exemplo, aqui está uma solução para +tem_duplicatas+, de <<ex10-7>>, que usa um dicionário:
(((tem_duplicatas)))

[source,@julia-setup]
----
function tem_duplicatas(t)
    d = Dict()
    for x in t
        if x ∈ d
            return true
        end
        d[x] = nothing
    end
    false
end
----

Quando um elemento aparece pela primeira vez, ele é adicionado ao dicionário. Se o mesmo elemento aparece novamente, a função retorna +true+.

Utilizando conjuntos, nós podemos escrever a mesma função assim:

[source,@julia-setup]
----
function tem_duplicatas(t)
    length(Set(t)) < length(t)
end
----

Um elemento pode aparecer somente uma vez no conjunto, então se um elemento em +t+ aparece mais de uma vez, o conjunto será menor que +t+. Se não há duplicatas, o conjunto terá o mesmo tamanho que +t+.

Nós também podemos usar conjuntos para fazer alguns exercícios de <<chap09>>. Por exemplo, aqui está uma versão de +usa_somente+ com um laço:
(((usa_somente)))

[source,@julia-setup]
----
function usa_somente(word, available)
    for letter in word
        if letter ∉ available
            return false
        end
    end
    true
end
----
+usa_somente+ verifica se todas as letras em +palavra+ estão em +available+. Nós podemos reescreve-la da seguinte forma:

[source,@julia-setup]
----
function usa_somente(word, available)
    Set(word) ⊆ Set(available)
end
----

O operador +⊆+ (*+\subseteq TAB+*) verifica se um conjunto é um subconjunto ou outro, incluindo a possibilidade deles serem iguasi, que ocorre se todas as letras em +palavra+ aparecem em +available+.
(((⊆)))((("operador", "Base", "⊆", see="⊆")))

===== Exercício 20-1

Reescreva +avoids+ utilizando conjuntos.
(((avoids)))


=== Matemática

Números complexos também são suportados pelo Julia. A constante global +im+ é vinculada ao número complexo latexmath:[$\mathrm{i}$], representando a raiz quadrada de latexmath:[$-1$].
(((números complexos)))(((im)))

Nós podemos agora verificar a identidade de Euler.
(((identidade de Euler)))

[source,@julia-repl-test]
----
julia> ℯ^(im*π)+1
0.0 + 1.2246467991473532e-16im
----

O símbolo +ℯ+ (*+\euler TAB+*) é a base dos logaritmos naturais.
(((ℯ)))

Vamos ilustrar a natureza complexa de funções trigonométricas:

[latexmath]
++++
\begin{equation}
{\cos\left(x\right)=\frac{\mathrm{e}^{\mathrm{i}x}+\mathrm{e}^{-\mathrm{i}x}}{2}\,.}
\end{equation}
++++

Nós podemos agora testar esta fórmula para valores diferentes de latexmath:[\(x\)].

[source,@julia-repl-test]
----
julia> x = 0:0.1:2π
0.0:0.1:6.2
julia> cos.(x) == 0.5*(ℯ.^(im*x)+ℯ.^(-im*x))
true
----

Aqui, outro exemplo da utilização do operador ponto é mostrado. O Julia também permite que literais numéricos sejam justapostos com identificadores e coeficientes, como em +2π+.

=== Strings

Em <<chap08>> e <<chap09>>, nós fizemos algumas buscas elementares com objetos string. O Julia pode no entanto, lidar com expressões regulares compatíveis com o Perl, que facilita a tarefa de achar padrões complexos em objetos string.
(((regex)))

A função +usa_somente+ pode ser implementada como uma regex (expressão regular):
(((usa_somente)))(((Regex)))((("type", "Base", "Regex", see="Regex")))(((occursin)))((("função", "Base", "occursin", see="occursin")))

[source,@julia-setup chap20]
----
function usa_somente(palavra, disponível)
  r = Regex("[^$(disponível)]")
  !occursin(r, palavra)
end
----

A regex procura um caractere que não está na string +disponível+ e +occursin+ retorna +true+ se o padrão é achado em +word+.

[source,@julia-repl-test chap20]
----
julia> usa_somente("banana", "abn")
true
julia> usa_somente("bananas", "abn")
false
----

Expressões regulares também podem ser construidas como literais strings não padronizadas prefixadas com +r+:
(((string)))(((match)))((("função", "Base", "match", see="match")))

[source,@julia-repl-test chap20]
----
julia> match(r"[^abn]", "banana")

julia> m = match(r"[^abn]", "bananas")
RegexMatch("s")
----

Interpolação de strings não é permitada neste caso. A função +match+ retorna nada se o padrão (um comando) não é achado, e retorna um objeto regexmatch caso contrário.
(((interpolação de strings)))(((RegexMatch)))((("tipo", "Base", "RegexMatch", see="RegexMatch")))

Nós podemos extrair a seguinte informação de um objeto regexmatch:

* A substring correspondente inteira: +m.match+
* as substrings capturadas como um lista de strings: +m.captures+
* o deslocamento no qual toda a correspondência inicia: +m.offset+
* os deslocamentos das substrings capturadas como uma lista: +m.offsets+

[source,@julia-repl-test chap20]
----
julia> m.match
"s"
julia> m.offset
7
----

Expressões regulares são extremamente poderosas e o página do manual PERL http://perldoc.perl.org/perlre.html fornece todos os detalhes para construir as buscas mais exóticas.

=== Listas

Em <<chap10>> nós usamos um objeto lista como um container unidimensional com um índice para endereçar seus elementos. No Julia no entanto, listas são coleções multidimensionais.

Vamos criar uma _matriz_ 2 por 3 preenchida com zeros:
(((zeros)))((("função", "Base", "zeros", see="zeros")))(((matrix)))

[source,@julia-repl-test chap20]
----
julia> z = zeros(Float64, 2, 3)
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0
julia> typeof(z)
Array{Float64,2}
----

O tipo desta matriz é um Array que guarda pontos flutuantes com duas dimensões.
(((dimensão)))

A função +size+ retorna uma tupla com seus elementos sendo o número de elementos em cada dimensão da matriz:
(((size)))((("function", "Base", "size", see="size")))

[source,@julia-repl-test chap20]
----
julia> size(z)
(2, 3)
----

A função +ones+ constrói uma matriz com valores unitários:
(((ones)))((("função", "Base", "ones", see="ones")))

[source,@julia-repl-test chap20]
----
julia> s = ones(String, 1, 3)
1×3 Array{String,2}:
 ""  ""  ""
----

Uma string unitária é uma string vazia.

[WARNING]
====
+s+ não é um array unidimensional:

[source,@julia-repl-test chap20]
----
julia> s ==  ["", "", ""]
false
----

+s+ é uma matriz linha e +["", "", ""]+ é uma matriz coluna.
====

Uma matriz pode ser digitada diretamente usando a barra de espaço para separar os elementos em uma linha e um ponto e vírgula +;+ para separar as linhas.
(((;)))

[source,@julia-repl-test chap20]
----
julia> a = [1 2 3; 4 5 6]
2×3 Array{Int64,2}:
 1  2  3
 4  5  6
----

Você pode usar os colchetes para endereçar elementos individuais:
(((colchetes)))

[source,@julia-repl-test chap20]
----
julia> z[1,2] = 1
1
julia> z[2,3] = 1
1
julia> z
2×3 Array{Float64,2}:
 0.0  1.0  0.0
 0.0  0.0  1.0
----

Fatias podem ser usadas para cada dimensão para selecionar um subgrupo de elementos:
(((fatia)))

[source,@julia-repl-test chap20]
----
julia> u = z[:,2:end]
2×2 Array{Float64,2}:
 1.0  0.0
 0.0  1.0
----

O operador +.+ transmite para todas as dimensões:
(((.)))

[source,@julia-repl-test chap20]
----
julia> ℯ.^(im*u)
2×2 Array{Complex{Float64},2}:
 0.540302+0.841471im       1.0+0.0im
      1.0+0.0im       0.540302+0.841471im
----

=== Interfaces

O Julia específica algumas interfaces informais para definir comportamentos, isto é, métodos com um objetivo específico. Quando você extende um destes métodos para um tipo, objetos daquele tipo podem ser usados para desenvolver estes comportamentos.
(((interface)))

[quote]
____
Se algo se parece com um pato, nada como um pato, e soa como um pato, então provavelmente _é_ um pato.
____

Em <<one_more_example>> nós implementamos a função +fib+ retornando o latexmath:[\(n\)]-ésimo elemento da sequência de Fibonnaci.

Percorrer os valores de uma coleção, chamada iteração, é essa interface. Vamos criar um iterando que retorna preguiçosamente a sequência de Fibonacci:
(((iterando)))(((Fibonacci)))((("tipo", "definido pelo programador", "Fibonacci", see="Fibonacci")))(((iterate)))((("função", "Base", "iterate", see="iterate")))

[source,@julia-setup chap20]
----
struct Fibonacci{T<:Real} end
Fibonacci(d::DataType) = d<:Real ? Fibonacci{d}() : error("Não é um tipo real!")

Base.iterate(::Fibonacci{T}) where {T<:Real} = (zero(T), (one(T), one(T)))
Base.iterate(::Fibonacci{T}, estado::Tuple{T, T}) where {T<:Real} = (estado[1], (estado[2], estado[1] + estado[2]))
----

Nós implementamos um tipo parametrizado sem nenhum campo chamado +Fibonacci+, um construtor externo e dois métodos +iterate+. O primeiro é chamado para inicializar o iterando e retornar a tupla consistindo do primeiro valor, 0, e o estado. O estado neste caso é uma tupla contendo o segundo e o terceiro valor, 1 e 1.

O segundo é chamado para obter o próximo valor da sequência de Fibonacci e retornar a tupla tendo como primeiro elemento o próximo valor e o segundo elemento o estado que é uma tupla com os dois próximos valores.

Nós podemos usar +Fibonacci+ agora em um laço +for+:
(((declaração for)))

[source,@julia-repl-test chap20]
----
julia> for e in Fibonacci(Int64)
           e > 100 && break
           print(e, " ")
       end
0 1 1 2 3 5 8 13 21 34 55 89
----

Parece que alguma mágica aconteceu, mas a explicação é simples. Um laço +for+ em Julia

[source,julia]
----
for i in iter
    # body
end
----

é traduzido para:

[source,julia]
----
próximo = iterate(iter)
while próximo !== nothing
    (i, state) = próximo
    # body
    próximo = iterate(iter, estado)
end
----

Isto é um bom exemplo de como uma interface bem definida permite uma implementação usar todas as funções que estão cientes da interface.


=== Utilidades Interativas

Nós já conhecemos o módulo +InteractiveUtils+ em <<interactive>>. O macro +@which+ é somente a ponta do iceberg.
(((InteractiveUtils)))(((@which)))

O código Julia é transformada pela biblioteca LLVM para código de máquina em múltiplos passos. Nós podemos diretamente visualizar a saída de cada etapa.

Aqui está um exemplo simples:
(((soma_de_quadrados)))((("função", "definido pelo programador", "soma_de_quadrados", see="soma_de_quadrados")))

[source,@julia-setup chap20]
----
function soma_de_quadrados(a::Float64, b::Float64)
    a^2 + b^2
end
----

O primeiro passo é ver o código lowered:
(((@code_lowered)))((("macro", "InteractiveUtils", "@code_lowered", see="@code_lowered")))

[source,@julia-repl-test chap20]
----
julia> using InteractiveUtils

julia> @code_lowered soma_de_quadrados(3.0, 4.0)
CodeInfo(
1 ─ %1 = Core.apply_type(Base.Val, 2)
│   %2 = (%1)()
│   %3 = Base.literal_pow(:^, a, %2)
│   %4 = Core.apply_type(Base.Val, 2)
│   %5 = (%4)()
│   %6 = Base.literal_pow(:^, b, %5)
│   %7 = %3 + %6
└──      return %7
)
----

O macro +@code_lowered+ retorna uma lista de _representações intermediárias_ do código que é usado pelo compilador para gerar código otimizado.
(((representação intermediária)))

O próximo passo é adicionar a informação de tipo:
(((@code_typed)))((("macro", "InteractiveUtils", "@code_typed", see="@code_typed")))

[source,@julia-repl-test chap20]
----
julia> @code_typed soma_de_quadrados(3.0, 4.0)
CodeInfo(
1 ─ %1 = Base.mul_float(a, a)::Float64
│   %2 = Base.mul_float(b, b)::Float64
│   %3 = Base.add_float(%1, %2)::Float64
└──      return %3
) => Float64
----

Nós podemos ver o tipo dos resultados intermediários e o valor de retorno é corretamente inferido.

A representação do código é transformada em código LLVM:
(((código LLVM)))(((@code_llvm)))((("macro", "InteractiveUtils", "@code_llvm", see="@code_llvm")))

[source,@julia-repl chap20]
----
@code_llvm soma_de_quadrados(3.0, 4.0)
----

E finalmente, o _código de máquina_ é gerado:
(((código de máquina)))(((@code_native)))((("macro", "InteractiveUtils", "@code_native", see="@code_native")))

[source,@julia-repl-test chap20]
----
julia> @code_native soma_de_quadrados(3.0, 4.0)
	.section	__TEXT,__text,regular,pure_instructions
; ┌ @ none:2 within `soma_de_quadrados'
; │┌ @ intfuncs.jl:261 within `literal_pow'
; ││┌ @ none:2 within `*'
	vmulsd	%xmm0, %xmm0, %xmm0
	vmulsd	%xmm1, %xmm1, %xmm1
; │└└
; │┌ @ float.jl:401 within `+'
	vaddsd	%xmm1, %xmm0, %xmm0
; │└
	retq
	nopl	(%rax)
; └
----

=== Depuração

Os macros +Logging+ fornecem uma alternativa a andaimes com declarações print:
(((@warn)))((("macro", "Base", "@warn", see="@warn")))(((debugging)))

[source,jlcon]
----
julia> @warn "Abandone a depuração com printf, saudações a quem entra aqui!"
┌ Warning: Abandone a depuração com printf, saudações a quem entra aqui!
└ @ Main REPL[1]:1
----

As declarações debug não precisam ser removidas da fonte. Por exemplo, em contraste com o +@warn+ acima:
(((declaração debug)))(((@debug)))((("macro", "Base", "@debug", see="@debug")))

[source,jlcon]
----
julia> @debug "A soma de alguns valores é $(sum(rand(100)))"

----

Não irá gerar nenhuma saída por padrão. Neste caso +sum(rand(100))+ nunca ira ser avaliada a não ser que o _debug logging_ esteja habilitado.
(((debug logging)))

O nível de logging pode ser selecionado por uma variável de ambiente chamada +JULIA_DEBUG+:
(((variável de ambiente)))

[source]
----
$ JULIA_DEBUG=all julia -e '@debug "A soma de alguns valores é $(sum(rand(100)))"'
┌ Debug:  A soma de alguns valores é 47.116520814555024
└ @ Main none:1
----

Aqui, nós usamos +all+ para obter toda informação de depuração, mas você também pode escolher gerar somente a saída para um arquivo ou módulo específico.


=== Glossário

regex::
Expressão regular, uma sequência de caracteres que definem um padrão de busca;
(((regex)))

matriz::
Um array bidimensional.
(((matriz)))

representação intermediária::
Uma estrutura de dados usada internamente pelo compilador para representar código fonte.
(((representação intermediária)))

código de máquina::
Instruções de linguagem que podem ser executadas diretamente por uma unidade central de processamento (CPU) de um computador.
(((código de máquina)))

debug logging::
Guardar mensagem de depuração em um log
(((debug logging)))
