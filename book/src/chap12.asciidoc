[[chap12]]
== Tuplas

Este capítulo apresenta mais um tipo interno, a tupla, e mostra como os arrays, dicionários e as tuplas trabalham juntos. Também apresento um recurso útil para os arrays de argumentos de tamanho variável, operadores de agrupamento e de separação.

//[NOTE]
//====
//Observação: Não há consenso sobre a pronúncia de "tupla" em inglês. Algumas pessoas dizem "tuh-ple", que rima com "supple". Mas no contexto da programação, a maioria das pessoas fala "too-ple", que rima com "quadruple".
//====


=== Tuplas são Imutáveis

Uma tupla é uma sequência de valores. Estes valores podem ser de qualquer tipo e são indexados por números inteiros; logo, neste aspecto, as tuplas são muito similares a arrays. A diferença importante é que as tuplas são imutáveis e que cada elemento pode ter seu próprio tipo.
(((tupla)))(((imutável)))

Sintaticamente, uma tupla é uma lista de valores separados por vírgula:

[source,@julia-repl-test]
----
julia> t = 'a', 'b', 'c', 'd', 'e'
('a', 'b', 'c', 'd', 'e')
----

Apesar de não ser necessário, é comum colocar tuplas entre parênteses:
(((parênteses)))

[source,@julia-repl-test]
----
julia> t = ('a', 'b', 'c', 'd', 'e')
('a', 'b', 'c', 'd', 'e')
----

Para criar uma tupla com um único elemento, tem que inserir uma vírgula final:
(((vírgula final)))(((typeof)))(((Tuple)))((("tipo", "Base", "Tuple", see="Tuple")))

[source,@julia-repl-test]
----
julia> t1 = ('a',)
('a',)
julia> typeof(t1)
Tuple{Char}
----

[WARNING]
====
Um único valor entre parênteses sem vírgula não é uma tupla:

[source,@julia-repl-test]
----
julia> t2 = ('a')
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
julia> typeof(t2)
Char
----

====

Outra maneira de criar uma tupla é por meio da função interna +tuple+. Sem nenhum argumento, uma tupla vazia é criada:
(((tupla)))((("função", "Base", "tuple", see="tuple")))

[source,@julia-repl-test]
----
julia> tuple()
()
----

Se vários argumentos são fornecidos, o resultado é uma tupla com os argumentos dados:

[source,@julia-repl-test]
----
julia> t3 = tuple(1, 'a', pi)
(1, 'a', π)
----

Já que +tuple+ é o nome de uma função interna, deve-se evitar usá-lo como o nome de variável.

A maioria dos operadores de array também funciona com as tuplas. O operador colchete indexa um elemento:
(((operador colchete)))

[source,@julia-repl-test chap12]
----
julia> t = ('a', 'b', 'c', 'd', 'e');

julia> t[1]
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
----

E o operador de fatia seleciona uma faixa de elementos:
(((operador de fatia)))

[source,@julia-repl-test chap12]
----
julia> t[2:4]
('b', 'c', 'd')
----

E caso você tente modificar um dos elementos da tupla, uma mensagem de erro aparecerá:
(((MethodError)))

[source,@julia-repl-test chap12]
----
julia> t[1] = 'A'
ERROR: MethodError: no method matching setindex!(::NTuple{5,Char}, ::Char, ::Int64)
----

Já que as tuplas são imutáveis, você não pode modificar os elementos.

Os operadores relacionais trabalham com tuplas e outras sequências; em Julia, começa-se comparando o primeiro elemento de cada sequência. Se forem iguais, passa-se para os elementos seguintes, e assim por diante, até encontrar elementos que diferem. Após isso, os elementos seguintes são desconsiderados (ainda que sejam realmente grandes).
(((operador relacional)))

[source,@julia-repl-test]
----
julia> (0, 1, 2) < (0, 3, 4)
true
julia> (0, 1, 2000000) < (0, 3, 4)
true
----


=== Atribuição de Tuplas

Muitas vezes, deseja-se permutar os valores de duas variáveis. Nas atribuições convencionais, você tem que usar uma variável temporária. Por exemplo, para permutar as variáveis a e b:
(((atribuição)))

[source,julia]
----
temp = a
a = b
b = temp
----

Essa solução é trabalhosa; já a atribuição da tupla é mais elegante:
(((atribuição de tupla)))

[source,julia]
----
a, b = b, a
----

O lado esquerdo é uma tupla de variáveis; o lado direito é uma tupla de expressões. Cada valor é atribuído à sua correspondente variável. Todas as expressões no lado direito são avaliadas antes de qualquer uma das atribuições.

O número de variáveis do lado esquerdo não deve ser maior do que o número de valores do lado direito:
(((BoundsError)))

[source,@julia-repl-test]
----
julia> (a, b) = (1, 2, 3)
(1, 2, 3)
julia> a, b, c = 1, 2
ERROR: BoundsError: attempt to access (1, 2)
  at index [3]
----

Geralmente, o lado direito pode ser qualquer tipo de sequência (string, array ou tupla). Por exemplo, ao dividir um endereço de e-mail em um nome de usuário e um domínio, poderia-se escrever:
(((dividir)))

[source,@julia-repl-test chap12]
----
julia> email = "júlio.césar@roma"
"júlio.césar@roma"
julia> nome_usuário, domínio = split(email, '@');

----

O valor de retorno de +split+ é um array com dois elementos; o primeiro elemento é atribuído a +nome_usuário+ e o segundo a +domínio+.

[source,@julia-repl-test chap12]
----
julia> nome_usuário
"júlio.césar"
julia> domínio
"roma"
----


=== Tuplas como Valores de Retorno

A princípio, uma função pode retornar apenas um valor, mas se o valor for uma tupla, é como se devolvesse vários valores. Por exemplo, se você deseja dividir dois números inteiros e calcular o quociente e o restante, é ineficiente calcular +x ÷ y+ e depois +x % y+. É melhor fazer os dois cálculos ao mesmo tempo.
(((÷))) (((%)))

A função embutida +divrem+ recebe dois argumentos e retorna uma tupla de dois valores: o quociente e o restante, respectivamente. O resultado pode ser armazenado como uma tupla:
(((divrem)))((("função", "Base", "divrem", see= "divrem")))

[source,@julia-repl-test]
----
julia> t = divrem(7, 3)
(2, 1)
----

Ou use a atribuição de tupla para armazenar os elementos separadamente:

[source,@julia-repl-test]
----
julia> q, r = divrem(7, 3);

julia> @show q r;
q = 2
r = 1
----

Eis um exemplo de uma função que retorna uma tupla:
(((minmax)))((("função","definido pelo programador","minmax", see="minmax")))

[source,@julia-setup]
----
function minmax(t)
    minimum(t), maximum(t)
end
----

+maximum+ e +minimum+ são funções internas que encontram o maior e o menor elemento de uma sequência. +minmax+ calcula os dois e retorna-os por meio de uma tupla. Já a função interna +extrema+ é mais eficiente.
(((maximum)))(((minimum)))(((extrema)))((("função", "Base", "maximum", see="maximum")))((("função" , "Base", "minimum", see="minimum")))((("função","Base", "extrema", see="extrema")))

=== Tuplas com Argumentos de Comprimento Variável

As funções podem receber um número variável de argumentos. Um nome de parâmetro que termina com +pass:[...]+ _agrupa_ argumentos em uma tupla. Por exemplo, +printall+ pega qualquer número de argumentos e os imprime:
(((agrupa)))((((...)))((((printall)))((("função", "definido pelo programador", "printall", see="printall")))

[source,@julia-setup chap12]
----
function printall(args...)
    println(args)
end
----

O parâmetro de agrupamento pode ter qualquer nome que você goste, mas +args+ é padronizado. Veja como funciona a função:

[source,@julia-repl-test chap12]
----
julia> printall(1, 2.0, '3')
(1, 2.0, '3')
----

O complemento do agrupamento é a _separação_. Se você tem uma seqüência de valores e quiser passá-la para uma função com diversos argumentos, pode-se usar o operador +pass:[...]+. No exemplo seguinte, +divrem+ recebe exatamente dois argumentos e não funciona com uma tupla:
(((separação)))(((MethodError)))

[source,@julia-repl-test chap12]
----
julia> t = (7, 3);

julia> divrem(t)
ERROR: MethodError: no method matching divrem(::Tuple{Int64,Int64})
----

Mas se você separar a tupla, o comando funcionará:

[source,@julia-repl-test chap12]
----
julia> divrem(t...)
(2, 1)
----

Muitas das funções embutidas usam tuplas com argumentos de comprimento variável. Por exemplo, +max+ e +min+ podem receber qualquer número de argumentos:
(((max)))(((min)))((("função", "Base", "max", see="max")))((("função", "Base", "min", see="min")))

[source,@julia-repl-test]
----
julia> max(1, 2, 3)
3
----

Mas +sum+, não:
(((sum)))

[source,@julia-repl-test]
----
julia> sum(1, 2, 3)
ERROR: MethodError: no method matching sum(::Int64, ::Int64, ::Int64)
----

===== Exercício 12-1

Escreva uma função chamada +soma_tudo+ que recebe qualquer número de argumentos e devolve o resultado da soma deles.
((((soma_tudo)))((("função", "definido pelo programador", "soma_tudo", see="soma_tudo"))))

No mundo de Julia, agrupar é chamado de "slurp" e separar de "splat".


=== Arrays e Tuplas

+zip+ é uma função interna que recebe duas ou mais sequências e retorna uma coleção de tuplas em que cada tupla contém um elemento de cada sequência. O nome da função refere-se a um zíper, que une e intercala duas faixas de dentes.
(((zip)))((("função", "Base", "zip", see="zip")))

Este exemplo intercala uma string com uma matriz:

[source,@julia-repl-test chap12]
----
julia> s = "abc";

julia> t = [1, 2, 3];

julia> zip(s, t)
Base.Iterators.Zip{Tuple{String,Array{Int64,1}}}(("abc", [1, 2, 3]))
----

O resultado é um _objeto zip_ que sabe como iterar através dos pares. O uso mais comum de +zip+ ocorre em um laço +for+:
(((objeto zip)))(((declaração for)))

[source,@julia-repl-test chap12]
----
julia> for par in zip(s, t)
           println(par)
       end
('a', 1)
('b', 2)
('c', 3)
----

O objeto zip é um tipo de _iterador_, um objeto usado para percorrer uma sequência. De uma certa forma, os iteradores são similares aos arrays, e o que difere dos arrays é que não se pode usar um índice para selecionar um elemento a partir de um iterador.
(((iterador)))

Se você quiser usar operadores e funções de arrays, pode-se usar um objeto zip para gerar um array:
(((collect)))

[source,@julia-repl-test chap12]
----
julia> collect(zip(s, t))
3-element Array{Tuple{Char,Int64},1}:
 ('a', 1)
 ('b', 2)
 ('c', 3)
----

O resultado é um array de tuplas; e neste exemplo, cada tupla contém um caractere da string e o elemento correspondente do array.

Se as sequências não tiverem o mesmo comprimento, o resultado terá o comprimento da menor sequência.

[source,@julia-repl-test]
----
julia> collect(zip("Anna", "Rui"))
3-element Array{Tuple{Char,Char},1}:
 ('A', 'R')
 ('n', 'u')
 ('n', 'i')
----

Você pode usar a atribuição de tupla em um laço +for+ para percorrer um array de tupla:
(((atribuição de tupla)))

[source,@julia-repl-test]
----
julia> t = [('a', 1), ('b', 2), ('c', 3)];

julia> for (letra, número) in t
           println(número, " ", letra)
       end
1 a
2 b
3 c
----

A cada iteração do laço, Julia seleciona a próxima tupla no array e atribui os elementos à letra e ao número. Os parênteses em torno de +(letra, número)+ são necessários.
(((parênteses)))

Se você combinar +zip+, +for+ e a atribuição de tuplas, obtém-se uma função prática para analisar duas (ou mais) seqüências ao mesmo tempo. Por exemplo, +tem_combinação+ considera duas seqüências, +t1+ e +t2+, e devolve +true+ se existir um índice +i+ tal que +t1[i] == t2[i]+:
(((tem_combinação)))((("função", "definido pelo programador", "tem_combinação", see="tem_combinação")))

[source,@julia-setup chap12]
----
function tem_combinação(t1, t2)
    for (x, y) in zip(t1, t2)
        if x == y
            return true
        end
    end
    false
end
----

Se você precisa percorrer os elementos de uma sequência e os seus índices, pode-se usar a função interna +enumerate+:
(((enumerate)))((("função", "Base", "enumerate", see="enumerate")))

[source,@julia-repl-test chap12]
----
julia> for (índice, elemento) in enumerate("abc")
           println(índice, " ", elemento)
       end
1 a
2 b
3 c
----

O resultado de +enumerate+ é um objeto enumerado, que itera sobre uma seqüência de pares onde cada par contém um índice (a partir de 1) e um elemento da seqüência dada.


=== Dicionários e Tuplas

Os dicionários podem ser usados como iteradores dos pares chave-valor. Você pode usá-lo em um laço +for+ como este:
(((par chave-valor)))(((declaração for)))

[source,@julia-repl-test]
----
julia> d = Dict('a'=>1, 'b'=>2, 'c'=>3);

julia> for (chave, valor) in d
           println(chave, " ", valor)
       end
a 1
c 3
b 2
----

Como é de se esperar de um dicionário, os itens não estão em nenhuma específica ordem.

Indo na outra direção, você pode usar um array de tuplas para inicializar um novo dicionário:

[source,@julia-repl-test]
----
julia> t = [('a', 1), ('c', 3), ('b', 2)];

julia> d = Dict(t)
Dict{Char,Int64} with 3 entries:
  'a' => 1
  'c' => 3
  'b' => 2
----

A combinação de +Dict+ com +zip+ resulta numa maneira concisa de criar um dicionário:
(((zip)))

[source,@julia-repl-test]
----
julia> d = Dict(zip("abc", 1:3))
Dict{Char,Int64} with 3 entries:
  'a' => 1
  'c' => 3
  'b' => 2
----

É comum utilizar tuplas como chaves nos dicionários. Por exemplo, uma lista telefônica pode mapear os pares de sobrenome e nome até os números de telefone. Supondo que definimos +sobrenome+, +nome+ e +número+, poderíamos escrever:

[source,julia]
----
diretório[sobrenome, nome] = número
----

A expressão entre parênteses é uma tupla. Poderíamos usar a atribuição de tuplas para percorrer este dicionário.

[source,julia]
----
for ((sobrenome, nome), número) in diretório
    println(nome, " ", sobrenome, " ", número)
end
----

Este laço percorre os pares chave-valor em +diretório+, que são tuplas. Ele atribui os elementos da chave em cada tupla +sobrenome+ e +nome+ ao valor em +número+, e então imprime o nome completo e o número de telefone correspondente.

Existem duas maneiras de representar tuplas em um diagrama de estados. A versão mais detalhada mostra os índices e os elementos exatamente como eles aparecem em um array. Por exemplo, a tupla +("Carlos", "João")+ apareceria como no <<fig12-1>>.
(((diagrama de estado)))

[[fig12-1]]
.Diagrama de estado
image::images/fig121.svg[]


Mas em um diagrama maior, você pode ocultar os detalhes. Por exemplo, um diagrama da lista telefônica pode ser impresso como em <<fig12-2>>.
(((diagrama de estado)))

[[fig12-2]]
.Diagrama de estado
image::images/fig122.svg[]


Aqui, as tuplas são mostradas com a sintaxe do Julia para simplificar o diagrama. O número de telefone no diagrama é a linha de reclamações da BBC; sendo assim, não ligue para lá.


=== Sequências de Sequências

Tenho focado em arrays de tuplas, mas quase todos os exemplos neste capítulo também funcionam com arrays de arrays, tuplas de tuplas, e tuplas de arrays. Para evitar listar as possíveis combinações, às vezes é mais fácil falar sobre seqüências de seqüências.
(((seqüência de seqüências)))

Em muitos contextos, os diferentes tipos de seqüências (strings, arrays e tuplas) podem ser usados de forma intercambiável. Então, como você deve escolher um ao invés dos outros?
(((string)))(((array)))(((tupla)))

Para começar com o óbvio, as strings são mais limitadas que as outras sequências porque os elementos precisam ser caracteres, além de serem imutáveis. Se você possivelmente precisar mudar os caracteres de uma string (ao invés de criar uma nova string), convém usar um array de caracteres em seu lugar.
((((imutável)))

Arrays são mais comuns que tuplas, principalmente porque são mutáveis. Mas existem algumas situações em que você pode preferir as tuplas:
(((mutável)))

* Em algumas circunstâncias, como uma declaração return, sintaticamente é mais simples criar uma tupla do que um array.

* Se você estiver passando uma sequência como argumento para uma função, o uso de tuplas reduz potencialmente o comportamento inesperado causado por um alias.
(((alias)))

* Por motivos de desempenho. O compilador pode ser especializado neste tipo.

Como as tuplas são imutáveis, elas não dispõem de funções como +sort!+ e +reverse!+, que modificam os arrays existentes. Mas Julia possui a função interna +sort+, que recebe um array e devolve um novo array com os mesmos elementos na ordem classificada, e +reverse+, que recebe qualquer sequência e devolve uma sequência do mesmo tipo na ordem contrária.
(((sort)))(((sort!)))(((reverse)))(((reverse!)))(((zip)))((("função", "Base", "reverse ", see="reverse")))(((zip)))((("função","Base","reverse!", see="reverse!")))


=== Debugging

Arrays, dicionários e tuplas são exemplos de _estruturas de dados_; neste capítulo, começamos a ver estruturas de dados compostas, como arrays de tuplas ou dicionários que contêm tuplas como chaves e arrays como valores. As estruturas de dados compostas são práticas, embora sejam propensas ao que chamo de _erros de forma_; isto é, erros causados ​​quando uma estrutura de dados tem o tipo, tamanho ou estrutura incorreta. Por exemplo, se você está esperando um array com um número inteiro e eu fornecer um número inteiro (que não é um array), não funcionará.
(((debugging)))(((estruturas de dados)))(((erro de forma))))

Julia permite anexar um tipo aos elementos de uma sequência. As informações de como isso é feito está em <<chap17>>. A especificação do tipo elimina muitos erros de forma.


=== Glossário

tupla::
Uma sequência imutável de elementos onde cada elemento pode ter seu próprio tipo.
(((tupla)))

atribuição de tupla::
Uma atribuição com uma sequência no lado direito e uma tupla de variáveis no lado esquerdo. O lado direito é avaliado para que seus elementos sejam atribuídos às variáveis do lado esquerdo.
((((atribuição de tupla)))

agrupamento::
A operação de geração de uma tupla com argumentos de comprimento variável.
(((agrupamento)))

separação::
A operação de tratamento de uma sequência como uma lista de argumentos.
(((separação)))

objeto zip::
O resultado da chamada de uma função interna +zip+; um objeto que itera através de uma sequência de tuplas.
(((objeto zip)))

iterador::
Um objeto que pode iterar por uma sequência, mas que não dispõe de operadores e funções de array.
(((iterador)))

estrutura de dados::
Uma coleção de valores relacionados, frequentemente estruturados em array, dicionários, tuplas, etc.
(((estrutura de dados)))

erro de forma::
Um erro causado quando um valor tem a forma errada; ou seja, o tipo ou tamanho errado.
(((erro de forma)))


=== Exercícios

[[ex12-1]]
===== Exercício 12-2

Escreva uma função chamada +mais_frequente+ que recebe uma string e imprime as letras em ordem decrescente de frequência. Procure amostras de texto de diversos idiomas diferentes e verifique como a frequência das letras varia entre os idiomas. Compare seus resultados com as tabelas em https://pt.wikipedia.org/wiki/Frequência_de_letras.
(((mais_frequente)))((("função", "definido pelo programador", "mais_frequente", see="mais_frequente")))

[[ex12-2]]
===== Exercício 12-3

Mais anagramas!

. Escreva um programa que leia uma lista de palavras de um arquivo (veja <<reading_word_lists>>) e mostre todos os conjuntos de palavras que são anagramas.
+
Aqui está um exemplo de como pode ser a saída:
+
[source,julia]
----
["deltas", "desalt", "lasted", "salted", "slated", "staled"]
["retainers", "ternaries"]
["generating", "greatening"]
["resmelts", "smelters", "termless"]
----
+
[TIP]
====
Você pode querer construir um dicionário que mapeia uma coleção de letras até um array de palavras que podem ser soletradas com essas letras. A questão é: como você pode representar a coleção de letras de uma forma que ela possa ser usada como chave?
====

. Modifique o programa anterior para imprimir primeiro o maior array de anagramas, seguida pelo segundo mais longo e assim por diante.

. No Scrabble, um "bingo" é quando você joga usa as sete peças do seu suporte, juntamente com uma letra no tabuleiro, para formar uma palavra de oito letras. Qual é a coleção de oito letras que forma o maior número possível de bingos?

[[ex12-3]]
===== Exercício 12-4

Duas palavras formam um “par de metátese“ se você puder transformar uma na outra trocando duas letras, como no caso de "converse" e "conserve". Escreva um programa que encontre todos os pares de metáteses no dicionário.
(((par de metátese)))

[TIP]
====
Não teste todos os pares de palavras e nem todas as trocas possíveis.
====

Crédito: Este exercício é inspirado em um exemplo em http://puzzlers.org.

[[ex12-4]]
===== Exercício 12-5

Aqui está outro desafio do programa Car Talk (https://www.cartalk.com/puzzler/browse):
(((Car Talk)))

[quote]
____
Qual é a palavra em inglês mais longa, que permanece uma palavra válida em inglês à medida que você remove as letras uma de cada vez?

Agora, as letras podem ser removidas de qualquer posição e não pode rearranjar nenhuma das letras. Toda vez que você retira uma letra, você termina com outra palavra em inglês. Se você fizer isso, acabará terminando com uma letra e essa também será uma palavra em inglês que pode ser encontrada no dicionário. Quero saber qual é a palavra mais longa e quantas letras ela tem?

Vou dar um exemplo modesto: Sprite. OK? Você começa com sprite, tira a letra r no meio da palavra e ficamos com a palavra spite, depois tiramos a letra e no final e ficamos com spit, tiramos a letra s e ficamos com pit, it e I.
____

Escreva um programa para encontrar todas as palavras em inglês que podem ser reduzidas desta forma, e depois encontre a mais longa.

[TIP]
====
Este exercício é um pouco mais desafiador do que a maioria, então aqui vai algumas sugestões:

. Você pode escrever uma função que recebe uma palavra e obtenha um array de todas as palavras que podem ser formadas removendo uma letra. Este array contém os “filhos” da palavra.

. Recursivamente, uma palavra é redutível se algum de seus filhos for redutível. Como caso base, pode-se considerar a string vazia redutível.
(((redutível)))

. A lista de palavras que disponibilizei ( _palavras.txt_ do cap. 9) não contém palavras com uma única letra. Então, você pode querer colocar “I”, “a” e a string vazia.

. Para melhorar o desempenho do seu programa, convém guardar as palavras que são conhecidas por serem redutíveis.
(((memorando)))
====
