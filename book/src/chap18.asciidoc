[[chap18]]
== Subtipagem

No capítulo anterior, introduzimos o mecanismo de despacho múltiplo e o polimorfismo. A ausência da especificação dos tipos dos argumentos resulta em um método que pode ser chamado com argumentos de qualquer tipo. A especificação de um subconjunto dos tipos permitidos na assinatura de um método é um próximo passo lógico.

Neste capítulo, demonstramos a subtipagem utilizando os tipos que representam as cartas de jogo, os baralhos de cartas e as mãos de pôquer.

Se você não joga pôquer, pode ler sobre isso em https://pt.wikipedia.org/wiki/P%C3%B4quer, mas não precisa pois vamos lhe dizer o que se tem que saber para os exercícios.


=== Cartas

Há 52 cartas em um baralho, cada uma pertencendo a um dos quatro naipes e uma das treze cartas de valores diferentes. Os naipes são Espadas (+♠+), Copas (+♥+), Ouro (+♦+) e Paus (+♣+). Os valores são Ás (A), 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete (J), Rainha (Q) e Rei (K). Dependendo do jogo que você está jogando, um Ás pode ser maior que o rei ou menor que 2.

Se queremos definir um novo objeto para representar uma carta de baralho, é óbvio quais devem ser os atributos: o valor e o naipe. Mas não é tão óbvio que tipo de atributo deve ser. Uma possibilidade é usar strings contendo palavras como +"Espadas"+ para os naipes e +"Rainha"+ para os valores. Um problema com essa implementação é que não seria fácil comparar as cartas para ver quais teriam maior valor ou naipe.

Uma alternativa é usar números inteiros para _codificar_ os valores e os naipes. Nesse contexto, “codificar” significa que vamos definir um mapeamento entre os números e naipes, ou entre os números e valores do baralho. Esse tipo de codificação não é para ser secreto (isso seria “criptografia”).
(((codificar)))

Por exemplo, esta tabela mostra os naipes e os números inteiros correspondentes:

* +♠+  latexmath:[\(\mapsto\)]  4

* +♥+  latexmath:[\(\mapsto\)]  3

* +♦+  latexmath:[\(\mapsto\)]  2

* +♣+  latexmath:[\(\mapsto\)]  1

Este código facilita a comparação das cartas, já que os naipes mais valorizados estão relacionados com números mais altos e podemos comparar os naipes comparando os seus números.

Estamos usando o símbolo latexmath:[\(\mapsto\)] para deixar claro que essas correspondências não fazem parte do programa Julia. Eles fazem parte da formulação do programa, e não aparecem explicitamente no código.

A definição para struct +Carta+ é parecida com esta:
(((Carta)))((("tipo", "definido pelo programador", "Carta", see="Carta")))

[source,@julia-setup chap18]
----
struct Carta
    naipe :: Int64
    valor :: Int64
    function Carta(naipe::Int64, valor::Int64)
        @assert(1 ≤ naipe ≤ 4, "naipe não está entre 1 e 4")
        @assert(1 ≤ valor ≤ 13, "valor não está entre 1 e 13")
        new(naipe, valor)
    end
end
----

Para criar uma +Carta+, você chama +Carta+ com o naipe e o valor desejado:

[source,@julia-repl-test chap18]
----
julia> rainha_de_ouro = Carta(2, 12)
Carta(2, 12)
----


=== Variáveis Globais

Para imprimir objetos +Carta+ de uma forma que as pessoas possam ler facilmente, precisamos de um mapeamento dos códigos inteiros até os valores e naipes correspondentes. Uma maneira natural de fazer isso é com as listas de strings:

[source,@julia-setup chap18]
----
const nomes_naipes = ["♣", "♦", "♥", "♠"]
const nomes_valores = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
----

As variáveis +nomes_naipes+ e +nomes_valores+ são variáveis globais. A declaração +const+ significa que a variável só pode ser atribuída uma vez. Isso resolve o problema de desempenho das variáveis globais.
(((declaração global)))(((const)))((("palavra-chave", "const", see="const")))

Agora podemos implementar um método +show+ apropriado:
(((show)))

[source,@julia-setup chap18]
----
function Base.show(io::IO, carta::Carta)
    print(io, nomes_valores[carta.valor], nomes_naipes[carta.naipe])
end
----

A expressão +nomes_valores[carta.valor]+ significa “use o campo +valor+ do objeto +carta+ como um índice na matriz +nomes_valores+ e selecione a string apropriada.”

Com os métodos que temos até agora, podemos criar e imprimir as cartas:

[source,@julia-repl-test chap18]
----
julia> Carta(3, 11)
J♥
----


=== Comparando Cartas

Para os tipos embutidos, existem operadores relacionais (+<+, +>+, +==+ etc.) que comparam os valores e determinam quando um é maior que, menor que ou igual ao outro. Para os tipos definidos pelo programador, podemos sobrepor o comportamento dos operadores embutidos ao estabelecer um método chamado +<+.

A ordenação correta das cartas não é óbvia. Por exemplo, qual é o melhor, o 3 de Paus ou o 2 de Ouros? Um tem um valor mais alto, mas o outro tem um naipe mais alto. A fim de comparar as cartas, você tem que decidir se o valor ou o naipe é mais importante.

A resposta pode depender de qual jogo você está jogando, mas para simplificar, faremos a escolha arbitrária de que naipe é mais importante, significando que todas cartas de Espadas são superiores as cartas de Diamantes e assim por diante.

Decidido isso, podemos escrever +<+

[source,@julia-setup chap18]
----
import Base.<

function <(c1::Carta, c2::Carta)
    (c1.naipe, c1.valor) < (c2.naipe, c2.valor)
end
----

===== Exercício 18-1

Escreva um método +<+ para os objetos +MeuHorário+. Você pode usar a comparação de tupla, mas também pode considerar a comparação de inteiros.


=== Teste de Unidade


_Teste de unidade_ permite verificar a correção do seu código, comparando os resultados do seu código com o que você espera. Isso pode ser útil para garantir que seu código ainda esteja correto após as modificações, e também é uma maneira de predefinir o comportamento correto do seu código durante o desenvolvimento.
(((teste de unidade)))

Os testes unitários simples podem ser realizados com as macros +@test+:
(((Test)))((("módulo", "Test", see="Test")))(((@test)))((("macro", "Test", "@test", see="@test")))

[source,@julia-repl-test chap18]
----
julia> using Test

julia> @test Carta(1, 4) < Carta(2, 4)
Test Passed
julia> @test Carta(1, 3) < Carta(1, 4)
Test Passed
----

+@test+ retorna +"Test Passed"+ se a expressão seguinte for +true+, +"Test Failed"+ se for +false+, e +"Error Result"+ se não puder ser avaliado.


=== Baralhos

Agora que temos Cartas, o próximo passo é a definição do Baralhos. Como um baralho é composto de cartas, é natural que cada Baralho contenha uma lista de cartas como um atributo.

A seguir, define-se uma struct para +Baralho+. O construtor cria os campos das cartas e gera o conjunto padrão das cinquenta e dois cartas:
(((Deck)))((("tipo", "definido pelo programador", "Deck", see="Deck")))

[source,@julia-setup chap18]
----
struct Baralho
    cartas :: Array{Carta, 1}
end

function Baralho()
    baralho = Baralho(Carta[])
    for naipe in 1:4
        for valor in 1:13
            push!(baralho.cartas, Carta(naipe, valor))
        end
    end
    baralho
end
----

A maneira mais fácil de preencher o baralho é com um laço aninhado. O laço externo enumera os naipes de 1 a 4. O laço interno enumera os valores de 1 a 13. Cada iteração cria uma nova +Carta+ com o naipe e o valor correntes e envia-a para +baralho.cartas+.

Aqui está um método +show+ para +Baralho+:

[source,@julia-setup chap18]
----
function Base.show(io::IO, baralho::Baralho)
    for carta in baralho.cartas
        print(io, carta, " ")
    end
    println()
end
----

Veja como ficou o resultado:

[source,@julia-repl-test chap18]
----
julia> Baralho()
A♣ 2♣ 3♣ 4♣ 5♣ 6♣ 7♣ 8♣ 9♣ 10♣ J♣ Q♣ K♣ A♦ 2♦ 3♦ 4♦ 5♦ 6♦ 7♦ 8♦ 9♦ 10♦ J♦ Q♦ K♦ A♥ 2♥ 3♥ 4♥ 5♥ 6♥ 7♥ 8♥ 9♥ 10♥ J♥ Q♥ K♥ A♠ 2♠ 3♠ 4♠ 5♠ 6♠ 7♠ 8♠ 9♠ 10♠ J♠ Q♠ K♠
----


=== Adicionar, Remover, Embaralhar e Ordenar

Para distribuir as cartas, gostaríamos de uma função que remove uma carta do baralho e devolve-a. A função +pop!+ fornece uma maneira apropriada de fazer isso:
(((pop!)))

[source,@julia-setup chap18]
----
function Base.pop!(baralho::Baralho)
    pop!(baralho.cartas)
end
----

Como +pop!+ remove a última carta do baralho, estamos distribuindo a partir do fundo do baralho.

Para adicionar uma carta, podemos usar a função +push!+:
(((push!)))

[source,@julia-setup chap18]
----
function Base.push!(baralho::Baralho, carta::Carta)
    push!(baralho.cartas, carta)
    baralho
end
----

Um método como esse, que usa outro método sem fazer muito trabalho, às vezes é chamado de _folheado_. A metáfora vem do trabalho com madeira, onde um folheado de madeira é uma fina camada de madeira de boa qualidade colada à superfície de um pedaço de madeira mais barato para melhorar a aparência.
(((folheado)))

Neste caso, +push!+ é um método “fino” que expressa uma operação de lista relativamente apropriado para baralhos. Ele melhora a aparência, ou interface, da implementação.

Como um outro exemplo, podemos escrever um método chamado +shuffle!+ usando a função +Random.shuffle!+:
(((Random)))((("módulo", "Random", see="Random")))(((shuffle!)))((("função", "Random", "shuffle!", see="shuffle!")))

[source,@julia-setup chap18]
----
using Random

function Random.shuffle!(baralho::Baralho)
    shuffle!(baralho.cartas)
    baralho
end
----

===== Exercício 18-2

Escreva uma função chamada +sort!+ que usa a função +sort!+ para ordenar as cartas em um Baralho. A função +sort!+ usa o método +isless+ na nossa definição para a ordenação.
(((sort!)))


=== Tipos Abstratos e Subtipagem

Queremos um tipo que represente uma “mão”, ou seja, as cartas que estão nas mãos de um jogador. Uma mão é semelhante a um baralho: ambas são compostas de uma coleção de cartas, e ambas precisam de operações como adicionar e remover cartas.

Uma mão também é diferente de um baralho; existem operações que queremos para as mãos de cartas que não faz sentido para um baralho. Por exemplo, no pôquer, podemos comparar duas mãos para ver qual delas vence. No bridge, podemos calcular uma pontuação para uma mão para fazer um lance.

Portanto, precisamos de uma maneira de agrupar os _tipos concretos_ relacionados. No Julia, isso é feito ao definir um _tipo abstrato_ que serve como o progenitor de +Baralho+ e +Mão+. Isso é chamado _subtipagem_.
(((tipo concreto)))(((tipo abstrato)))(((subtipagem)))

Vamos nomear esse tipo abstrato de +Conjunto_Carta+:
(((Conjunto_Carta)))((("tipo", "definido pelo programador", "Conjunto_Carta", see="Conjunto_Carta")))

[source,@julia-eval chap18a]
----
struct Carta
    naipe :: Int64
    valor :: Int64
    function Carta(naipe::Int64, valor::Int64)
        @assert(1 ≤ naipe ≤ 4, "naipe está entre 1 e 4")
        @assert(1 ≤ valor ≤ 13, "valor está entre 1 e 13")
        new(naipe, valor)
    end
end;
----

[source,@julia-setup chap18a]
----
abstract type Conjunto_Carta end
----

Um novo tipo abstrato é criado com a palavra-chave +abstract type+. Um tipo “progenitor” opcional pode ser especificado colocando +<:+ após o nome seguido do nome de um tipo abstrato já existente.
(((tipo abstrato)))((("palavra-chave", "abstract type", see="abstract type")))(((tipo)))

Quando nenhum _supertipo_ é dado, o supertipo padrão é +Any+ - um tipo abstrato predefinido do qual todos os objetos são instâncias e todos os tipos são _subtipos_.
(((supertipo)))(((subtipo)))

Agora podemos expressar que +Baralho+ é um descendente de +Conjunto_Carta+:

[source,@julia-setup chap18a]
----
struct Baralho <: Conjunto_Carta
    cartas :: Array{Carta, 1}
end

function Baralho()
    baralho = Baralho(Carta[])
    for naipe in 1:4
        for valor in 1:13
            push!(baralho.cartas, Carta(naipe, valor))
        end
    end
    baralho
end
----

[source,@julia-eval chap18a]
----
using Random

const nomes_naipes = ["♣", "♦", "♥", "♠"];
const nomes_valores = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"];

function Base.show(io::IO, carta::Carta)
    print(io, nomes_valores[carta.valor], nomes_naipes[carta.naipe])
end

function Random.shuffle!(baralho::Baralho)
    shuffle!(baralho.cartas)
    baralho
end
----

O operador +isa+ verifica se um objeto é de um determinado tipo:
(((isa)))((("operador", "Base", "isa", see="isa")))

[source,@julia-repl-test chap18a]
----
julia> baralho = Baralho();

julia> baralho isa Conjunto_Carta
true
----

Uma mão também é um tipo de +Conjunto_Carta+:
(((Mão)))((("tipo", "definido pelo programador", "Mão", see="Mão")))

[source,@julia-setup chap18a]
----
struct Mão <: Conjunto_Carta
    carta :: Array{Carta, 1}
    identificação :: String
end

function Mão(identificação::String="")
    Mão(Carta[], identificação)
end
----

Em vez de encher a mão com 52 novas cartas, o construtor de +Mão+ inicializa +cartas+ com uma lista vazia. Um argumento opcional pode ser passado para o construtor, atribuindo uma identificação para a +Mão+.

[source,@julia-repl-test chap18a]
----
julia> mão = Mão("nova mão")
Mão(Carta[], "nova mão")
----


=== Tipos Abstratos e Funções

Agora podemos expressar as operações comuns entre +Baralho+ e +Mão+ como funções tendo como argumento +Conjunto_Carta+:
(((show)))(((pop!)))(((push!)))

[source,@julia-setup chap18a]
----
function Base.show(io::IO, cc::Conjunto_Carta)
    for carta in cc.cartas
        print(io, carta, " ")
    end
end

function Base.pop!(cc::Conjunto_Carta)
    pop!(cc.cartas)
end

function Base.push!(cc::Conjunto_Carta, carta::Carta)
    push!(cc.cartas, carta)
    nothing
end
----

Podemos usar +pop!+ e +push!+ para dar uma carta:

[source,@julia-repl chap18a]
----
baralho = Baralho()
shuffle!(baralho)
carta = pop!(baralho)
push!(mão, carta)
----

Um próximo passo natural é encapsular esse código em uma função chamada +move!+:
(((move!)))((("função", "definido pelo programador", "move!", see="move!")))

[source,@julia-setup chap18a]
----
function move!(cc1::Conjunto_Carta, cc2::Conjunto_Carta, n::Int)
    @assert 1 ≤ n ≤ length(cc1.cartas)
    for i in 1:n
        carta = pop!(cc1)
        push!(cc2, carta)
    end
    nothing
end
----

A função +move!+ recebe três argumentos, dois objetos +Conjunto_Carta+ e o número de cartas a serem distribuídas. Ela modifica os objetos +Conjunto_Carta+ e retorna +nothing+.

Em alguns jogos, as cartas são transferidas de uma mão para outra ou de uma mão para o baralho. Você pode usar +move!+ para qualquer uma dessas operações já que +cc1+ e +cc2+ podem ser ou um +Baralho+ ou uma +Mão+.


=== Diagramas de Tipos

Até agora temos visto os diagramas de pilha, que mostram o estado de um programa, e os diagramas de objeto, que mostram os atributos de um objeto e os seus valores. Estes diagramas são como um retrato na execução de um programa, portanto eles mudam conforme o programa é executado.

Eles também são muito detalhados e dependendo de alguns propósitos, demasiadamente detalhados. Um _diagrama de tipo_ é uma representação mais abstrata da estrutura de um programa. Ao invés de mostrar objetos individuais, ele mostra os tipos e as relações entre eles.
(((diagrama de tipo)))((("diagrama", "tipo", see="diagrama de tipo")))

Existem vários tipos de relacionamento entre os tipos:

* Objetos de um tipo concreto podem conter referências a objetos de outro tipo. Por exemplo, cada Retângulo contém uma referência a um Ponto, e cada Baralho contém referências a uma lista de Cartas. Este tipo de relacionamento é chamado de _TEM-UM_, como em “um Retângulo tem um Ponto”.
(((TEM-UM)))

* Um tipo concreto pode ter um tipo abstrato como um supertipo. Esse relacionamento é chamado de _É-UM_, como em “uma Mão é uma espécie de Conjunto_Carta”.
(((É-UM)))

* Um tipo pode depender do outro no sentido de que os objetos de um tipo recebem os objetos do segundo tipo como parâmetros ou usam os objetos do segundo tipo como parte de um cálculo. Esse tipo de relacionamento é denominado _dependência_.
(((dependência)))

[[fig18-1]]
.Diagrama de Tipo
image::images/fig181.svg[]

A flecha com uma ponta de triângulo oco representa um relacionamento É-UM; e neste caso, indica que a Mão tem como supertipo o Conjunto_Carta.

A ponta da seta padrão representa um relacionamento TEM-UM e neste caso, um Baralho tem referências aos objetos de Carta.

A estrela (+pass:[*]+) perto da ponta da seta é uma _multiplicidade_ que indica a quantidade de Cartas que um Baralho tem. Uma multiplicidade pode ser um número simples, como +52+, um intervalo, +como 5:7+ ou uma estrela, que indica que um Baralho pode ter qualquer número de Cartas.
(((multiplicidade)))

Não há dependências neste diagrama. Elas usualmente seriam mostradas com uma seta tracejada. E caso haja muitas dependências, elas são às vezes omitidas.

Um diagrama mais detalhado pode mostrar que um Baralho realmente contém uma lista de Cartas, mas tipos internos como uma lista e dicionários geralmente não são inclusos nos diagramas de tipo.

[[interactive]]
=== Depuração

A subtipagem pode dificultar a depuração, porque quando você chama uma função com um objeto como argumento, pode ser difícil descobrir qual método será chamado.

Suponha que você está escrevendo uma função que funciona com os objetos +Mão+. Você gostaria que ela funcionasse com todos os tipos de +Mão+s, como +Mãos de Pôquer+, +Mãos de Bridge+, etc. Se você chamar um método como +sort!+, pode ter chamado o que foi definido para um tipo abstrato +Mão+, mas se um método +sort!+ com qualquer um dos subtipos como argumento existir, você terá essa versão em seu lugar. Este comportamento é normalmente uma coisa boa, mas pode ser confuso.

[source,@julia-setup chap18a]
----
function Base.sort!(mão::Mão)
    sort!(mão.cartas)
end
----

Sempre que você não tiver certeza sobre o fluxo de execução do seu programa, a solução mais simples é adicionar comandos de impressão no início dos métodos relevantes. Se +shuffle!+ imprime uma mensagem que diz algo como +Executando shuffle! Baralho+, à medida que o programa é executado, rastreia-se o fluxo de execução.

Como uma alternativa melhor, você também pode usar a macro +@which+:
(((InteractiveUtils)))((("módulo", "InteractiveUtils", see="InteractiveUtils")))(((@which)))((("macro", "InteractiveUtils", "@which", see="@which")))

[source,jlcon]
----
julia> @which sort!(mão)
sort!(mão::Mão) in Main at REPL[5]:1
----

Portanto, o método +sort!+ para +mão+ recebe como argumento um objeto do tipo +Mão+.

Eis uma sugestão de design: quando você substitui um método, a interface do novo método deve ser a mesma que a do antigo. Ele deve receber os mesmos parâmetros, retornar o mesmo tipo e obedecer às mesmas precondições e pós-condições. Se você seguir esta regra, verá que qualquer função elaborada para trabalhar com uma instância de um supertipo, como um +Conjunto_Carta+, também funcionará com instâncias de seus subtipos +Baralho+ e +Mão+.

Se você violar essa regra, chamada de “princípio de substituição de Liskov”, seu código tombará como (me desculpe) um castelo de cartas.
(((princípio de substituição de Liskov)))

A função +supertype+ pode ser usada para encontrar o supertipo direto de um tipo.
(((supertype)))((("função", "Base", "supertype", see="supertype")))

[source,@julia-repl-test chap18a]
----
julia> supertype(Baralho)
Conjunto_Carta
----


=== Encapsulamento de Dados

Os capítulos anteriores apresentam um plano de desenvolvimento que podemos chamar de “design orientado a tipos”. Identificamos os objetos de que precisamos—como +Ponto+, +Retângulo+ e +MeuHorário+— e definimos estruturas para representá-los. Em cada caso, há uma correspondência óbvia entre o objeto e alguma entidade no mundo real (ou pelo menos em um mundo matemático).
(((design orientado a tipos)))

Mas, às vezes, é menos óbvio de quais objetos você precisa e como eles devem interagir. Nesse caso, precisa-se de um plano de desenvolvimento diferente. Da mesma maneira que descobrimos funções de interface por encapsulamento e generalização, podemos descobrir os tipos de interface por _encapsulamento de dados_.
(((encapsulamento de dados)))

A análise de Markov, de <<markov_analysis>>, fornece um bom exemplo. Se você baixar meu código em https://github.com/JuliaIntro/JuliaIntroBR.jl/blob/master/src/solutions/chap13.jl, verá que ele usa duas variáveis globais—+suffixos+ and +prefixo+—que são lidos e escritos a partir de várias funções.

[source,@julia-setup]
----
sufixos = Dict()
prefixo = []
----

Como estas variáveis são globais, podemos fazer só uma análise por vez. Se lermos dois textos, os seus prefixos e sufixos seriam adicionados às mesmas estruturas de dados (o que faz com que algum texto gerado seja interessante).

Para rodar várias análises e mantê-las separadas, podemos encapsular o estado de cada análise em um objeto. Eis o que isso parece:
(((Markov)))((("tipo", "definido pelo programador", "Markov", see="Markov")))

[source,@julia-setup chap18b]
----
struct Markov
    ordem :: Int64
    suffixos :: Dict{Tuple{String,Vararg{String}}, Array{String, 1}}
    prefixos :: Array{String, 1}
end

function Markov(ordem::Int64=2)
    new(ordem, Dict{Tuple{String,Vararg{String}}, Array{String, 1}}(), Array{String, 1}())
end
----

Em seguida, transformamos as funções em métodos. Por exemplo, aqui está +processa_palavra+:
(((processa_palavra)))((("função", "definido pelo programador", "processa_palavra", see="processa_palavra")))

[source,@julia-setup chap18b]
----
function processa_palavra(markov::Markov, palavra::String)
    if length(markov.prefixo) < markov.ordem
        push!(markov.prefixo, palavra)
        return
    end
    get!(markov.suffixos, (markov.prefixo...,), Array{String, 1}())
    push!(markov.suffixos[(markov.prefixo...,)], palavra)
    popfirst!(markov.prefixo)
    push!(markov.prefixo, palavra)
end
----

Transformar um programa como esse—alterando o design sem alterar o comportamento—é outro exemplo de refatoração (veja <<refactoring>>).
(((refatoração)))(((plano de desenvolvimento do programa)))

Este exemplo sugere um plano de desenvolvimento para elaborar os tipos:

* Comece por escrever funções que leem e escrevem variáveis globais (quando necessário).

* Uma vez que o programa esteja funcionando, procure por associações entre variáveis globais e as funções que as utilizam.

* Encapsule as variáveis relacionadas como os campos de uma estrutura.

* Transforme as funções associadas em métodos que recebem objetos do novo tipo como argumento.

===== Exercício 18-3

Faça o download do meu código Markov em https://github.com/JuliaIntro/JuliaIntroBR.jl/blob/master/src/solutions/chap13.jl e siga os passos descritos acima para encapsular as variáveis globais como atributos de uma nova estrutura denominada +Markov+.


=== Glossário

codificação::
Representação de um conjunto de valores usando outro conjunto de valores através da construção de um mapeamento entre eles.
(((codificação)))

teste de unidade::
Procedimento padronizado para testar o corretismo do código.
(((teste de unidade)))

folheado::
Um método ou uma função que disponibiliza uma interface diferente para outra função sem fazer muito cálculo.
(((folheado)))

subtipagem::
A capacidade de definir uma hierarquia de tipos relacionados.
(((subtipagem)))

tipo abstrato::
Um tipo que pode atuar como progenitor de outro tipo.
(((tipo abstrato)))

tipo concreto::
Um tipo que pode ser construído.
(((tipo concreto)))

subtipo::
Um tipo que tem como progenitor um tipo abstrato.
(((subtipo)))

supertipo::
Um tipo abstrato que é o progenitor de outro tipo.
(((supertipo)))

Relacionamento É-UM::
Um relacionamento entre um subtipo e seu supertipo.
(((relacionamento É-UM)))

Relacionamento TEM-UM::
Um relacionamento entre dois tipos em que as instâncias de um tipo contêm referências às instâncias do outro.
(((relacionamento TEM-UM)))

dependência::
Um relacionamento entre dois tipos em que instâncias de um tipo usam as instâncias do outro tipo, sem armazená-las como campos.
(((dependência)))

diagrama de tipo::
Um diagrama que mostra os tipos de um programa e as relações entre eles.
(((diagrama de tipo)))

multiplicidade::
Uma notação em um diagrama de tipos que mostra, em um relacionamento TEM-UM, a quantidade de referências para as instâncias de outra classe.
(((multiplicidade)))

encapsulamento de dados::
Um plano de desenvolvimento de programa, que consiste em um protótipo que usa variáveis ​​globais e uma versão final que transforma as variáveis ​​globais em campos de uma instância.
(((encapsulamento de dados)))


=== Exercícios

[[ex18-1]]
===== Exercício 18-4

Para o programa seguinte, desenhe um diagrama de tipos que mostre os seus tipos e as relações entre eles.

[source,julia]
----
abstract type PingPongProgenitor end

struct Ping <: PingPongProgenitor
    pong :: PingPongProgenitor
end

struct Pong <: PingPongProgenitor
    pings :: Array{Ping, 1}
    function Pong(pings=Array{Ping, 1}())
        new(pings)
    end
end

function addping(pong::Pong, ping::Ping)
    push!(pong.pings, ping)
    nothing
end

pong = Pong()
ping = Ping(pong)
addping(pong, ping)
----

[[ex18-2]]
===== Exercício 18-5

Escreva um método chamado +dar_carta!+ que recebe três parâmetros, o +Baralho+, o número de mãos e o número de cartas por mão. Ele deve criar o número apropriado de objetos +Mão+, distribuir o número compatível de cartas por mão e retornar uma lista de +Mão+s.
(((dar_carta!)))((("função", "definido pelo programador", "dar_carta!", see="dar_carta!")))

[[ex18-3]]
===== Exercício 18-6

Seguem as jogadas possíveis no pôquer, em ordem crescente de valor e ordem decrescente de probabilidade:

par::
duas cartas com o mesmo valor

dois pares::
dois pares de cartas com o mesmo valor

trinca de um tipo::
três cartas com o mesmo valor

sequência::
cinco cartas com valores em sequência (os Ases podem ser altos ou baixos, então Ás-2-3-4-5 é uma sequência bem como 10-Valete-Rainha-Rei-Ás, mas Rainha-Rei-Ás-2-3 não é.)

flush::
cinco cartas com o mesmo naipe

full house::
três cartas com um valor, duas cartas com outro

quadra de um tipo::
quatro cartas com o mesmo valor

sequência de mesmo naipe::
cinco cartas em sequência (conforme definido acima) e com o mesmo naipe

O objetivo deste exercício é estimar as probabilidades de se tirar estas várias jogadas.

. Adicione métodos chamados +tem_par+, +tem_2pares+, etc. que retornam +true+ ou +false+ se a mão cumpre ou não as regras relevantes. Seu código deve funcionar corretamente para as “mãos” que contém qualquer número de cartas (embora 5 e 7 sejam a quantidade mais comuns).
(((tem_par)))((("função", "definido pelo programador", "tem_par", see="tem_par")))(((tem_2pares)))((("função", "definido pelo programador", "tem_2pares", see="tem_2pares")))

. Escreva um método chamado +classificar+ que calcula a classificação do valor mais alto para uma mão e identifica adequadamente o campo +jogada+. Por exemplo, um mão de 7 cartas pode conter um flush e um par e ele deve ser identificado como “flush”.
(((classificar)))((("função", "definido pelo programador", "classificar", see="classificar")))

. Quando você estiver convencido de que seus métodos de classificação estão funcionando, o próximo passo é estimar as probabilidades das várias jogadas. Escreva uma função que embaralha um baralho de cartas, divide-o em mãos, classifica as mãos e conta o número de vezes que as várias classificações aparecem.

. Imprima uma tabela de classificações e suas probabilidades. Execute seu programa com uma quantidade de mãos cada vez maiores até que os valores de saída convirjam para um grau razoável de precisão. Compare os seus resultados com os valores em https://pt.wikipedia.org/wiki/Lista_de_jogadas_do_p%C3%B4quer.
