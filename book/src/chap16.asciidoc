[[chap16]]
== Estruturas e Funções

Agora que sabemos como criar novos tipos compostos, o próximo passo é escrever funções que recebem objetos definidos pelo programador como parâmetro e retornam estes objetos como resultado. Neste capítulo apresentaremos um “estilo de programação funcional” e dois novos planos de desenvolvimento de programa.

[[time]]
=== Hora

Como outro exemplo de um tipo composto, definiremos uma +struct+ chamada +minha_hora+ que grava a hora do dia. A definição da estrutura se parece como:
(((minha_hora)))((("tipo", "definido pelo programador", "minha_hora", see="minha_hora")))

[source, @julia-setup chap16]
----
"""
Representa a hora do dia.

campos: hora, minuto, segundo
"""
struct minha_hora
    hora
    minuto
    segundo
end
----

O nome +Time+ já é utilizado no Julia e para evitar um conflito de nomes, escolhemos +minha_hora+. Podemos criar um novo objeto +minha_hora_:
(((Time)))((("tipo", "Dates", "Time", see="Time")))

[source,@julia-repl-test chap16]
----
julia> time = minha_hora(11, 59, 30)
minha_hora(11, 59, 30)
----

O diagrama de objeto para +minha_hora+ se parece com a <<fig16-1>>.

[[fig16-1]]
.Diagrama de objeto
image::images/fig161.svg[]

===== Exercício 16-1

Escreva uma função chamada +imprime_hora+ que recebe um objeto +minha_hora+ e imprima-o em forma de +hora:minuto:segundo+. A instrução +@printf+ do módulo StdLib +Printf+ imprime um inteiro com o formato de sequência `"%02d"` usando pelo menos dois dígitos, incluindo um zero inicial se necessário.
(((imprime_hora)))((("função", "definido pelo programador", "imprime_hora", see="imprime_hora")))

===== Exercício 16-2

Escreva uma função booleana chamada +é_depois+ que recebe dois objetos +minha_hora+, +t1+ e +t2+, e retorna +true+ se +t1+ segue +t2+ cronologicamente e +false+ caso contrário. Desafio: não use uma declaração +if+.
(((é_depois)))((("função", "definido pelo programador", "é_depois", see="é_depois")))


=== Funções Puras

Nas próximas seções, escreveremos duas funções que adicionam valores de tempo. Elas demonstrarão dois tipos de funções: funções puras e modificadoras. Elas também demonstrarão um plano de desenvolvimento que chamaremos de _protótipo e correção_, que é uma forma de combater um problema complexo começando com um protótipo simples e aos poucos lidar com as complicações.
(((função pura)))(((protótipo e correção)))

Aqui vai um simples protótipo de +soma_tempo+:
(((soma_tempo)))((("função", "definido pelo programador", "soma_tempo", see="soma_tempo")))

[source,@julia-setup chap16]
----
function soma_tempo(t1, t2)
    minha_hora(t1.hora + t2.hora, t1.minuto + t2.minuto, t1.segundo + t2.segundo)
end
----

A função cria um novo objeto +minha_hora+, inicializando os seus campos e retornando uma referência ao novo objeto. Isso é chamado de _função pura_ pois não modifica nenhum dos objetos que são passados como argumentos e não tem efeito, como exibir um valor ou obter entrada do usuário, além de retornar um valor.

Para testar essa função, criaremos dois objetos +minha_hora+: +start+ que contém a hora de início de um filme, como _Monthy Python: Em Busca do Cálice Sagrado_, e +duração+ que contém o tempo de duração do filme, que é de uma hora e 35 minutos.

+soma_tempo+ descobre quando o filme irá terminar.

[source,@julia-eval chap16]
----
using Printf
function imprima_hora(tempo::minha_hora)
    @printf("%02d:%02d:%02d", tempo.hora, tempo.minuto, tempo.segundo)
end;
----

[source,@julia-repl-test chap16]
----
julia> início = minha_hora(9, 45, 0);

julia> duração = minha_hora(1, 35, 0);

julia> fim = add_tempo(início, duração);

julia> imprima_hora(fim)
10:80:00
----

O resultado, +10:80:00+ talvez não seja o que esperávamos. O problema é que essa função não lida com casos no qual o número de segundos ou minutos ultrapassam sessenta. Quando isso ocorre, temos que "carregar" os segundos extras para a coluna de minutos ou os minutos extras para a coluna de horas. Aqui vai uma versão aprimorada:

[source, @julia-setup chap16]
----
function soma_tempo(t1, t2)
    segundo = t1.segundo + t2.segundo
    minuto = t1.minuto + t2.minuto
    hora = t1.hora + t2.hora
    if segundo >= 60
        segundo -= 60
        minuto += 1
    end
    if minuto >= 60
        minuto -= 60
        hora += 1
    end
    minha_hora(hora, minuto, segundo)
end
----

Apesar desta função estar correta, ela está começando a ficar grande. Veremos uma alternativa mais concisa em breve.

[[modifiers]]
=== Modificadores

Em certos momentos, é útil para uma função modificar os objetos que recebe como parâmetros. Neste caso, as mudanção são visíveis para quem a chama. Funções que funcionam dessa maneira são chamadas de _modificadoras_.
(((modificador)))

+incrementa!+, que adiciona um dado número de segundos à um objeto +minha_hora+, pode ser escrito naturalmente como um modificador. Aqui está um rascunho:
(((incrementa!)))((("função", "definido pelo programador", "incrementa!", see="incrementa!")))

[source,@julia-setup chap16]
----
function incrementa!(tempo, segundos)
    tempo.segundo += segundos
    if tempo.segundo >= 60
        tempo.segundo -= 60
        tempo.minuto += 1
    end
    if tempo.minuto >= 60
        tempo.minuto -= 60
        tempo.hora += 1
    end
end
----

A primeira linha executa a operação básica, o resto lida com os casos especiais que vimos anteriormente.

Essa função está correta? O que acontece se +segundos+ for muito maior que 60?

Neste caso, não basta carregar uma vez; temos que continuar a fazer isso até que +tempo.segundo+ seja menor que 60. Uma solução é substituir as declarações +if+ com as declarações +while+. O que fará com que a função fique correta, porém, não muito eficiente.

===== Exercício 16-3

Escreva uma versão correta de +incrementa!+ que não contenha nenhum laço.

Qualquer coisa que pode ser feita com modificadores também pode ser feita com funções puras. De fato, algumas linguagens de programação permitem apenas funções puras. Há algumas evidências de que programas que usam funções puras são mais rápidos para serem desenvolvidos e menos propensos a erros do que programas que usam modificadores. Porém, às vezes modificadores são convenientes e programas funcionais tendem a ser menos eficientes.

Em geral, recomendamos que você escreva funções puras sempre que for razoável e recorrer a modificadores apenas se há uma vantagem atraente. Essa abordagem pode ser chamada de _estilo de programação funcional_.
(((estilo de programação funcional)))

===== Exercício 16-4

Escreva uma versão “pura” de +incrementa+ que cria e retorna um novo objeto +minha_hora+ ao invéz de modificar o parâmetro.


[[prototyping_versus_planning]]
=== Prototipagem Versus Planejamento

O plano de desenvolvimento que estamos demonstrando é chamado de “protótipo e correção”. Para cada função, escrevemos um protótipo que executava os cálculos básicos e depois testavamos-o, corrigindo os erros ao longo do caminho.
(((plano de desenvolvimento de programa)))(((protótipo e correção)))

Essa abordagem pode ser efetiva, especialmente quando você ainda não tem um entendimento profundo acerca do problema. Mas correções incrementais podem gerar código que é desnecessariamente complicado, já que ele lida com muitos casos especiais, e também que não é confiável, já que é difícil saber se você encontrou todos os erros.

Uma alternativa é o _desenvolvimento projetado_, no qual obter uma visão de alto nível do problema pode facilitar muito a programação. Neste caso, podemos perceber que um objeto Time é na verdade um número de três dígitos na base 60 (consulte https://pt.wikipedia.org/wiki/Sistema_de_numera%C3%A7%C3%A3o_sexagesimal)! O atributo dos segundos é a “coluna de ums”, o atributo de munutos é a “coluna de sessentas” e o atributo da hora é a “coluna de três mil e seiscentos”.
(((desenvolvimento projetado)))

Quando escrevemos +soma_tempo+ e +incrementa!+, efetivamente estavamos realizando uma adição na base 60, que é a razão de termos carregado de uma coluna para a próxima.

Essa observação nos sugere uma outra abordagem para todo o problema—podemos converter objetos +minha_hora+ para inteiros e obter uma vantagem do fato de que o computador sabe como realizar artimética inteira.

Abaixo temos uma função que converte um objeto minha_hora para inteiros.
(((hora_para_int)))((("função", "definido pelo programador", "hora_para_int", see="hora_para_int")))

[source, @julia-setup chap16]
----
function hora_para_int(tempo)
    minutos = tempo.hora * 60 + tempo.minuto
    segundos = minutos * 60 + tempo.segundo
end
----

Aqui temos uma função que converte um inteiro para +minha_hora+ (lembre-se que +divrem+ divide o primeiro argumento pelo segundo e retorna o quociente e o resto como uma tupla):
(((int_para_hora)))((("função", "definido pelo programador", "int_para_hora", see="int_para_hora")))

[source,@julia-setup chap16]
----
function int_para_hora()
    (minutos, segundo) = divrem(segundos, 60)
    hora, minuto = divrem(minutos, 60)
    minha_hora(hora, minuto, segundo)
end
----


Talvez você tenha que pensar um pouco e executar alguns testes para se convencer de que essas funções estão corretas. Uma forma de testar é verificar que +int_para_hora(hora_para_int(x)) == x+ para quaisquer valores de +x+. Esse é um exemplo de verificação de consistência.

Uma vez que você esteja convencido de que elas estão corretas, você poderá usá-las para reescrever +soma_tempo+

[source,@julia-setup chap16]
----
function soma_tempo(t1, t2)
    segundos = hora_para_int(t1) + hora_para_int(t2)
    int_para_hora(segundos)
end
----

Essa versão é mais curta que a original e mais fácil de verificar.

===== Exercício 16-5

Reescreva +incrementa!+ usando +tempo_para_int+ e +int_para_tempo+.

Algumas vezes, converter da base 60 para a base 10 e vice-versa é mais difícil do que lidar com tempo. A conversão de base é mais abstrata; a nossa intuição para lidar com valores de tempo é melhor.

Mas se nós tivermos a ideia de tratar horas como número de base 60 e investir na escrita de funções de conversão (+tempo_para_int+ e +int_para_tempo+), nós temos um programa que é menor, mais fácil de ler e depurar, e mais confiável.

Também é mais fácil acrescentar característica depois. Por exemplo, imagine subtrair dois objetos +minha_hora+ para encontrar a duração entre eles. Uma abordagem ingênua seria implementar a subtração com empréstimo. Porém, usar funções de conversão seria mais fácil e, provavelmente, mais correto.

Ironicamente, as vezes tornar um problema mais difícil (ou mais geral) facilita (porque há menos casos especiais e menos oportunidades de erro).

[[chap16_debugging]]
=== Depurando

Um objeto +minha_hora+ é bem formado se os valores de +minuto+ e +segundo+ estão entre 0 e 60 (incluindo 0 mas não 60) e se +hora+ é positivo. +hora+ e +minuto+ devem ser valores integrais mas talvez devessemos permitir que +segundo+ tenha uma parte fracional.
(((depurando)))

Requisitos como esses são ditos _invariantes_ porque eles sempre devem ser verdadeiros. Para dizer de outra forma, se eles não forem verdadeiros, algo deu errado.
(((invariante)))

Escrever código para verificar requisitos invariantes pode ajudar a descobrir erros e encontrar suas causas. Por exemplo, você pode ter uma função como +hora_válida+, que receba um objeto +minha_hora+ e retorna +false+ se ela violar um requisito invariante:
(((hora_válida)))((("função", "definido pelo programador", "hora_válida", see="hora_válida")))

[source,@julia-setup chap16]
----
function hora_válida(tempo)
    if tempo.hora < 0 || tempo.minuto < 0 || tempo.segundo < 0
        return false
    end
    if tempo.minuto >= 60 || tempo.segundo >= 60
        return false
    end
    true
end
----

No início de cada função você deve checar os argumentos para ter certeza de que eles são válidos.
(((soma_tempo)))(((error)))

[source,@julia-setup chap16]
----
function soma_tempo(t1,t2)
    if !hora_válida(t1) || !hora_válida(t2)
        error("objeto minha_hora inválido em soma_tempo")
    end
    segundos = hora_para_int(t1) + hora_para_int(t2)
   int_para_hora(segundos)
end
----

Ou você pode usar uma instrução +@asset+, que verifica determinado requisito invariável e gera uma exceção se ele falhar:
(((@assert)))((("macro", "Base", "@assert", see="@assert")))

[source,@julia-setup chap16]
----
function soma_tempo(t1, t2)
    @assert(hora_válida(t1) && hora_válida(t2), "objeto minha_hora inválido em add_tempo")
    segundos =hora_para_int(t1) + hora_para_int(t2)
    int_para_tempo(segundos)
end
----

Macros +@assert+ são úteis porque distinguem o código que lida com condições normais do código que verifica erros.


=== Glossário

protótipo e correção::
Um plano de desenvolvimento que envolve escrever um rascunho de um programa, testar e corrigir erros que são encontrados.
(((protótipo e correção)))

desenvolvimento projetado::
Plano de desenvolvimento que implica uma compreensão de alto nível do problema e mais planejamento do que desenvolvimento incremental ou desenvolvimento prototipado.
(((desenvolvimento projetado)))

funções puras::
Função que não altera nenhum dos objetos que recebe como argumento. A maior parte das funções puras gera resultado.
(((função pura)))

modificador::
Função que modifica um ou vários dos objetos que recebe como argumento. A maior parte dos modificadores são nulos; isto é, retornam +nothing+.
(((modificador)))

programa funcional::
Um estilo de projeto de programa no qual a maioria das funções são puras.
(((programa funcional)))

invariante::
Uma condição que nunca deve mudar durante a execução de um programa.
(((invariante)))


=== Exercícios

[[ex16-1]]
===== Exercício 16-6

Escreva uma função chamada +multime+ que pega um objeto +minha_hora+ e um número, e retorna um novo objeto +minha_hora+ que contém o produto do +minha_hora+ original e do número.
(((multime)))((("função", "definido pelo programador", "multime", see="multime")))

Em seguida use +mul_hora+ para escrever uma função que receba um objeto +minha_hora+ representando o tempo até o fim de uma corrida e um número que represente a distância e retorne um objeto +minha_hora+ com o ritmo médio (tempo por quilômetro).

[[ex16-2]]
===== Exercício 16-7

O Julia fornece objetos de tempo que são similares aos objetos +minha_hora+ desse capítulo, mas eles fornecem um conjunto rico de funções e operadores. Leia a documentação em https://docs.julialang.org/en/v1/stdlib/Dates/.

. Escreva um programa que obtenha a data atual e imprima o dia da semana.

. Escreva um programa que aceite um aniversário como entrada e imprima a idade do usuário e o número de dias, horas, minutos e segundos até o próximo aniversário.

. Para duas pessoas nascidas em dias diferentes, há um dia em que uma tem o dobro da idade da outra. Esse é o dia duplo deles. Escreva um programa que receba dois aniversários e calcule o dia duplo.

. Para lhe desafiar um pouco, escreva a versão mais geral que calcula o dia em que uma pessoa é latexmath:[\(n\)] vezes mais velha que a outra.
