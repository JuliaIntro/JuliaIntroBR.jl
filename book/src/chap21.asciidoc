[[chap21]]
== Depuração

Na depuração, você deve distinguir os diferentes tipos de erros a fim de rastreá-los mais rapidamente:

* Os erros de sintaxe são descobertos pelo interpretador quando ele está traduzindo o código fonte para código byte. Eles sinalizam que há algo errado com a estrutura do programa. Exemplo: omitir a palavra-chave +end+ no final de um bloco de função gera a mensagem um tanto redundante +ERROR: LoadError: syntax: incomplete: function requires end+.
(((erro de sintaxe)))

* Os erros de tempo de execução são produzidos pelo interpretador se algo der errado durante a execução do programa. A maioria das mensagens de erro de tempo de execução inclui as informações sobre o local da ocorrência do erro e quais as funções que estavam sendo executadas. Exemplo: Uma recursão infinita eventualmente gera o erro de tempo de execução +ERROR: StackOverflowError+.
(((erro de tempo de execução)))

* Os erros semânticos são problemas com um programa que embora rode sem produzir mensagens de erro, não faz a coisa certa. Exemplo: Uma expressão pode não ser avaliada na ordem que você espera, levando a um resultado incorreto.
(((erro semântico)))

O primeiro passo na depuração é descobrir com qual o tipo de erro você está lidando. Apesar das seções seguintes serem organizadas pelo tipo de erro, algumas técnicas são aplicáveis em mais de uma situação.


=== Erros de Sintaxe

Geralmente os erros de sintaxe são fáceis de corrigir depois de você descobrir quais são eles. E infelizmente as mensagens de erro muitas vezes não são úteis. As mensagens mais comuns são +ERROR: LoadError: syntax: incomplete: premature end of input+ e +ERROR: LoadError: syntax: unexpected "="+, que não são muito informativas.

Por outro lado, a mensagem te informa onde o problema ocorreu no programa. Na verdade, ela informa onde o Julia notou um problema, que não é necessariamente onde está o erro. Às vezes, o erro é anterior ao local da mensagem de erro, em geral na linha anterior.

Se você está construindo o programa de forma incremental, deve ter uma boa ideia de onde o erro está. Ele estará na última linha que você adicionou.

Caso você esteja copiando o código de um livro, comece comparando seu código com o código do livro com muito cuidado. Verifique todos os caracteres. Ao mesmo tempo, lembre-se de que o livro pode estar errado, portanto, se você perceber algo que parece um erro de sintaxe, talvez seja.

Eis algumas maneiras de evitar os erros de sintaxe mais comuns:

. Certifique-se que você não está usando uma palavra-chave do Julia para um nome de variável.

. Certifique-se que você tem a palavra-chave +end+ no final de cada comando composto, incluindo os blocos +for+, +while+, +if+, e +function+.

. Assegure-se que quaisquer strings no código estejam entre aspas correspondentes. Certifique-se de que todas as aspas são "aspas retas", e não as “aspas encaracoladas” (ou “aspas inglesas”).

. Se você tiver strings de múltiplas linhas com aspas triplas, confira se a string foi finalizada corretamente. Uma string não finalizada pode causar um erro de token inválido no final do seu programa, ou pode tratar a parte seguinte do programa como uma string até chegar à próxima string. No segundo caso, ela pode não produzir uma mensagem de erro!

. Um operador de abertura não fechado —+(+, +{+, ou +[+—faz com que o Julia continue com a próxima linha como parte do comando atual. Geralmente, um erro ocorre quase imediatamente na próxima linha.

. Confira o clássico +=+ em vez de +==+ dentro de um condicional.

. Se você tem caracteres não ASCII no código (incluindo as strings e os comentários), isso pode causar um problema, embora o Julia geralmente lide com caracteres não ASCII. Tenha cuidado quando você colar texto de uma página da web ou de outra fonte.

Se nada funcionar, passe para a próxima seção...

==== Eu Continuo Fazendo Mudanças e Não Há Diferença

Se o REPL diz que há um erro e você não o vê, talvez seja porque você e o REPL não estão visualizando o mesmo código. Verifique o seu ambiente de programação para garantir que o programa que você está editando é o mesmo que o Julia está tentando executar.

Se você não tiver certeza, tente colocar um erro de sintaxe óbvio e intencional no início do programa. Agora execute-o novamente. No caso do REPL não encontrar o novo erro, então você não está executando o novo código.

Existem alguns prováveis culpados:

* Você editou o arquivo e esqueceu de salvar as alterações antes de executá-lo novamente. Alguns ambientes de programação fazem isso por você, mas outros não.

* Você alterou o nome do arquivo, mas ainda está executando o nome antigo.

* Algo em seu ambiente de desenvolvimento está configurado erroneamente.

* Se você estiver escrevendo um módulo e usando +using+, certifique-se de não nomear o seu módulo com o mesmo nome de um dos módulos padrões do Julia.

* Caso você esteja utilizando +using+ para importar um módulo, lembre-se de que é necessário reiniciar o REPL ao modificar o código no módulo. Se você importar o módulo novamente, ele não faz nada.

Se você ficar preso e não conseguir descobrir o que está acontecendo, uma abordagem é começar novamente com um novo programa como “Olá, Mundo!”, e ter certeza de que você consegue executar um programa conhecido. Depois, acrescente gradualmente as peças do programa original ao novo programa.


=== Erros de Tempo de Execução

Quando seu programa estiver sintaticamente correto, o Julia poderá lê-lo e, pelo menos, começar a executá-lo. O que poderia dar de errado?

==== Meu programa Não Faz Absolutamente Nada

Esse problema é mais comum quando seu arquivo consiste de funções e classes, mas não chama uma função para iniciar a execução. Isto pode ser intencional se você planeja importar este módulo apenas para fornecer as classes e as funções.

Se não for intencional, certifique-se que há uma chamada de função no programa, e que o fluxo de execução chega até ele (veja <<flow_of_execution>>).
(((fluxo de execução)))

==== Meu Programa Trava

Se um programa para e parece não estar fazendo nada, ele está “travando”. Frequentemente isso significa que ele está detido em um laço infinito ou em uma repetição infinita.

* Se houver um laço em particular que você suspeita ser o problema, adicione um comando de impressão logo antes do laço que diz “entrando no laço” e outra logo depois que diz “saindo do laço”.
+
Execute o programa. Caso receba a primeira mensagem e não a segunda, então você tem um laço infinito. Vá para a subseção <<infinite_loop>> mais adiante.
(((laço infinito)))

* Na maioria das vezes, uma recursão infinita fará com que o programa funcione por um tempo e em seguida gere uma mensagem de erro +ERROR: LoadError: StackOverflowError+. Se isso acontecer, vá para a subseção <<infinite_recursion>> mais adiante.
+
Se você não estiver recebendo esse erro, mas desconfia que há um problema com um método ou uma função recursiva, você ainda pode usar as técnicas descritas em <<infinite_recursion>>.
(((recursão infinita)))

* No caso de nenhum desses passos dar certo, comece a testar outros laços e outras funções e métodos recursivos.

* Caso isso não funcione, então é possível que você não esteja entendendo o fluxo de execução do seu programa. Vá para <<flow_of_execution>> mais adiante.

[[infinite_loop]]
===== Laço Infinito

Se você acha que tem um laço infinito e acha que sabe qual laço está causando o problema, adicione um comando de impressão no final do laço que imprime os valores das variáveis na condição e o valor da condição.

Por exemplo:

[source,julia]
----
while x > 0 && y < 0
    # faça algo para x
    # faça algo para y
    @debug "variáveis" x y
    @debug "condições" x > 0 && y < 0
end
----

Agora, quando você executar o programa no modo de depuração, verá o valor das variáveis e a condição a cada iteração do laço. A última vez que o laço for percorrido, a condição deve ser +false+. Se o laço continuar, você poderá ver os valores de +x+ e +y+ e poderá descobrir por que eles não estão sendo atualizados corretamente.

[[infinite_recursion]]
===== Recursão Infinita

Na maioria das vezes, a recursão infinita faz com que o programa funcione por um tempo e em seguida gere uma mensagem de erro +ERROR: LoadError: StackOverflowError+.
(((StackOverflowError)))

Se você desconfia que uma função está causando uma recursão infinita, certifique-se que há um caso base. Deve haver alguma condição que causa o retorno da função sem fazer uma chamada recursiva. Caso contrário, você precisa repensar o algoritmo e identificar um caso base.

Se existe um caso base mas o programa não parece alcançá-lo, adicione um comando de impressão no começo da função para imprimir os parâmetros. E quando você executar o programa, verá algumas linhas de saída toda vez que a função for chamada, e verá também os valores dos parâmetros. Se os parâmetros não se moverem em direção ao caso base, você terá algumas idéias sobre o porquê disso ocorrer.

[[flow_of_execution]]
===== Fluxo de Execução

Se você não tem certeza de como o fluxo de execução está se movendo pelo seu programa, adicione comandos de impressão no início de cada função com uma mensagem como “entrando na função foo”, sendo foo o nome da função.

E quando você executar o programa, um rastro de cada função que for chamada será exibido.

==== Quando Executo o Programa, Recebo uma Exceção

Se algo der errado durante o tempo de execução, o Julia imprime uma mensagem que inclui o nome da exceção, a linha do programa onde o problema ocorreu e um rastreamento de pilha.

O rastreamento de pilha identifica a função que está em execução no momento, e depois a função que a chamou, e depois a função que chamou essa e assim por diante. Em outras palavras, ele rastreia a sequência de chamadas de função que o levaram aonde você está, juntamente com o número da linha no seu arquivo onde cada chamada ocorreu.

O primeiro passo é examinar o local no programa onde ocorreu o erro e verificar se você consegue descobrir o que aconteceu. Listamos alguns dos erros de tempo de execução mais comuns:

ArgumentError::
Um dos argumentos para uma chamada de função não está no estado esperado.
(((ArgumentError)))

BoundsError::
Uma operação de indexação em uma lista que tentou acessar um elemento fora dos limites.
(((BoundsError)))

DomainError::
O argumento para uma função ou construtor está fora do domínio válido.
(((DomainError)))((("error", "Core", "DomainError", see="DomainError")))

DivideError::
Tentativa de divisão inteira por um denominador de valor 0.
(((DivideError)))((("error", "Core", "DivideError", see="DivideError")))

EOFError::
Não havia mais dados disponíveis para a leitura de um arquivo ou fluxo.
(((EOFError)))((("error", "Base", "EOFError", see="EOFError")))

InexactError::
Não é possível converter exatamente para um tipo.
(((InexactError)))((("error", "Core", "InexactError", see="InexactError")))

KeyError::
Uma operação de indexação em um objeto do tipo +AbstractDict+ (+Dict+) ou +Set+ tentou acessar ou apagar um elemento inexistente.
(((KeyError)))

MethodError::
Um método com a assinatura de tipo requerida não existe na função genérica em questão. Como alternativa, não existe um método mais específico.
(((MethodError)))

OutOfMemoryError::
Uma operação com muita memória alocada tanto para o sistema quanto para o coletor de lixo para manusear corretamente.
(((OutOfMemoryError)))((("error", "Core", "OutOfMemoryError", see="OutOfMemoryError")))

OverflowError::
O resultado de uma expressão é muito grande para o tipo especificado e causará uma explosão.
(((OverflowError)))((("error", "Core", "OverflowError", see="OverflowError")))

StackOverflowError::
A chamada de função cresceu além do tamanho da pilha de chamadas. Isso geralmente acontece quando uma chamada cai em uma recursão infinita.
(((StackOverflowError)))

StringIndexError::
Ocorrência de um erro ao tentar acessar um índice inválido em uma string.
(((StringIndexError)))

SystemError::
Uma chamada de sistema falhou com um código de erro.
(((SystemError)))

TypeError::
Uma falha de asserção de tipo ou chamada de uma função intrínseca com um tipo de argumento incorreto.
(((TypeError)))

UndefVarError::
Um símbolo no escopo atual que não está definido.
(((UndefVarError)))

==== Adicionei Tantos Comandos de Impressão que Sou Inundado com a Saída

Um dos problemas com o uso dos comandos de impressão para a depuração é que você pode acabar soterrado pelas mensagens na saída. Existem duas maneiras de proceder: simplificar a saída ou o programa.

Para simplificar a saída, você pode remover ou comentar os comandos de impressão que não estão ajudando, ou combiná-las, ou formatar a saída para facilitar a compreensão.

Para simplificar o programa, existem muitas coisas que se pode fazer. Primeiro, reduza o problema no qual o programa está trabalhando. Por exemplo, se você estiver fazendo uma busca em uma lista, busque em uma pequena lista. No caso do programa receber a entrada do usuário, passe a entrada mais simples que cause o problema.

Segundo, limpe o programa. Remova o código morto e reorganize o programa para torná-lo o mais fácil possível de ler. Por exemplo, se você suspeita que o problema está em uma parte profundamente aninhada do programa, tente reescrever essa parte com uma estrutura mais simples. Mas se você suspeitar de uma função grande, tente dividi-la em funções menores e testá-las separadamente.
(((código morto)))

Freqüentemente, o processo de encontrar o menor caso de teste leva você ao erro. Se você achar que um programa funciona em uma situação, mas não em outra, isso lhe dará uma pista sobre o que está acontecendo.

Da mesma forma, reescrever uma parte do código pode te ajudar a encontrar os erros sutis. Se fizer uma mudança que você acha que não deve afetar o programa, e ela afeta, isso pode te dar uma dica.


=== Erros Semânticos

De certa forma, os erros semânticos são os mais difíceis de depurar, porque o interpretador não fornece informações sobre o que está errado. Só você sabe o que o programa deve fazer.

O primeiro passo é conectar o texto do programa ao comportamento que você está vendo. Você precisa de uma hipótese sobre o que o programa está realmente fazendo. Um dos fatores que dificulta isso é que os computadores executam muito rápido.

Muitas vezes você vai desejar diminuir a velocidade do programa para a velocidade humana. Inserir alguns bem colocados comandos de impressão é muitas vezes mais rápido do que configurar um depurador, inserir e remover pontos de interrupção e “andar” pelo programa até onde o erro está ocorrendo.

==== Meu Programa Não Funciona

Você deve fazer estas perguntas:

* Existe algo que o programa deveria fazer, mas parece que não está fazendo? Encontre a seção do código que executa essa função e verifique se ela está executando quando você acha que deve.

* Está acontecendo algo que não deveria? Encontre o código no seu programa que executa essa função e veja se ela está sendo executada quando não deveria.

* Uma seção do código resulta em algo que não é o que você esperava? Certifique-se que você entende o código em questão, especialmente se ele envolve as funções ou os métodos em outros módulos do Julia. Leia a documentação para as funções que você chama. Experimente-as escrevendo casos de teste simples e verificando os resultados.

Para programar, é preciso um modelo mental de como os programas funcionam. Se você escreve um programa que não faz o que você deseja, com frequência o problema não está no programa e sim, no seu modelo mental.
(((modelo mental)))

A melhor maneira de reparar o seu modelo mental é particionar o programa em seus componentes (geralmente as funções e os métodos) e testar cada componente isoladamente. Uma vez encontrada a discrepância entre o seu modelo e a realidade, você pode resolver o problema.

É claro que você deve criar e testar componentes à medida que desenvolve o seu programa. Então ao encontrar um problema, deve haver apenas uma pequena quantidade de código novo que não se sabe se está ou não correto.

==== Tenho uma Grande Expressão Bizarra e Ela Não Faz o Que Eu Espero

Escrever expressões complexas é bom desde que sejam legíveis, mas podem ser difíceis de depurar. Muitas vezes é uma boa ideia dividir uma expressão complexa em uma série de atribuições a variáveis temporárias.

Por exemplo:

[source,julia]
----
adicionar_carta(jogo.mãos[i], remover_carta(jogo.mãos[achar_vizinho(jogo, i)]))
----

pode ser rescrito como:

[source,julia]
----
vizinho = achar_vizinho(jogo, i)
carta_escolhida = remover_carta(jogo.mãos[vizinho])
adicionar_carta(jogo.mãos[i], carta_escolhida)
----

A versão explícita é mais fácil de ler, já que os nomes das variáveis fornecem documentação adicional, e mais fácil de depurar, porque você pode verificar os tipos das variáveis intermediárias e exibir os seus valores.

Outro problema que pode ocorrer com as grandes expressões é que a ordem da avaliação pode não ser a que se espera. Por exemplo, se você estiver traduzindo a expressão latexmath:[\(\frac{x}{2\pi}\)] para o Julia, pode-se escrever:

[source,julia]
----
y = x / 2 * π
----

Isto não está correto porque a multiplicação e a divisão têm a mesma precedência e são avaliadas da esquerda para a direita. Portanto, essa expressão calcula latexmath:[\(\frac{x\pi}{2}\)].

Uma boa maneira de depurar expressões é adicionando parênteses para tornar explícita a ordem da avaliação:

[source,julia]
----
y = x / (2 * π)
----

Sempre que você não tiver certeza da ordem da avaliação, use parênteses. O programa não apenas estará correto (no sentido de fazer o que você deseja), como também será mais legível para outras pessoas que não memorizaram a ordem das operações.

==== Tenho uma Função Que Não Retorna o Que Eu Espero

No caso de uma declaração return com uma expressão complexa, você não poderá imprimir o resultado antes de retornar. Mais uma vez, pode-se usar uma variável temporária. Por exemplo, em vez de:
(((variável temporária)))

[source,julia]
----
return remove_combinações(jogo.mãos[i])
----

você poderia escrever:

[source,julia]
----
contagem = remove_combinações(jogo.mãos[i])
return contagem
----

Agora você tem a oportunidade de mostrar o valor de +contagem+ antes de retornar.

==== Estou Muito, Muito Empacado e Preciso de Ajuda

Primeiro, tente ficar longe do computador por alguns minutos. Trabalhar com um computador pode causar estes sintomas:

* Frustração e raiva.

* Crenças supersticiosas (“o computador me odeia”) e o pensamento mágico (“o programa só funciona quando eu uso meu chapéu para trás”).

* Programação aleatória (a tentativa de programar escrevendo todos os programas possíveis e escolhendo o que faz a coisa certa).

Caso você esteja sofrendo algum desses sintomas, levante-se e dê um passeio. No momento que se acalmar, pense no programa. O que isso está fazendo? Quais são algumas das causas possíveis desse comportamento? Quando foi a última vez que você teve um programa funcional e o que fez a seguir?

Às vezes leva tempo para encontrar um erro. Muitas vezes encontro os erros quando estou longe do computador e deixo a minha mente vaguear. Alguns dos melhores lugares para encontrar os erros são os trens, os chuveiros, e na cama, pouco antes de dormir.

==== Não, Eu Realmente Preciso de Ajuda

Acontece. Mesmo os melhores programadores ocasionalmente ficam empacados. Às vezes você trabalha em um programa por tanto tempo que não consegue ver o erro. E precisa de um novo par de olhos.

Antes de trazer alguém, esteja preparado. Seu programa deve ser o mais simples possível e você deve trabalhar na menor entrada que causa o erro. Você também deve ter comandos de impressão nos locais apropriados (e as saídas geradas devem ser compreensíveis). Além disso, deve-se entender bem o problema para descrevê-lo de forma concisa.

Ao trazer alguém para te ajudar, não deixe de fornecer as informações de que eles precisam:

* Se houver uma mensagem de erro, qual é e para qual parte do programa indica?

* Qual foi a última coisa que foi feita antes deste erro aparecer? Quais foram as últimas linhas de código escritas, ou qual é o novo caso de teste que falha?

* O que você tentou até agora, e o que você aprendeu?

Ao encontrar o erro, pense um pouco no que você poderia ter feito para encontrá-lo mais rapidamente. Da próxima vez que vir algo semelhante, poderá encontrar o erro com mais agilidade.

Lembre-se, o objetivo não é apenas fazer o programa funcionar. O objetivo é aprender como fazer o programa funcionar.
