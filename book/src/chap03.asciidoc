[[chap03]]
== Funções

No contexto da programação, uma _função_ é uma sequência nomeada de comandos que executa uma tarefa. Ao definir uma função, você especifica o nome e a sequência de comandos. Mais tarde, você pode "chamar" a função pelo nome dado.
(((função)))

=== Chamadas de funções

Nós já vimos um exemplo de chamada de função:
(((chamada de função)))

[source,@julia-repl-test]
----
julia> println("Olá, Mundo!")
Olá, Mundo!
----

O nome da função é +println+. A expressão entre parênteses é o _argumento_ da função.
(((argumento)))(((parênteses)))

É comum dizer que uma função "pega" um argumento e "retorna" um resultado que também é chamado de _valor de retorno_.
(((valor de retorno)))

Julia fornece funções que convertem valores de um tipo para outro. A função +parse+ recebe uma string e a converte em qualquer tipo de número se puder, ou dá erro caso contrário:
(((conversão de tipo)))(((("função","Base","parse", see="parse")))(((ArgumentError)))((("error", "Core", "ArgumentError", see="ArgumentError")))

[source,@julia-repl-test]
----
julia> parse(Int64, "32")
32
julia> parse(Float64, "3.14159")
3.14159
julia> parse(Int64, "Olá")
ERROR: ArgumentError: invalid base 10 digit 'O' in "Olá"
----

+trunc+ pode converter valores de ponto flutuante em valores inteiros, mas não os arredonda; o comando trunca a parte fracionária:
(((truncar)))((("função", "Base", "trunc", see="trunc")))

[source,@julia-repl-test]
----
julia> trunc(Int64, 3.99999)
3
julia> trunc(Int64, -2.3)
-2
----

+float+ converte números inteiros em números de ponto flutuante:
(((float)))((("função", "Base", "float", see="float")))

[source,@julia-repl-test]
----
julia> float(32)
32.0
----

Por último, +string+ converte o seu argumento em uma string:
(((string)))((("função", "Base", "string", see="string")))

[source,@julia-repl-test]
----
julia> string(32)
"32"
julia> string(3.14159)
"3.14159"
----


=== Funções matemáticas

Em Julia, a maioria das funções matemáticas tradicionais estão diretamente disponíveis:
(((função matemática)))(((log10)))((("função", "Base", "log10", see="log10")))

[source,julia]
----
razão = potência_sinal / potência_ruído
decibéis = 10 * log10(razão)
----

Este primeiro exemplo usa +log10+ para calcular uma relação sinal-ruído em decibéis (assumindo que +potência_sinal+ e +potência_ruído+ estão definidos). +log+, que calcula logaritmos naturais, também é dado.
(((log)))((("função", "Base", "log", see="log")))((("função logarítmica", see="log")))

[source,julia]
----
radianos = 0.7
altura = sin(radianos)
----

Este segundo exemplo calcula o seno de +radianos+. O nome da variável é uma dica de que +sin+ e de que as outras funções trigonométricas (+cos+, +tan+, etc.) recebem argumentos em radianos. Para converter de graus em radianos, divida por 180 e multiplique pelo latexmath:[\(\pi\)]:
(((seno)))((("função", "Base", "sin", see="sin")))(((função trigonométrica)))

[source,@julia-repl-test]
----
julia> graus = 45
45
julia> radianos = graus / 180 * π
0.7853981633974483
julia> sin(radianos)
0.7071067811865475
----

O valor da variável +π+ é uma aproximação do ponto flutuante de latexmath:[\(\pi\)], com precisão de aproximadamente de 16 dígitos.
(((pi)))

Se você conhece trigonometria, pode verificar o resultado anterior comparando-o com a raiz quadrada de dois dividido por dois:
(((raiz quadrada)))((("função", "Base", "sqrt", see="sqrt")))((("função quadrada", see="sqrt")))

[source,@julia-repl-test]
----
julia> sqrt(2) / 2
0.7071067811865476
----


=== Composição

Até este momento, vimos os elementos de um programa—variáveis, expressões e comandos—isoladamente, sem detalhar em como combiná-las.
(((composição)))

Um dos recursos mais úteis das linguagens de programação é a sua capacidade de manipular pequenos blocos de montar e compô-los. Por exemplo, o argumento de uma função pode ser qualquer tipo de expressão, incluindo operadores aritméticos:

[source,julia]
----
x = sin(graus / 360 * 2 * π)
----

E até mesmo as chamadas de função:
(((exp)))((("função", "Base", "exp", see="exp")))((("função exponencial", see="exp")))

[source,julia]
----
x = exp(log(x+1))
----

Em quase todos os lugares onde você pode colocar um valor, pode-se colocar uma expressão arbitrária, com uma exceção: o lado esquerdo de uma atribuição tem que ser um nome de variável. Qualquer outra expressão do lado esquerdo resulta em um erro de sintaxe (veremos exceções a esta regra mais tarde).
(((erro de sintaxe)))

[source,@julia-eval chap03]
----
horas = 2;
----

[source,@julia-repl-test chap03]
----
julia> minutos = horas * 60 # correto
120
julia> horas * 60 = minutos # errado!
ERROR: syntax: "60" is not a valid function argument name
----

=== Adicionando novas funções

Embora tenhamos usado só as funções que vêm com Julia até agora, também é possível adicionar novas funções. A _definição da função_ especifica o nome de uma nova função e a sequência de comandos que são executados quando a função é chamada. Aqui está um exemplo:
(((função)))(((definição de função)))(((função definida pelo programador)))(((imprimir_letras)))((("função", "definido pelo programador", "imprimir_letras", see="imprimir_letras")))

[source,@julia-setup chap03]
----
function imprimir_letras()
    println("O cravo brigou com a rosa")
    println("Debaixo de uma sacada.")
end
----

+function+ é uma palavra-chave que indica a definição de função. O nome da função é +imprimir_letras+. As regras para nomes de funções são as mesmas dos nomes de variáveis: eles podem conter quase todos os caracteres Unicode (veja <<caracteres>>), mas o primeiro caracter não pode ser um número. Você não pode usar uma palavra-chave como nome de uma função, e evite ter uma variável e uma função com o mesmo nome.
((("palavra-chave", "função", see="função")))(((argumento)))(((caracter Unicode)))

Os parênteses vazios após o nome da função indicam que esta função não recebe nenhum argumento.
(((parênteses, vazio)))

A primeira linha da definição da função é o _cabeçalho_; o restante é chamado de _corpo_. Finaliza-se o corpo com a palavra-chave +end+ e pode conter qualquer número de comandos. Para facilitar a leitura, o corpo da função deve estar indentado.
(((cabeçalho)))(((corpo)))(((end)))((("palavra chave", "final", see="final")))(((indentação)))

As aspas devem ser "aspas retas" (""), geralmente localizadas abaixo do Esc no teclado. As "aspas encaracoladas" ou "aspas inglesas" (“”), como as que estão nesta frase, não são legais em Julia.
(((aspas)))

Se você definir uma função no modo interativo, o REPL indentará para informar que a definição não está finalizada:

[source,jlcon]
----
julia> function imprimir_letras()
       println("O cravo brigou com a rosa")

----

Para terminar a função, deve-se inserir +end+.

A sintaxe para chamar a nova função é a mesma das funções internas:

[source,@julia-repl-test chap03]
----
julia> imprimir_letras()
O cravo brigou com a rosa
Debaixo de uma sacada.
----

Uma vez definida uma função, você pode usá-la dentro de outra função. Por exemplo, para repetir o refrão anterior, poderíamos escrever uma função chamada +repetir_letras+:
(((repetir_letras)))((("função", "definido pelo programador", "repetir_letras", see="repetir_letras")))

[source,@julia-setup chap03]
----
function repetir_letras()
    imprimir_letras()
    imprimir_letras()
end
----

E depois é só chamar +repetir_letras+:

[source,@julia-repl-test chap03]
----
julia> repetir_letras()
O cravo brigou com a rosa
Debaixo de uma sacada.
O cravo brigou com a rosa
Debaixo de uma sacada.
----

Mas não é bem assim que a música é.


=== Definições e usos

Reunindo os pedaços de código da seção anterior, o programa completo fica assim:

[source,julia]
----
function imprimir_letras()
    println("O cravo brigou com a rosa")
    println("Debaixo de uma sacada.")
end

function repetir_letras()
    imprimir_letras()
    imprimir_letras()
end

repetir_letras()
----

Este programa contém duas definições de funções: +imprimir_letras+ e +repetir_letras+. As definições de funções são executadas exatamente como outros comandos, e o resultado é a criação de objetos do tipo função. Os comandos dentro da função não são executados até que a função seja chamada, e a definição da função não gera saída.

Como você pode esperar, deve-se criar uma função antes de poder executá-la. Em outras palavras, a definição da função tem que ser executada antes de chamá-la.

===== Exercício 3-1

Mova a última linha deste programa para o topo, para que a chamada de função apareça antes das definições. Execute o programa e veja qual mensagem de erro você recebe.

Agora mova a chamada de função de volta para a parte inferior e mova a definição de +imprimir_letras+ após a definição de +repetir_letras+. Ao executar este programa, o que acontece?


=== Fluxo de execução

Para garantir a definição de uma função antes de sua primeira chamada, é necessário conhecer a ordem dos comandos executados, conhecido como _fluxo de execução_.
(((fluxo de execução)))

A execução é feita sempre a partir do primeiro comando do programa. Os comandos são executados uma de cada vez, de cima para baixo.

As definições das funções não mudam o fluxo de execução do programa, mas lembre-se que os comandos dentro da função são executados somente quando a função é chamada.

Quando a função é chamada, é como um desvio no fluxo de execução. Em vez de ir para o comando seguinte, o fluxo salta para o corpo da função, executa os comandos lá e depois volta para continuar de onde parou.

Isso parece bastante simples, até você lembrar que uma função pode chamar outra. Enquanto estiver no meio de uma função, o programa pode ter a necessidade de executar os comandos em uma outra função. Logo, ao executar essa nova função, o programa pode precisar executar outra função!

Felizmente, Julia é bom em monitorar seus passos, portanto, toda vez que uma função é concluída, o programa retoma de onde parou na função que a chamou. Chegando ao final do programa, ele é encerrado.

Em resumo, quando você lê um programa, nem sempre deseja ler de cima para baixo. Às vezes, é mais lógico seguir o fluxo de execução.


=== Parâmetros e argumentos

Algumas das funções que vimos exigem argumentos. Por exemplo, quando você chama +sin+, um número é passado como argumento. Algumas funções usam mais de um argumento: +parse+ necessita de dois, um tipo de número e uma string.
(((parâmetro)))(((argumento)))(((analisar)))(((sin)))

Dentro da função, os argumentos são atribuídos a variáveis denominadas _parâmetros_. Aqui está uma definição para uma função que exige um argumento:
(((imprimir2vezes)))((("função", "definido pelo programador", "imprimir2vezes", see="imprimir2vezes")))

[source,@julia-setup chap03]
----
function imprimir2vezes(bruno)
    println(bruno)
    println(bruno)
end
----

Esta função atribui o argumento a um parâmetro denominado +bruno+. Quando a função é chamada, imprime-se o valor do parâmetro (qualquer que seja) duas vezes.

Esta função funciona com qualquer valor que possa ser impresso.

[source,@julia-repl-test chap03]
----
julia> imprimir2vezes("Spam")
Spam
Spam
julia> imprimir2vezes(42)
42
42
julia> imprimir2vezes(π)
π
π
----

As mesmas regras de composição que se aplicam às funções embutidas também se aplicam às funções definidas pelo programador, portanto podemos usar qualquer tipo de expressão como argumento para +imprimir2vezes+:
(((composição)))(((função definida pelo programador)))

[source,@julia-repl-test chap03]
----
julia> imprimir2vezes("Spam "^4)
Spam Spam Spam Spam
Spam Spam Spam Spam
julia> imprimir2vezes(cos(π))
-1.0
-1.0
----

O argumento é avaliado antes da chamada da função, de modo que nos exemplos as expressões +"Spam "^4+ e +cos(π)+ são avaliadas apenas uma vez.
(((argumento)))(((cos)))((("função", "Base", "cos", see="cos"))))

Também pode-se usar uma variável como argumento:

[source,@julia-repl-test chap03]
----
julia> ana = "Uma andorinha sozinha não faz verão."
"Uma andorinha sozinha não faz verão."
julia> imprimir2vezes(ana)
Uma andorinha sozinha não faz verão.
Uma andorinha sozinha não faz verão.
----

O nome da variável que passamos como argumento (+ana+) não tem nada a ver com o nome do parâmetro (+bruno+). Para a função +imprimir2vezes+, todos os parâmetros são chamados +bruno+, independentemente do nome da variável que passamos como argumento (neste caso, +ana+)


=== As variáveis e os parâmetros são locais

Ao criar uma variável dentro de uma função, ela é _local_, isto é, ela existe apenas dentro da função. Por exemplo:
(((variável local)))(((variável, local)))(((concat_imprimir2vezes)))((("função", "definido pelo programador", "concat_imprimir2vezes", see="concat_imprimir2vezes")))

[source,@julia-setup chap03]
----
function concat_imprimir2vezes(parte1, parte2)
    concat = parte1 * parte2
    imprimir2vezes(concat)
end
----

Esta função exige dois argumentos, concatena-os e imprime o resultado duas vezes. A seguir um exemplo que a usa:
(((concatenar)))(((repetição)))

[source,@julia-repl-test chap03]
----
julia> linha1 = "Lava outra, "
"Lava outra, "
julia> linha2 = "lava uma."
"lava uma."
julia> concat_imprimir2vezes(linha1, linha2)
Lava outra, lava uma.
Lava outra, lava uma.
----

Após o término de +concat_imprimir2vezes+, a variável +concat+ é destruída. Se tentarmos imprimi-la, aparece uma exceção:
(((erro em tempo de execução)))(((UndefVarError)))((("error", "Core", "UndefVarError", see="UndefVarError")))

[source,@julia-repl-test chap03]
----
julia> println(concat)
ERROR: UndefVarError: concat not defined
----

Os parâmetros também são locais. Por exemplo, fora do +imprimir2vezes+, não existe o +bruno+.
(((parâmetro)))


[[stack_diagrams]]
=== Diagramas de Pilha

Para verificar quais variáveis podem ser usadas e onde, às vezes é prático desenhar um _diagrama de pilha_. Da mesma maneira dos diagramas de estado, os diagramas de pilha mostram o valor de cada variável, e mostram também a função à qual cada variável pertence.
(((diagrama da pilha))) ((("diagrama", "pilha", see= "diagrama da pilha"))))

Cada função é indicada por um _quadro_, que é representado por uma caixa com o nome de uma função ao lado e os parâmetros e as variáveis da respectiva função dentro dele. O diagrama de pilha do exemplo anterior é ilustrado em <<fig03-1>>.
(((quadro)))

[[fig03-1]]
.Stack diagram
image::images/fig31.svg[]

Os quadros são dispostos em uma pilha que mostra qual função é chamada por outra, e assim por diante. Neste exemplo, +imprimir2vezes+ foi chamada por +concat_imprimir2vezes+, e +concat_imprimir2vezes+ foi chamada por +Main+, que é um nome especial para o quadro superior. Criando uma variável fora de qualquer função, ela pertence a +Main+.

Cada parâmetro recebe o mesmo valor que o seu argumento correspondente. Logo, +parte1+ tem o mesmo valor que +linha1+, da mesma forma que +parte2+ tem o mesmo valor que +linha2+, e +bruno+ tem o mesmo valor que +concat+.

Em um caso de erro durante uma chamada de função, Julia imprime o nome da função, o nome da função que a chamou, e o nome da função que chamou por ela, e assim por diante até chegar no +Main+.
(((Main)))

Por exemplo, se você tentar acessar +concat+ de dentro de +imprimir2vezes+, você recebe um +UndefVarError+:
(((UndefVarError)))

----
ERROR: UndefVarError: concat not defined
Stacktrace:
 [1] imprimir2vezes at ./REPL[1]:2 [inlined]
 [2] concat_imprimir2vezes(::String, ::String) at ./REPL[2]:3
----

Esta lista de funções é chamada de _rastreamento de pilha_, que informa em qual arquivo de programa ocorreu o erro, em qual linha e quais funções estavam sendo executadas no momento. Também indica a linha de código que causou o erro.
(((rastreamento de pilha)))

A ordem das funções no rastreamento de pilha é a ordem inversa dos quadros no diagrama de pilha. A função atualmente em execução fica no topo.


=== Funções produtivas e funções nulas

Algumas das funções que usamos, como as funções matemáticas que retornam resultados; por falta de um nome melhor, chamaremos de _funções produtivas_. As outras funções, como +imprimir2vezes+, que executam uma ação sem retornar um valor chamaremos de _funções nulas_.
(((funções produtivas))) (((funções nulas))))

Quando você chama uma função produtiva, quase sempre deseja-se fazer algo com o resultado; por exemplo, atribuí-lo a uma variável ou usá-lo como parte de uma expressão:

[source,julia]
----
x = cos(radianos)
áurea = (sqrt(5) + 1) / 2
----

Ao chamar uma função no modo interativo, Julia exibe o seguinte resultado:
(((modo interativo)))

[source,@julia-repl-test]
----
julia> sqrt(5)
2.23606797749979
----

Porém em um script, se chamar uma função produtiva por si só, o valor de retorno será perdido para sempre!
(((modo script)))

[source,@julia-run]
----
sqrt(5)
----

Este script calcula a raiz quadrada de 5, que não é armazenado e nem exibido o resultado, e assim, não é muito útil.

As funções nulas podem exibir algo na tela ou ter algum outro efeito, mas não retorna um valor. Se atribuir o resultado a uma variável, obterá um valor especial chamado +nothing+.
(((nothing)))

[source,@julia-repl-test chap03]
----
julia> resultado = imprimir2vezes("Bing")
Bing
Bing
julia> show(resultado)
nothing
----

Para imprimir o valor +nothing+, usa-se a função +show+ que é similar a +print+ mas que pode lidar com o valor +nothing+.
(((show)))((("função", "Base", "show", see="show"))))

O valor +nothing+ não é o mesmo que a string +"nothing"+. Pois é um valor especial que tem seu próprio tipo:
(((Nothing)))((("tipo", "Base", "Nothing", see="Nothing")))

[source,@julia-repl-test]
----
julia> typeof(nothing)
Nothing
----

As funções que temos escrito até o momento são todas nulas. Começaremos a escrever funções produtivas em alguns capítulos.


=== Por que funções?

Pode não estar claro o motivo de fragmentar um programa em funções, mas existem várias razões:

* Criar uma nova função dá a oportunidade de nomear uma série de comandos, o que facilita a leitura e a depuração do programa.

* As funções podem reduzir o tamanho de um programa, eliminando a repetição do código. Mais tarde, no caso de alguma mudança, é só modificá-lo em um único lugar.

* Dividir um programa longo em funções permite a depuração das partes, uma de cada vez, e depois reuni-las em um programa mais funcional.

* Funções bem programadas são frequentemente úteis para muitos outros programas. Depois de escrever e depurar um, você pode reutilizá-la.

* Em Julia, as funções podem melhorar consideravelmente o desempenho.


=== Depurando

Uma das habilidades mais significativas que você vai adquirir é a depuração. Ainda que possa ser frustrante, a depuração é uma das partes da programação mais intelectualmente rica, desafiadora e interessante.
(((depuração)))

De certa forma, a depuração é como um trabalho de detetive. Você é confrontado com pistas e precisa inferir os processos e eventos que levaram aos resultados encontrados.

A depuração também é como uma ciência experimental. Uma vez que você tem uma ideia do que está dando errado, modifique seu programa e tente novamente. Se a sua hipótese estiver correta, pode-se prever o resultado da modificação e aproximar-se de um programa funcional. Se a sua hipótese estava errada, inventa-se uma nova. Como Sherlock Holmes apontou,

[quote, A. Conan Doyle, O Signo dos Quatro]
____
Tendo eliminado o impossível, aquilo que resta, ainda que improvável, deve ser a verdade.
____
(((depuração experimental)))(((Holmes, Sherlock)))(((Doyle, Arthur Conan)))

Algumas pessoas consideram que a programação e a depuração são a mesma coisa, já que a programação é o processo de depurar gradualmente um programa até que ele faça o que o programador deseja. A ideia é começar com um programa funcional e fazer pequenas mudanças, depurando-as à medida que avança.

Por exemplo, o Linux é um sistema operacional com milhões de linhas de código, mas começou como um programa simples que Linus Torvalds usava para examinar o chip Intel 80386. De acordo com Larry Greenfield, "um dos primeiros projetos de Linus era um programa que alternava entre imprimir "AAAA" e "BBBB". Este mais tarde evoluiu para Linux. ” (_The Linux Users' Guide_ Versão Beta 1).
(((Linux))) (((Torvalds, Linus))))


=== Glossário

função::
Uma sequência nomeada de comandos que realiza alguma operação útil. As funções podem ou não nessitar de argumentos e podem ou não gerar um resultado.
(((função)))

definição de função::
Um comando que cria uma nova função, e com especificação do seu nome, seus parâmetros e dos comandos que ela contém.
(((definição de função)))

objeto do tipo função::
Um valor criado por uma definição de função. O nome da função é uma variável que se refere a um objeto do tipo função.
(((objeto do tipo função)))

cabeçalho::
A primeira linha de uma definição de função.
(((cabeçalho)))

corpo::
A sequência de comandos dentro de uma definição de função.
(((corpo)))

parâmetro::
Um nome usado dentro de uma função para se referir ao valor passado como argumento.
(((parâmetro)))

chamada de função::
Um comando que executa uma função. Consiste no nome da função seguido de uma lista de argumentos entre parênteses.
(((chamada de função)))

argumento::
Um valor fornecido a uma função quando a função é chamada. E este valor é atribuído ao parâmetro correspondente na função.
(((argumento)))

variável local::
Uma variável definida dentro de uma função. Uma variável local só pode ser utilizada dentro de sua função.
(((variável local)))

valor de retorno::
O resultado de uma função. Se uma chamada de função é utilizada como uma expressão, o valor de retorno é o valor da expressão.
(((valor de retorno)))

função produtiva::
Uma função que retorna um valor.
(((função produtiva)))

função nula::
Uma função que sempre retorna +nothing+.
(((função nula)))

+nothing+::
Um valor especial devolvido por funções nulas.
(((nothing)))

composição::
Usar uma expressão como parte de uma expressão maior ou um comando como parte de um comando maior.
(((composição)))

fluxo de execução::
A ordem da execução dos comandos.
(((fluxo de execução)))

diagrama da pilha::
Representação gráfica de uma pilha de funções, suas variáveis e os valores a que se referem.
(((diagrama da pilha)))

quadro::
Uma caixa em um diagrama de pilha que representa uma chamada de função, além de conter as variáveis e parâmetros locais da função.
(((quadro)))

rastreamento de pilha::
Uma lista das funções que estão sendo executadas, mostrada quando ocorre uma exceção.
(((rastreamento de pilha)))


=== Exercícios

[TIP]
====
Esses exercícios devem ser realizados usando apenas os comandos e outros recursos aprendidos até o momento.
====

[[ex03-1]]
===== Exercício 3-2

Escreva uma função denominada +alinhar_a_direita+ que recebe uma string denominada +s+ como parâmetro e imprime a string com espaços suficientes à esquerda de modo que a última letra da string esteja na coluna 70 da exibição.
(((alinhar_a_direita)))((("função", "definido pelo programador", "alinhar_a_direita", see="alinhar_a_direita")))

[source,@julia-eval chap03-ex]
----
using JuliaIntroBR
----

[source,@julia-repl chap03-ex]
----
alinhar_a_direita("trapalhões")
----

[TIP]
====
Use concatenação e repetição de string. Além disso, Julia fornece uma função interna chamada +length+ que retorna o comprimento de uma string, portanto o valor de +length("trapalhões")+ é 10.
(((comprimento)))((("função", "Base", "comprimento", see="comprimento")))
====

[[ex03-2]]
===== Exercício 3-3

Um objeto do tipo função é um valor que você pode associar a uma variável ou passar como argumento. Por exemplo, +fazer2vezes+ é uma função que pega um objeto do tipo função como argumento e o chama duas vezes:
(((objeto do tipo função)))(((fazer2vezes)))((("função", "definido pelo programador", "dotwice", see="fazer2vezes")))

[source,julia]
----
function fazer2vezes(f)
    f()
    f()
end
----

Veja um exemplo que usa +fazer2vezes+ para chamar a função +imprimir_spam+ duas vezes.
(((imprimir_spam)))((("função", "definido pelo programador", "imprimir_spam", see="imprimir_spam")))

[source,julia]
----
function imprimir_spam()
    println("spam")
end

fazer2vezes(imprimir_spam)
----

. Copie este exemplo em um script e teste-o.

. Modifique +fazer2vezes+ para que ele receba dois argumentos, um objeto do tipo função e um valor, e chame a função duas vezes, passando o valor como argumento.

. Copie a definição de +imprimir2vezes+ apresentada no início deste capítulo para o seu script.

. Use a versão modificada de +fazer2vezes+ para chamar +imprimir2vezes+ duas vezes, e passando +"spam"+ como argumento.

. Defina uma nova função chamada +fazer4vezes+ que recebe um objeto do tipo função e um valor e chama a função quatro vezes, passando o valor como parâmetro. Esta função deve ter apenas dois comandos no corpo dessa função, e não quatro.

[[ex03-3]]
===== Exercício 3-4

. Escreva uma função +imprimir_grade+ que desenha uma grade da seguinte maneira:
(((imprimir_grade)))((("função", "definido pelo programador", "imprimir_grade", see="imprimir_grade")))
+
[source,@julia-repl-test chap03-ex]
----
julia> imprimir_grade()
+ - - - - + - - - - +
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - +
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - +
----

. Escreva uma função que desenhe uma grade semelhante, com quatro linhas e quatro colunas.

Crédito: este exercício é baseado em um exercício de Oualline, _Practical C Programming_, Terceira Edição, O´Reilly Media, 1997.

[TIP]
====
Para mostrar mais de um valor em uma linha, você pode imprimir uma sequência de valores separados por vírgula:

[source,julia]
----
println("+", "-")
----

A função +print+ não avança para a linha seguinte:

[source,julia]
----
print("+ ")
println("-")
----

A saída desses comandos é +pass:["+ -"]+ na mesma linha. A saída do próximo comando é a impressão que começaria na seguinte linha.
====
(((println)))(((print)))((("função", "Base", "print", see="print")))
