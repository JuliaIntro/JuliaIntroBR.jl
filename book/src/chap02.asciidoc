[[chap02]]
== Variáveis, Expressões e Declarações
Uma das caractereísticas mais poderosas de uma linguagem de programação é a sua habilidade de manipular _variáveis_. Uma variável é um nome que refere-se a um valor.

(((variável)))(((valor)))


=== Declarações de Atribuição
Uma _declaração de atribuição_ cria uma nova variável e da à ela um valor:

(((assignment statement)))((("statement", "assignment", see="assignment statement")))(((pass:[=], see="assignment statement")))(((pi)))((("π", see="pi")))

[source,@julia-repl-test chap02]
----
julia> mensagem = "E agora para algo completamente diferente"
"E agora para algo completamente diferente"
julia> n = 17
17
julia> π_val = 3.141592653589793
3.141592653589793
----

Este exemplo faz três atribuições. A primeira atribui uma string à uma nova variável chamada +mensagem+; a segunda dá o inteiro +17+ a +n+; a terceira atribui (aproximadamente) o valor de latexmath:[\(\pi\)] a +π_val+ (*+\pi TAB+*).

Um jeito comum de representar variáveis no papel é escrevendo o nome com uma flecha apontando para o seu valor. Este tipo de figura é denominado de _diagrama de estado_ pois mostra em que estado cada variável encontra-se (imagine isso como sendo o estado de espirito da variável) <<fig02-1>> mostra o resultado do exemplo anterior.

(((diagrama de estado)))((("diagrama", "estado", see="diagrama de estado")))

[[fig02-1]]
.Diagrama de estado
image::images/fig21.svg[]


=== Nomes de variáveis
(((variáveis)))

Programadores geralmente escolhem nomes para suas variáveis que são significativos—eles documentam para o que a variável é usada.

Nomes de variáveis podem ser o quão longas você desejar. Eles podem conter quase todos os caracteres Unicode (veja <<caracteres>>), mas não podem começar com um número. É permitido usar letras maiúsculas, mas é convencional utilizar somente letras minúsculas para nomes de variáveis.

caracteres Unicode podem ser inseridos através do autocompletar do tab de abreviações similares à LaTeX no REPL do Julia.
(((caractere Unicode)))

O caractere sublinhado, +_+, pode aparecer em um nome. É comumente utilizado em nomes com multiplas palavras, como +seu_nome+ ou +velocidade_de_uma_andorinha_sem_carga+.
(((caractere sublinhado)))(((abreviações similares à LaTeX)))

Se um nome inválido for dado a uma variável, recebemos um erro de sintaxe:
(((erro de sintaxe)))((("erro", "sintaxe", see="erro de sintaxe")))

[source,jlcon]
----
julia> 76trombones = "grande desfile"
ERROR: syntax: "76" is not a valid function argument name around REPL[1]:1
julia> mais@ = 1000000
ERROR: syntax: extra token "@" after end of expression
julia> struct = "Zimologia Teórica Avançado"
ERROR: syntax: unexpected "="
----

+76trombones+ é inválido pois começa com um número. +mais@+ é inválido pois contem um caractere inválido, +@+. Mas o que há de errado com +struct+?

Acontece que +struct+ é uma das palavras chave do Julia. O REPL usa palavras chaves para reconhecer a estrutura do programa, e elas não podem ser usadas como nomes de variáveis.
(((palavra-chave)))

O Julia possui as seguintes palavras chave:

----
abstract type   baremodule   begin    break            catch
const           continue     do       else             elseif
end             export       false    finally          for
function        global       if       import           let
local           macro        module   mutable struct   primitive type
quote           return       true     using            struct
while
----

Nós não precisamos memorizar esta lista. Na maior parte dos ambientes desenvolvidos, palavras chave são exibidas em diferentes cores; se nós tentarmos utilizar uma como um nome de variável, saberemos.


=== Expressões e Declarações
Uma _expressão_ é uma combinação de valores, variáveis e operadores. Um valor por si só é considerado uma expressão, assim como uma variável, então as expressões a seguir são todas válidas:
(((expressão)))

[source,@julia-repl-test chap02]
----
julia> 42
42
julia> n
17
julia> n + 25
42
----

Quando nós digitamos uma expressão no prompt, o REPL a _avalia_, o que significa que ele acha o valor da expressão. Neste exemplo, +n+ tem valor 17 e +n + 25+ valor 42.
(((avaliar)))

Uma _declaração_ é uma unidade de código que possui um efeito, como criar uma variável ou exibir um valor.
(((declaração)))

[source,@julia-repl-test chap02]
----
julia> n = 17
17
julia> println(n)
17
----

A primeira linha é uma declaração de atribuição que da valor a +n+. A segunda linha é uma declaração de impressão que exibe o valor de +n+.

Quando nós digitamos uma declaração, o REPL a _executa_, o que significa que ele faz o que a declaração diz.
(((executar)))


=== Modo Script

Até agora nós rodamos o Julia em _modo interativo_, o que significa que nós interagimos diretamente com o REPL. O modo interativo é uma boa maneira de começar, mas se nós estamos trabalhando com mais do que poucas linhas de código, ele pode ser inadequado.
(((modo interativo)))

A alternativa é salvar o código em um arquivo chamado _script_ e em seguida rodar o Julia em _modo script_ para executar o script. Por convenção, scripts Julia possuem nomes que terminam com _.jl_.
(((script)))(((modo script)))

Se você sabe como criar e rodar um script no seu computador, você está pronto pra utilizar. No entanto eu recomendaria utilizar o Repl.it novamente. Abrir um arquivo de texto, escrever um script e salvá-lo com a extensão _.jl_. O script pode ser executado em um terminal com o comando *+julia nome_do_script.jl+*.
(((extensão, .jl)))(((Repl.it)))

Como o Julia nos fornece ambos os modos, podemos testar pequenos trechos de código no modo interativo antes de colocá-los num script. Mas há diferenças entre o modo interativo e o modo script que podem ser um pouco confusas.

Por exemplo,  se nós estamos usando o Julia como uma calculadora, podemos digitar

[source,@julia-repl-test]
----
julia> milhas = 26.2
26.2
julia> milhas * 1.61
42.182
----

A primeira linha atribui um valor à +milhas+ e exibe o seu valor. A segunda linha é uma expressão, então o REPL avalia-a e exibe o resultado. Acontece que uma maratona é aproximadamente 42 quilômetros.

Mas se digitarmos o mesmo código num script e rodá-lo, não temos resultado algum. No modo script uma expressão, por si só, não possui nenhum efeito visível. Na verdade o Julia avalia a expressão, mas não exibe o valor a não ser que nós mandemos-o:

[source,julia]
----
milhas = 26.2
println(milhas * 1.61)
----

Esse comportamente pode ser um pouco confuso no início.

Um script geralmente contém uma sequência de declarações. Se existe mais de uma declaração, os resultados aparecem um de cada vez conforme as declarações são executadas.

Por exemplo, o script

[source,julia]
----
println(1)
x = 2
println(x)
----

produz o resultado

[source,@julia-eval]
----
println(1)
x = 2
println(x)
----

A declaração de atribuição não produz nenhum resultado.

===== Exercício 2-1

Para verificar o seu entendimento, digite a seguinte sequência de declarações no REPL do Julia e veja o que eles fazem:

[source,julia]
----
5
x = 5
x + 1
----

Agora coloque o mesmo trecho em um script e rode-o. Qual é o resultado? Modifique o script transformando cada expressão em uma declaração de impressão, e em seguida rode-o novamente.

=== Precedência de Operadores

Quando uma expressão contém mais de um operador, a ordem de avaliação depende da _precedência de operador_. Para operadores matemáticos, Julia segue convenções matemáticas. O acrônimo _PEMDAS_ é uma maneira útil de lembrar as regras:
(((operator precedence)))(((PEMDAS)))

* __P__arênteses possuem a maior precedência e podem ser usados para forçar uma expressão a ser avaliada na ordem que nós desejarmos. Já que expressões em parênteses são avaliadas primeiro, +2*(3-1)+ é 4, e +pass:[(1+1)^(5-2)]+ é 8. Nós também podemos utilizar parênteses para fazer com que uma expressão seja mais fácil de ler, como em +(minuto * 100) / 60+, mesmo que não altere o resultado.
(((parentheses)))

* __E__xponenciação possui a próxima precedência, então +pass:[1+2^3]+ é 9, e não 27, e +2*3^2+ é 18, não 36.
(((pass:[^])))

* __M__ultiplicação e __D__ivisão possuem maior precedência que __A__dição e __S__ubtração. Então +2*3-1+ é 5, não 4, e +pass:[6+4/2]+ é 8, não 5.
(((pass:[*])))(((pass:[/])))(((pass:[+])))(((pass:[-])))

* Operadores com a mesma precedência são avaliados da esquerda à direita (exceto exponenciação). Então na expressão +graus / 2 * π+, a divisão acontece primeiro e o resultado é multiplicado por +π+. Para dividir por latexmath:[\(2\pi\)], podemos usar parênteses, escrevendo +graus / 2 / π+ ou +graus / 2π+.

[TIP]
====
Não nos esforçamos muito para lembrar a precedência dos operadores. Se nós não consigormos lembrar ao olhar para a expressão, utilizamos parênteses para fazer com que seja óbvio.
====

=== Operações com Strings

Em geral, não podemos executar operações matemáticas em strings, mesmo se as strings pareçam-se com números, então o que se segue abaixo é inválido.
(((operação com string)))(((operador, string)))

[source,julia]
----
"2" - "1"    "ovos" / "fácil"    "terceiro" + "um encanto"
----

Mas existem duas exceções, +*+ e +pass:[^]+.
(((pass:[*])))(((pass:[^])))

O operador +pass:[*]+ executa a _concatenação de strings_, o que signifca que ele junta as strings ligando-as de ponta-a-ponta. Por exemplo:
((("string", "concatenação", see="concatenar")))((("concatenação")))

[source,@julia-repl-test]
----
julia> primeira_str = "tanga"
"tanga"
julia> segunda_str = "mandápio"
"mandápio"
julia> primeira_str * segunda_str
"tangamandápio"
----

O operador +^+ também funciona em strings; ele executa a repetição. Por exemplo, +"Spam"pass:[^]3+ é +"SpamSpamSpam"+. Se um dos valores é uma string, o outro deve ser um inteiro.
((("string", "repetição", see="repetição")))((("repetição")))

Este uso de +pass:[*]+ e +^+ faz sentido com analogia à multiplicação e exponenciação. Assim como +4pass:[^]3+ é equivalente a +4*4*4+, nós esperamos que +"Spam"pass:[^]3+ seja igual a +pass:["Spam"*"Spam"*"Spam"]+, e é.


=== Comentários

À medida que os programas ficam maiores e mais complicados, eles ficam mais dificéis de ler. Linguagens formais são densas, e é comum ser difícil olhar para um pedaço de código e descobrir o que está acontecendo, ou por quê.

Por esta razão, é uma boa ideia adicionar anotações em nossos programas para explicar em uma linguagem natural o que o programa esta fazendo. Estas anotações são chamadas de _comentários_, e eles começam com o símbolo +#+:
(((comentário)))((("pass:[#]", see="comentário")))

[source,julia]
----
# calcula a porcentagem da hora que já se passou
porcentagem = (minuto * 100) / 60
----

Neste caso, o comentário aparece numa linha por si só. Nós também podemos colocar comentários no final da linha:

[source,julia]
----
porcentagem = (minuto * 100) / 60   # porcentagem de uma hora
----

Tudo a partir do +#+ até o final da linha é ignorado e não causa efeito algum na execução do programa.

Comentários são bastante utéis quando eles documentam caractereísticas não óbvias do código. É razoável assumir que o leitor consegue descobrir _o que_ o código faz; é mais útil explicar o _por quê_.

Esse comentário é redundante com o código e inútil:

[source,julia]
----
v = 5   # atribui 5 a v
----

Esse comentário contém informação útil que não está no código:

[source,julia]
----
v = 5   # velocidade em metros/segundo.
----

[WARNING]
====
Bons nomes de variável podem reduzir a necessidade de comentários, mas nomes longos podem fazer com que expressões complexas sejam dificéis de ler, então há uma compensação.
====


=== Depuração

Três tipos de erros podem ocorrer em um programa: erros de sintaxe, erros de execução e erros de semântica. É útil distinguir entre eles a fim de localizá-los mais rapidamente.
(((depurando)))

Erro de sintaxe::
“sintaxe” refere-se à estrutura de um programa e as regras sobre esta estrutura. Por exemplo, parênteses precisam vir em pares correspondentes, então +(1 + 2)+ é válido, mas +8)+ é um erro de sintaxe.
+
Se existe algum erro de sintaxe em algum lugar do nosso programa, o Julia exibirá uma mensagem de erro e encerrará, e nós não poderemos rodar o programa. Durante as primeiras semanas da sua carreira de programador, você deverá passar bastante tempo localizando erros de sintaxe. Conforme você vai ganhando experiência, você irá cometer menos erros e achá-los mais rapidamente.
(((erro de sintaxe)))(((mensagem de erro)))

Erro de execução::
O segundo tipo de erro é o erro de execução, assim denominado pois o erro não aparece até que o programa finalmente esteja rodando. Estes erros também são chamados de _exceções_ pois eles geralmente indicam que algo excepcional (e ruim) aconteceu.
+
Erros de execução são raros nos programas simples que você verá nos primeiros capítulos, então pode demorar um pouco até que você encontre um.
(((erro de execução)))((("erro", "execução", see="erro de execução")))(((exceção, see="erro de execução")))

Erros de semântica::
O terceiro tipo de erro é o de “semântica”, o que significa que ele é relacionado a significado. Se há um erro de semântica no seu programa, ele irá rodar sem gerar nenhuma mensagem de erro, mas não irá fazer a coisa certa. Ele irá fazer outra coisa. Mais especificamente, ele irá fazer o que nós mandamos-o fazer.
+
Identificar erros de semântica pode ser complicado, pois requer que nós trabalhemos em sentido contrário ao olhar o resultado do programa e tentar descobrir o que ele está fazendo.
(((erro de semântica)))((("erro", "semântica", see="erro de semântica")))

=== Glossário

variável::
Um nome que refere-se a um valor.
(((variável)))

atribuição::
Uma declaração que atribui um valor a uma variável.
(((atribuição)))

diagrama de estado::
Uma representação gráfica de um conjunto de variáveis e os valores que elas referem-se.
(((diagrama de estado)))

palavra-chave::
Uma palavra reservada que é usada para analisar o programa; você não pode usar palavras-chave como +if+, +function+, e +while+ como nomes de variáveis.
(((palavra-chave)))

operando::
Um dos valores no qual um operador opera sobre.
(((operando)))

expressão::
Uma combinação de variáveis, operadores, e valores que representam um único resultado.
(((expressão)))

avaliar::
Simplificar uma expressão através da execução de operações a fim de produzir um único valor.
(((avaliar)))

declaração::
Uma seção de código que representa um comando ou ação. Até agora, as declarações que nós vimos são atribuições e declarações de impressão.
(((declaração)))

executar::
Rodar uma declaração e fazer o que ela indica.
(((executar)))

modo interativo::
Um modo de usar o REPL do Julia digitando código no prompt.
(((modo interativo)))

modo script::
Um modo de usar o Julia para ler código de um script e executá-lo.
(((modo script)))

script::
Um programa guardado em um arquivo.
(((script)))

precedência de operador::
Regras que governam a ordem na qual as expressões que envolvem múltiplos operadores matemáticos são avaliados.
(((precedência de operador)))

concatenar::
Juntar duas strings ponta-a-ponta.
(((concatenação de strings)))

comentário::
Informação em um programa destinada a outros programadores (ou qualquer um lendo o código fonte) que não tem nenhum efeito na execução do programa.
(((comentário)))

erro de sintaxe::
Um erro em um programa que faz com que seja impossível analisar (e consequentemente interpretar).
(((erro de sintaxe)))

erro de execução ou exceção::
Um erro que é detectado enquanto um programa está rodando.
(((erro de execução)))

semântica::
O significado de um programa.
(((semântica)))

erro de semântica::
Um erro em um programa que faz com que ele faça algo diferente do que o programador pretendia.
(((erro de semântica)))


=== Exercícios

[[ex02-1]]
===== Exercício 2-2

Repetindo o conselho do capítulo anterior, sempre que você aprende novas funcionalidades, você deve experimentá-las no modo interativo e cometer erros de propósito para ver o que acontece de errado.

. Nós vimos que +n = 42+ é válido. E +42 = n+ ?

. E que tal +x = y = 1+?

. Em algumas linguagens toda declaração acaba com um ponto e vírgula, +;+. O que acontece se você colocar um ponto e vírgula no final de uma declaração no Julia?
(((pass:[;])))

. E se você quiser colocar um ponto no final de uma declaração ?

. Em notação matemática, você pode multiplicar +x+ e +y+ assim: +x y+. O que acontece se você tentar isso em Julia? E 5x?

[[ex02-2]]
===== Exercício 2-3

Pratique usando o REPL do Julia como uma calculadora:
(((calculator)))

. O volume de uma esfera com raio latexmath:[\(r\)] é latexmath:[\(\frac{4}{3} \pi r^3\)]. Qual é o volume de uma esfera de raio 5?

. Suponha que o preço de cobertura de um livro é R$ 24,95, mas as livrarias possuem desconto de 40%. A entrega custa R$ 3,00 para a primeira cópia e R$ 0,75 para cada cópia adicional. Qual é o preço total do atacado para 60 cópias?

. Se eu saio de casa às 6:52 da manhã e corro uma milha em um ritmo tranquilo (8min15s por milha), em seguida 3 milhas em ritmo (7min12seg por milha) e 1 milha em um ritmo tranquilo novamente, a que horas eu chego em casa para o café da manhã?
