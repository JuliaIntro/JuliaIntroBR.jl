[[chap15]]
== Estruturas e Objetos

A esta altura, você sabe como usar funções para organizar o código e os tipos internos para organizar os dados. O próximo passo é aprender a criar seus próprios tipos para organizar tanto o código como os dados. Este é um tópico importante e serão necessários alguns capítulos para abordar o tema.


=== Tipos Compostos

Temos usado muitos tipos internos do Julia e agora definiremos um novo tipo. Como exemplo, vamos criar um tipo chamado +Ponto+ que representa um ponto no espaço bidimensional.
(((tipo)))(((Ponto)))((("tipo", "definido pelo programador", "Ponto", see="Ponto")))

Na notação matemática, os pontos geralmente são escritos entre parênteses com uma vírgula separando as coordenadas. Por exemplo, latexmath:[\(\left(0,0\right)\)] representa a origem e latexmath:[\(\left(x,y\right)\)] representa o ponto latexmath:[\(x\)] unidades à direita e latexmath:[\(y\)] unidades acima da origem, se o ponto estiver no 1o. quadrante.

Existem diversas maneiras de representar pontos no Julia:

* Podemos armazenar as coordenadas separadamente em duas variáveis, +x+ e +y+.

* Poderíamos armazenar as coordenadas como elementos de um vetor ou de uma tupla.

* Poderíamos criar um novo tipo para representar os pontos como objetos.

Criar um novo tipo é mais complicado que as outras opções, mas possui vantagens que serão mostradas em breve.

Um _tipo composto_ definido pelo programador também é denominado de _estrutura_. A definição +struct+ para um ponto é dada por:
(((tipo composto)))(((struct)))((("palavra-chave", "struct", see="struct")))(((end)))

[source,@julia-setup chap15]
----
struct Ponto
    x
    y
end
----

O cabeçalho indica que a nova struct é chamada de +Ponto+ enquanto o corpo define os _atributos_ ou os _campos_ da struct. Nesse caso, a struct +Ponto+ possui dois campos: +x+ e +y+.
(((atributo)))((("campo", see="atributo")))

A struct é como uma fábrica para criar os objetos. Para criar um ponto, chama-se +Ponto+ como se fosse uma função tendo como argumentos os valores dos campos. Quando +Ponto+ é usado como uma função, ele é chamado de _construtor_.
(((construtor)))

[source,@julia-repl-test chap15]
----
julia> p = Ponto(3.0, 4.0)
Ponto(3.0, 4.0)
----

O valor de retorno é uma referência a um objeto +Ponto+, que atribuímos a +p+.
(((referência)))

A criação de um novo objeto é chamada _instanciação_, e o objeto é uma _instância_ do tipo.
(((instanciação)))(((instância)))

Quando você imprime uma instância, o Julia informa a que tipo pertence e quais os valores dos atributos.

Todo objeto é uma instância de algum tipo; portanto, “objeto” e “instância” são permutáveis. Mas neste capítulo, eu uso “instância” para indicar que estou falando de um tipo definido pelo programador.

Um diagrama de estado que mostra um objeto e seus campos é denominado de _diagrama do objeto_, conforme <<fig15-1>>.
(((diagrama do objeto)))((("diagrama", "objeto", see="diagrama do objeto")))

[[fig15-1]]
.Diagrama do objeto
image::images/fig151.svg[]


=== Structs são Imutáveis

Você pode acessar os valores dos campos usando a notação +.+:
(((.)))((("notação do ponto", see=".")))

[source,@julia-repl-test chap15]
----
julia> x = p.x
3.0
julia> p.y
4.0
----

A expressão +p.x+ significa: “Vá até a referência do objeto +p+ e obtenha o valor de +x+.” No exemplo, atribuímos esse valor a uma variável +x+. Não há conflito entre a variável +x+ e o campo +x+.

Você pode usar a notação do ponto como parte de qualquer expressão. Por exemplo:

[source,@julia-repl-test chap15]
----
julia> distância = sqrt(p.x^2 + p.y^2)
5.0
----

Por padrão, as structs são imutáveis, isto é, após a construção, os campos não podem mudar de valor:
(((imutável)))

[source,@julia-repl-test chap15]
----
julia> p.y = 1.0
ERROR: setfield! immutable struct of type Ponto cannot be changed
----

Isso pode parecer estranho de início, mas tem várias vantagens:

* Pode ser mais eficiente.

* Não é possível violar os invariantes dos construtores do tipo (veja <<constructor>>).

* O código que usa os objetos imutáveis pode ser mais fácil de ler e entender.


=== Structs Mutáveis

Quando necessário, os tipos compostos mutáveis podem ser declarados com a palavra-chave +mutable struct+. Aqui está a definição de um ponto mutável:
(((tipo composto mutável)))(((struct mutável)))((("palavra-chave", "mutable struct", see="mutable struct")))(((MPonto)))((("tipo", "definido pelo programador", "MPonto", see="MPonto")))

[source,@julia-setup chap15]
----
mutable struct MPonto
    x
    y
end
----

Você pode atribuir valores a uma instância de uma struct mutável usando a notação de ponto:
(((.)))

[source,@julia-repl-test chap15]
----
julia> lacuna = MPonto(0.0, 0.0)
MPonto(0.0, 0.0)
julia> lacuna.x = 3.0
3.0
julia> lacuna.y = 4.0
4.0
----


=== Retângulos

Às vezes, é óbvio quais devem ser os campos de um objeto, mas outras vezes você precisa escolher entre as opções. Por exemplo, imagine que você está estruturando um tipo para representar retângulos. Quais campos você usaria para especificar a localização e o tamanho de um retângulo? Desconsidere o ângulo e para simplificar, suponha que o retângulo seja vertical ou horizontal.

Existem pelo menos duas possibilidades:

* Você poderia especificar um vértice do retângulo (ou o centro), a largura e a altura.

* Você poderia especificar dois vértices opostos.

Nesse momento, é difícil dizer se um é melhor que o outro e portanto, implementaremos o primeiro, apenas como exemplo.
(((Retângulo)))((("tipo", "definido pelo programador", "Retângulo", see="Retângulo")))

[source,@julia-setup chap15]
----
"""
Representa um retângulo.

campos: largura, altura, vértice.
"""
struct Retângulo
    largura
    altura
    vértice
end
----

O docstring lista os campos: a largura e a altura, que são números, e o vértice, que é um objeto +Ponto+ que indica o vértice inferior esquerdo.
(((docstring)))

Para a representação de um retângulo, você tem que instanciar um objeto +Retângulo+:

[source,@julia-repl-test chap15]
----
julia> origem = MPonto(0.0, 0.0)
MPonto(0.0, 0.0)
julia> caixa = Retângulo(100.0, 200.0, origem)
Retângulo(100.0, 200.0, MPonto(0.0, 0.0))
----

<<fig15-2>> mostra o estado deste objeto. Um objeto que é um campo de outro objeto é _embutido_. Perceba que o atributo +vértice+ se refere a um objeto mutável, por isso ele é desenhado fora do objeto +Retângulo+.
(((embutido)))(((diagrama do objeto)))

[[fig15-2]]
.Diagrama do objeto
image::images/fig152.svg[]


=== Instâncias como Argumentos

Você pode passar uma instância como um argumento da maneira tradicional. Por exemplo:
(((imprimir_ponto)))((("função", "definido pelo programador", "imprimir_ponto", see="imprimir_ponto")))

[source,@julia-setup chap15]
function imprimir_ponto(p)
----
    println("($(p.x), $(p.y))")
end
----

A função +imprimir_ponto+ recebe como argumento um +ponto+ e o apresenta em notação matemática. Para chamá-lo, você pode passar +p+ como argumento:

[source,@julia-repl-test chap15]
----
julia> imprimir_ponto(lacuna)
(3.0, 4.0)
----

===== Exercício 15-1

Escreva uma função chamada +distância_entre_pontos+ que recebe dois pontos como argumentos e retorna a distância entre eles.
(((distância_entre_pontos)))(((("função", "definido pelo programador", "distância_entre_pontos", see = "distância_entre_pontos")))

Se um objeto da struct mutável for passado para uma função como argumento, a função poderá modificar os campos do objeto. Por exemplo, +move_ponto!+ recebe um objeto mutável +MPonto+ e dois números +dx+ e +dy+, e adiciona os números respectivamente aos atributos +x+ e +y+ de +MPonto+:
(((move_ponto!)))((("função", "definido pelo programador", "move_ponto!", see="move_ponto!")))

[source,@julia-setup chap15]
----
function move_ponto!(p, dx, dy)
    p.x += dx
    p.y += dy
    nothing
end
----

Aqui está um exemplo que mostra o resultado:

[source,@julia-repl-test chap15]
----
julia> origem = MPonto(0.0, 0.0)
MPonto(0.0, 0.0)
julia> move_ponto!(origem, 1.0, 2.0)

julia> origem
MPonto(1.0, 2.0)
----

Dentro da função, +p+ é um alias (ou apelido) para +origem+, então quando a função modifica +p+, +origem+ também muda.
(((alias)))

Passar um objeto +Ponto+ imutável para +move_ponto!+ faz uma mensagem de erro aparecer:

[source,@julia-repl-test chap15]
----
julia> move_ponto!(p, 1.0, 2.0)
ERROR: setfield! immutable struct of type Ponto cannot be changed
----

No entanto, você pode modificar o valor de um atributo mutável de um objeto imutável. Por exemplo, +move_retângulo!+ tem como argumentos um objeto +Retângulo+ e dois números +dx+ e +dy+, e usa +move_ponto!+ para mover o canto do retângulo:

[source,@julia-setup chap15]
----
function move_retângulo!(ret, dx, dy)
  move_ponto!(ret.vértice, dx, dy)
end
----

Agora +p+ em +move_ponto!+ é um apelido para +ret.vértice+, então quando +p+ é modificado, +ret.vértice+ também muda:

[source,@julia-repl-test chap15]
----
julia> caixa
Retângulo(100.0, 200.0, MPonto(0.0, 0.0))
julia> move_retângulo!(caixa, 1.0, 2.0)

julia> caixa
Retângulo(100.0, 200.0, MPonto(1.0, 2.0))
----

[WARNING]
====
Você não pode reatribuir um atributo mutável a um objeto imutável:
(((reatribuição)))

[source,@julia-repl-test chap15]
----
julia> caixa.vértice = MPonto(1.0, 2.0)
ERROR: setfield! immutable struct of type Retângulo cannot be changed
----
====

=== Instâncias como Valores de Retorno

Funções podem retornar instâncias. Por exemplo, +encontra_centro+ recebe um +Retângulo+ como argumento e retorna um +Ponto+ que contém as coordenadas do centro do retângulo:
(((encontra_centro)))((("função", "definido pelo programador", "encontra_centro", see="encontra_centro")))

[source,@julia-setup chap15]
----
function encontra_centro(ret)
    Ponto(ret.vértice.x + ret.largura / 2, ret.vértice.y + ret.altura / 2)
end
----

A expressão +ret.vértice.x+ significa: “Vá ao objeto +ret+ e selecione o campo +vértice+; depois vá até esse objeto e selecione o campo +x+.”

Aqui está um exemplo que passa +caixa+ como argumento e atribui o +Ponto+ recebido ao +centro+:

[source,@julia-repl-test chap15]
----
julia> centro = encontra_centro(caixa)
Ponto(51.0, 102.0)
----


=== Cópia
//coloquei a definição de aliasing antes de traduzir o parágrafo
"Aliasing" é um termo que refere-se ao acesso de um mesmo local da memória por variáveis diferentes. Ele pode dificultar a leitura de um programa, pois as alterações em um local podem ter efeitos inesperados em outro local. É difícil acompanhar todas as variáveis que podem se referir a um objeto dado.
(((alias)))

A cópia de um objeto é muitas vezes uma alternativa ao aliasing. O Julia possui uma função chamada +deepcopy+ que pode duplicar qualquer objeto:
(((cópia)))(((deepcopy)))((("função", "Base", "deepcopy", see="deepcopy")))(((cópia profunda)))

[source,@julia-repl-test chap15]
----
julia> p1 = MPonto(3.0, 4.0)
MPonto(3.0, 4.0)
julia> p2 = deepcopy(p1)
MPonto(3.0, 4.0)
julia> p1 ≡ p2
false
julia> p1 == p2
false
----

O operador +≡+ indica que +p1+ e +p2+ não são o mesmo objeto, que é o que imaginávamos. Mas você pode ter pensado que +==+ devolvesse +true+ porque esses pontos contêm os mesmos dados. Nesse caso, você ficará desapontado ao saber que, para objetos mutáveis, o comportamento padrão do operador +==+ é o mesmo do operador +===+ pois verifica-se a identidade do objeto e não a equivalência do objeto. Isso ocorre porque, para tipos compostos mutáveis, o Julia não sabe o que deve ser considerado equivalente. Pelo menos, ainda não.
(((==)))(((≡)))

===== Exercício 15-2

Crie uma instância +Ponto+, faça uma cópia dela e verifique a equivalência e a igualdade de ambas. O resultado pode surpreendê-lo, além de explicar porque o alias não é um problema para um objeto imutável.


=== Depuração

Quando você começa a trabalhar com os objetos, é provável que encontre algumas novas exceções. Se você tentar acessar um campo que não existe, tem-se:
(((depuração)))

[source,@julia-repl-test chap15]
----
julia> p = Ponto(3.0, 4.0)
Ponto(3.0, 4.0)
julia> p.z = 1.0
ERROR: type Ponto has no field z
Stacktrace:
 [1] setproperty!(::Ponto, ::Symbol, ::Float64) at ./sysimg.jl:19
 [2] top-level scope at none:0
----

Se você não tem certeza de qual é o tipo de objeto, pode-se perguntar:
(((typeof)))

[source,@julia-repl-test chap15]
----
julia> typeof(p)
Ponto
----

Você também pode usar +isa+ para verificar se um objeto é uma instância de um certo tipo:
(((isa)))((("operador", "Base", "isa", see="isa")))

[source,@julia-repl-test chap15]
----
julia> p isa Ponto
true
----

Se você não tem certeza se um objeto possui um determinado atributo, pode-se usar a função interna +fieldnames+:
(((deepcopy)))((("função", "Base", "deepcopy", see="deepcopy")))

[source,@julia-repl-test chap15]
----
julia> fieldnames(Ponto)
(:x, :y)
----

ou a função +isdefined+:
(((isdefined)))((("função", "Base", "isdefined", see="isdefined")))

[source,@julia-repl-test chap15]
----
julia> isdefined(p, :x)
true
julia> isdefined(p, :z)
false
----

O primeiro argumento pode ser qualquer objeto enquanto o segundo argumento é um símbolo +:+ seguido do nome do campo.
(((:)))(((Símbolo)))((("tipo", "Base", "Símbolo", see="Símbolo")))

=== Glossário

struct::
Um tipo composto.
(((struct)))

construtor::
Uma função que tem o mesmo nome que um tipo e que cria as instâncias deste tipo.
(((construtor)))

instância::
Um objeto que pertence a um tipo.
(((instância)))

instanciar::
Criar um novo objeto.
(((instanciar)))

atributo ou campo::
Um dos valores nomeados associados a um objeto.
(((atributo)))

objeto embutido::
Um objeto que é armazenado como um campo de outro objeto.
(((objeto embutido)))

cópia profunda::
Cópia do conteúdo de um objeto, bem como quaisquer objetos embutidos e quaisquer objetos embutidos a eles, e assim por diante; é implementado pela função +deepcopy+.
(((cópia profunda)))

diagrama de objetos::
Um diagrama que mostra os objetos, os seus campos e os respectivos valores dos campos.
(((diagrama de objetos)))


=== Exercícios

[[ex15-1]]
===== Exercício 15-3

. Escreva uma definição para um tipo chamado +Círculo+ com os campos +centro+ e +raio+, em que +centro+ é um objeto +Ponto+ e +raio+ é um número.
(((Círculo)))((("tipo", "definido pelo programador", "Círculo", see="Círculo")))

. Instancie um objeto círculo que represente um círculo com seu centro em latexmath:[\(\left(150, 100\right)\)] e raio 75.

. Escreva uma função denominada +ponto_no_círculo+ que recebe um objeto +Círculo+ e um objeto +Ponto+ e retorna +true+ se o ponto estiver dentro ou no contorno do círculo.
(((ponto_no_círculo)))((("função", "definido pelo programador", "ponto_no_círculo", see="ponto_no_círculo")))

. Escreva uma função denominada +ret_no_círculo+ que recebe um objeto +Círculo+ e um objeto +Retângulo+ e retorna +true+ se o retângulo estiver inteiramente dentro ou nos contornos do círculo.
(((ret_no_círculo)))((("função", "definido pelo programador", "ret_no_círculo", see="ret_no_círculo")))

. Escreva uma função denominada +ret_círc_sobreposição+ que recebe um objeto +Círculo+ e um objeto +Retângulo+ e devolve +true+ se algum dos vértices do retângulo estiver dentro do círculo. Ou, como uma versão mais desafiadora, devolva +true+ se alguma parte do retângulo estiver dentro do círculo.
(((ret_círc_sobreposição)))((("função", "definido pelo programador", "ret_círc_sobreposição", see="ret_círc_sobreposição")))

[[ex15-2]]
===== Exercício 15-4

. Escreva uma função chamada +desenha_ret+ que recebe um objeto do tipo turtle e um objeto +Retângulo+ e use a tartaruga para desenhar o retângulo. Verifique o Capítulo 4 para os exemplos que usam os objetos +Turtle+.
(((desenha_ret)))((("função","definido pelo programador","desenha_ret", see="desenha_ret")))

. Escreva uma função chamada +desenha_círculo+ que recebe um objeto +Turtle+ e um objeto +Círculo+ e desenha o círculo.
(((desenha_círculo)))((("função", "definido pelo programador", "desenha_círculo", see="desenha_círculo")))
